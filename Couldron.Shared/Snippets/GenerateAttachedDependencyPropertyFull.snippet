<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Define a Full DependencyProperty</Title>
      <Shortcut>propattachedfull</Shortcut>
      <Description>Code snippet for a property using DependencyProperty as the backing store</Description>
      <Author>Alexander Schunk</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>
        <Literal>
          <ID>ownerclass</ID>
          <ToolTip>The owning class of this Property.  Typically the class that it is declared in.</ToolTip>
          <Default>ownerclass</Default>
        </Literal>
        <Literal>
          <ID>defaultvalue</ID>
          <ToolTip>The default value for this property.</ToolTip>
          <Default>0</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
#region Dependency Attached Property $property$

/// <summary>
/// Gets the value of $property$
/// </summary>
/// <param name="obj"><see cref="DependencyObject" /> with the attached property</param>
/// <returns>The value of the attached property</returns>
public static $type$ Get$property$(DependencyObject obj)
{
    return ($type$)obj.GetValue($property$Property);
}

/// <summary>
/// Sets the value of the $property$ attached property
/// </summary>
/// <param name="obj"><see cref="DependencyObject" /> with the attached property</param>
/// <param name="value">The new value to set</param>
public static void Set$property$(DependencyObject obj, $type$ value)
{
    obj.SetValue($property$Property, value);
}

/// <summary>
/// Identifies the $property$ dependency property
/// </summary>
public static readonly DependencyProperty $property$Property = DependencyProperty.RegisterAttached("$property$", typeof($type$), typeof($ownerclass$), new PropertyMetadata($defaultvalue$, On$property$Changed));

private static void On$property$Changed(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args)
{
}

#endregion
$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>