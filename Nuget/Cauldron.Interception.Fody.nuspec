<?xml version="1.0"?>
<package xmlns="http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd">
  <metadata>
    <id>Cauldron.Interception.Fody</id>
    <version>2.0.0</version>
    <title>Capgemini Cauldron Interception for Fody</title>
    <authors>Alexander Schunk, Capgemini Deutschland GmbH</authors>
    <owners>Alexander Schunk, Capgemini Deutschland GmbH</owners>
    <licenseUrl>https://raw.githubusercontent.com/Capgemini/Cauldron/master/LICENSE</licenseUrl>
    <projectUrl>https://github.com/Capgemini/Cauldron</projectUrl>
    <iconUrl>https://raw.githubusercontent.com/Capgemini/Cauldron/master/cauldron.png</iconUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <description>Fody add-in that provides method, property, field and constructor interception. Supports Net45, NetStandard2.0 and UWP.</description>
    <copyright>Copyright (c) 2016 Capgemini Deutschland GmbH</copyright>
    <tags>Toolkit Capgemini Cauldron Interception interceptor interception AOP Fody Cecil CIL ILWeaving</tags>
    <releaseNotes>
      2018.03.02 - [C] All interceptor interfaces that were part of this package were moved to Cauldron.BasicInterceptors
      2018.01.11 - [B] ModuleMain entry point interceptor fixed. Waever throwed exception during weaving.
      2018.01.09 - [C] Getting rid of useless casts in created code.
      2018.01.09 - [B] MethodInterceptors in Async methods are now weaved correctly.
      2018.01.08 - [C] Interceptor OnException return type changed to bool to be able to create interceptors that swallow exceptions.
      2018.01.08 - [A] Simple interceptors without try catch added.
      2018.01.07 - [A] Support for assembly-wide attribute decorating added.
      2017.12.30 - [C] DoNotInterceptAttribute removed... Replaced by the InterceptionRuleAttribute instead. See documentation for more details.
      2017.12.30 - [A] Support for properties without backing fields added.
      2017.12.29 - [C] AssignMethodAttribute now falls back to 'is assignable' if the return type of a method does not match.
      2017.12.29 - [C] {CtorArgument:} placeholder now accepts parameter names besides index.
      2017.12.28 - [B] AssignMethodAttribute decorated field types were not imported.
      2017.12.25 - [C] AssignMethodAttribute now supports constructor defined placeholders.
      2017.12.25 - [B] Fixed a bug that caused some methods to return null if Code-Optimization is on.
      2017.12.25 - [C] AssignMethodAttribute can now throw an error if the associated method is not found.
      2017.12.25 - [C] AssignMethodAttribute now allowing parameters.
      2017.12.23 - [A] New interceptor extension added - AssignMethodAttribute
      2017.12.22 - [A] System.Xml.Serialization.XmlIgnoreAttribute will be added to all Cauldron created properties if the type System.Xml.Serialization.XmlIgnoreAttribute exist.
      2017.12.22 - [B] NonSerializedAttribute was implemented as a custom attribute... Now correctly implemented.
      2017.12.21 - [A] NonSerializedAttribute or IgnoreDataMemberAttribute or JsonIgnoreAttribute added to all Cauldron created fields and properties (Only if these attributes are referenced in the project).
      2017.12.21 - [C] Some info and error messages changed to be more informative.
      2017.12.21 - [B] In some cases if the weaver tries to retrieved information from referenced assemblies, a BadImageFormatException occures. Fixed.
      2017.12.20 - [A] Real support for Net45 added - The weaver itself still requires an installed Net461.
      2017.12.14 - [A] Constructor interceptor added.
      2017.12.11 - [B] Sort of fixed the issue that jumping to errors on async methods did not work.
      2017.12.11 - [B] Fixed a bug that caused the weaver to weav types that does not exist and then throws exceptions.
      2017.12.11 - [B] A bug was in "cleaning" fixed that caused local variables to be removed although they were still in use.
      2017.12.11 - [A] Allowing non auto-properties to be intercepted.
      2017.12.06 - [B] Fixed the weaver for the IChangeAwareViewModel interface.
      2017.12.06 - [B] Fixed a bug that caused try-catches to be malformed if the modified method was empty.
      2017.12.06 - [A] IPropertyInitializer added. This interface forces an interceptor to be loaded on type init instead of the first call.
      2017.12.06 - [B] If PropertyChanged.Fody weaved before Cauldron then Cauldron has removed the implementation for the particular property. This is now fixed.
      2017.12.05 - [A] Sequence points added.
      2017.12.05 - [B] Bug from yesterday regarding ComponentAttribute still occured on nested private classes. Now fixed.
      2017.12.04 - [B] Interceptors that uses ISyncRoot interface was not correctly weaved. This caused the object initialization to be weaved in the .cctor even though it is not static.
      2017.12.04 - [B] The weaving of the auto-ComponentAttribute attributed types caused an error in some cases if the type is not public.
      2017.12.04 - [A] Weaves an initializer for xaml resources to be able to auto-load them.
      2017.12.04 - [C] TimedCacheAttribute namespace change also reflected to weaver.
      2017.12.04 - [R] Useless method cache removed from weaver.
    </releaseNotes>
    <dependencies>
      <dependency id="Fody" version="2.3.14" />
    </dependencies>
  </metadata>
  <files>
    <file src="..\Fody\Cauldron.Interception.Fody\bin\Release\**" target="" />
    <!-- Desktop Net461 -->
    <file src="..\NetStandard\Cauldron.Interception\bin\Release\netstandard2.0\Cauldron.Interception**" target="lib\net461" />
    <!-- Desktop Net45 -->
    <file src="..\Win32\Net45\Cauldron.Win32.Net45.Interception\bin\Release\Cauldron.Interception**" target="lib\net45" />
    <!-- UWP -->
    <file src="..\UWP\Cauldron.Interception\bin\Release\Cauldron.Interception**" target="lib\uap10.0" />
    <!-- Net Standard 2.0 -->
    <file src="..\NetStandard\Cauldron.Interception\bin\Release\netstandard2.0\Cauldron.Interception**" target="lib\netstandard2.0" />
    <file src="Fody\**" target="tools" />
    <file src="..\NetStandard\Cauldron.Interception\**\*.cs" target="src" />
  </files>
</package>