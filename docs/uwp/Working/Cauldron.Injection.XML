<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cauldron.Injection</name>
    </assembly>
    <members>
        <member name="T:Cauldron.Injection.InjectAttribute">
            <summary>
            Specifies that the property, field or argument contains a type or parameter that can be supplied by the <see cref="T:Cauldron.Activator.Factory"/>
            </summary>
        </member>
        <member name="T:Cauldron.Injection.InjectionFactoryExtension">
            <summary>
            Adds injection functionality to the <see cref="T:Cauldron.Activator.Factory"/>
            </summary>
        </member>
        <member name="P:Cauldron.Injection.InjectionFactoryExtension.CanHandleAmbiguousMatch">
            <summary>
            Gets a value that indicates that this extension is able to resolve <see cref="T:System.Reflection.AmbiguousMatchException"/>
            </summary>
        </member>
        <member name="M:Cauldron.Injection.InjectionFactoryExtension.CanModifyArguments(System.Reflection.MethodBase,System.Type)">
            <summary>
            Returns true if a <see cref="T:System.Type"/> can be modify arguments passed to <see cref="M:Cauldron.Activator.IFactoryExtension.ModifyArgument(System.Reflection.ParameterInfo[],System.Object[])"/> with this <see cref="T:Cauldron.Activator.IFactoryExtension"/> implementation
            </summary>
            <param name="method">The defined constructor defined by <see cref="T:Cauldron.Activator.ComponentConstructorAttribute"/></param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object created</param>
            <returns>True if can be manipulated</returns>
        </member>
        <member name="M:Cauldron.Injection.InjectionFactoryExtension.ModifyArgument(System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            Modifies the arguments defined by <paramref name="arguments"/> and returns the modified array
            </summary>
            <param name="argumentTypes">The parameter types of the constructor</param>
            <param name="arguments">The arguments used to create an object</param>
            <returns>A modified array of arguments</returns>
        </member>
        <member name="M:Cauldron.Injection.InjectionFactoryExtension.OnCreateObject(System.Object,System.Type)">
            <summary>
            Occures when an object is created
            </summary>
            <param name="context">The object instance</param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object created</param>
        </member>
        <member name="M:Cauldron.Injection.InjectionFactoryExtension.OnInitialize(System.Type)">
            <summary>
            Occures when <see cref="T:Cauldron.Activator.Factory"/> is initialized
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the object created</param>
        </member>
        <member name="M:Cauldron.Injection.InjectionFactoryExtension.SelectAmbiguousMatch(System.Collections.Generic.IEnumerable{System.Type},System.String)">
            <summary>
            Occures if multiple Types with the same <paramref name="contractName"/> was found.
            Should return null if <paramref name="ambiguousTypes"/> collection does not contain the required <see cref="T:System.Type"/>
            </summary>
            <param name="ambiguousTypes">A collection of Types that with the same <paramref name="contractName"/></param>
            <param name="contractName">The contract name of the implementations</param>
            <returns>The selected <see cref="T:System.Type"/></returns>
        </member>
    </members>
</doc>
