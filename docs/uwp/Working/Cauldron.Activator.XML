<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cauldron.Activator</name>
    </assembly>
    <members>
        <member name="T:Cauldron.Core.Output">
            <summary>
            Provides a set of methods that help to output information of a compiled dll
            </summary>
        </member>
        <member name="T:Cauldron.Activator.AnonymousTypeWithInterfaceExtension">
            <summary>
            Provides usefull extension methods for anonymous class
            </summary>
        </member>
        <member name="M:Cauldron.Activator.AnonymousTypeWithInterfaceExtension.CreateObject``1(System.Object)">
            <summary>
            Creates a new <see cref="T:System.Type"/> that implements the properties of an interface defined by <typeparamref name="T"/>
            and copies all value of <paramref name="anon"/> to the new object
            </summary>
            <typeparam name="T">The type of interface to implement</typeparam>
            <param name="anon">The anonymous object</param>
            <returns>A new object implementing the interface defined by <typeparamref name="T"/></returns>
        </member>
        <member name="T:Cauldron.Activator.CloneIgnoreAttribute">
            <summary>
            Instructs the Cloner not to clone the public field or public read/write property value
            </summary>
        </member>
        <member name="T:Cauldron.Activator.ComponentAttribute">
            <summary>
            Specifies that <see cref="T:System.Type"/> provide a particular export
            </summary>
        </member>
        <member name="M:Cauldron.Activator.ComponentAttribute.#ctor(System.String,Cauldron.Activator.FactoryCreationPolicy)">
            <summary>
            Initializes an instance of <see cref="T:Cauldron.Activator.ComponentAttribute"/>
            </summary>
            <param name="contractName">The contract name that is used to export the type</param>
            <param name="policy">The creation policy</param>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="contractName"/> is null</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="contractName"/> is empty</exception>
        </member>
        <member name="M:Cauldron.Activator.ComponentAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Cauldron.Activator.ComponentAttribute"/>
            </summary>
            <param name="contractName">The contract name that is used to export the type</param>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="contractName"/> is null</exception>
            <exception cref="T:System.ArgumentException">Parameter <paramref name="contractName"/> is empty</exception>
        </member>
        <member name="M:Cauldron.Activator.ComponentAttribute.#ctor(System.Type)">
            <summary>
            Initializes an instance of <see cref="T:Cauldron.Activator.ComponentAttribute"/>
            </summary>
            <param name="contractType">A type from which to derive the contract name that is used to export the type</param>
        </member>
        <member name="M:Cauldron.Activator.ComponentAttribute.#ctor(System.Type,Cauldron.Activator.FactoryCreationPolicy)">
            <summary>
            Initializes an instance of <see cref="T:Cauldron.Activator.ComponentAttribute"/>
            </summary>
            <param name="contractType">A type from which to derive the contract name that is used to export the type</param>
            <param name="policy">The creation policy</param>
        </member>
        <member name="P:Cauldron.Activator.ComponentAttribute.ContractName">
            <summary>
            Gets the contract name of the object export
            </summary>
        </member>
        <member name="P:Cauldron.Activator.ComponentAttribute.Policy">
            <summary>
            Gets the creation policy
            </summary>
        </member>
        <member name="T:Cauldron.Activator.ComponentConstructorAttribute">
            <summary>
            Specifies that <see cref="T:System.Type"/> can be constructed by using this particular Constructor or Method
            </summary>
        </member>
        <member name="T:Cauldron.Activator.ExtensionsCloning">
            <summary>
            Provides usefull extension methods regarding cloning and mapping
            </summary>
        </member>
        <member name="M:Cauldron.Activator.ExtensionsCloning.DeepClone``1(``0)">
            <summary>
            Uses <see cref="M:Cauldron.Activator.ExtensionsCloning.MapTo``2(``0,``1)"/> to clone an object instance to an object with the same type
            </summary>
            <typeparam name="T">The type of the source</typeparam>
            <param name="source">The source object</param>
            <returns>Returns the clone of <paramref name="source"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.Activator.ExtensionsCloning.MapTo``2(``0,``1)">
            <summary>
            Maps all properties and fields of an instance to another instance. The Clone() method is used to copy an instance if exist.
            <para/>
            Mapping fails on jagged and multidimensional array. Classes without parameterless constructor will stay null.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the source instance</typeparam>
            <typeparam name="TTarget">The <see cref="T:System.Type"/> of the target instance</typeparam>
            <param name="source">The source object</param>
            <param name="target">The target object</param>
            <returns>Returns the target</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
        <member name="M:Cauldron.Activator.ExtensionsCloning.MapTo``1(System.Object)">
            <summary>
            Maps all properties and fields of an instance to another instance. The Clone() method is used to copy an instance if exist.
            <para/>
            Mapping fails on jagged and multidimensional array. Classes without parameterless constructor will stay null.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the target instance</typeparam>
            <param name="source">The source object</param>
            <returns>Returns the target</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="T:Cauldron.Activator.Factory">
            <summary>
            Provides methods for creating and destroying object instances
            </summary>
        </member>
        <member name="P:Cauldron.Activator.Factory.CanRaiseExceptions">
            <summary>
            Gets or sets a value that indicates if the <see cref="T:Cauldron.Activator.Factory"/> is allowed to raise an exception or not.
            </summary>
        </member>
        <member name="P:Cauldron.Activator.Factory.RegisteredTypes">
            <summary>
            Gets a collection types that is known to the <see cref="T:Cauldron.Activator.Factory"/>
            </summary>
        </member>
        <member name="M:Cauldron.Activator.Factory.AddType(System.String,Cauldron.Activator.FactoryCreationPolicy,System.Type)">
            <summary>
            Adds a new <see cref="T:System.Type"/> to list of known types.
            </summary>
            <param name="contractName">The name that identifies the type</param>
            <param name="creationPolicy">The creation policy of the type as defined by <see cref="T:Cauldron.Activator.FactoryCreationPolicy"/></param>
            <param name="type">The type to be added</param>
        </member>
        <member name="M:Cauldron.Activator.Factory.Create``1(System.Object[])">
            <summary>
            Creates an instance of the specified type depending on the <see cref="T:Cauldron.Activator.ComponentAttribute"/>
            </summary>
            <typeparam name="T">The Type that contract name derives from</typeparam>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A reference to the newly created object.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The contract described by <typeparamref name="T"/> was not found</exception>
            <exception cref="T:System.Exception">Unknown <see cref="T:Cauldron.Activator.FactoryCreationPolicy"/></exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one implementation with contractname <typeparamref name="T"/> found.</exception>
            <exception cref="T:System.NotSupportedException">An <see cref="T:System.Object"/> with <see cref="F:Cauldron.Activator.FactoryCreationPolicy.Singleton"/> with an implemented <see cref="T:System.IDisposable"/> must also implement the <see cref="T:Cauldron.Core.IDisposableObject"/> interface.</exception>
        </member>
        <member name="M:Cauldron.Activator.Factory.Create(System.String,System.Object[])">
            <summary>
            Creates an instance of the specified type depending on the <see cref="T:Cauldron.Activator.ComponentAttribute"/>
            </summary>
            <param name="contractName">The name that identifies the type</param>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A reference to the newly created object.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter <paramref name="contractName"/> is null</exception>
            <exception cref="T:System.ArgumentException">The parameter <paramref name="contractName"/> is an empty string</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The contract described by <paramref name="contractName"/> was not found</exception>
            <exception cref="T:System.Exception">Unknown <see cref="T:Cauldron.Activator.FactoryCreationPolicy"/></exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one implementation with contractname <paramref name="contractName"/> found.</exception>
            <exception cref="T:System.NotSupportedException">An <see cref="T:System.Object"/> with <see cref="F:Cauldron.Activator.FactoryCreationPolicy.Singleton"/> with an implemented <see cref="T:System.IDisposable"/> must also implement the <see cref="T:Cauldron.Core.IDisposableObject"/> interface.</exception>
        </member>
        <member name="M:Cauldron.Activator.Factory.Create(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified type depending on the <see cref="T:Cauldron.Activator.ComponentAttribute"/>
            </summary>
            <param name="contractType">The Type that contract name derives from</param>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A reference to the newly created object.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter <paramref name="contractType"/> is null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The contract described by <paramref name="contractType"/> was not found</exception>
            <exception cref="T:System.Exception">Unknown <see cref="T:Cauldron.Activator.FactoryCreationPolicy"/></exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one implementation with contractname <paramref name="contractType"/> found.</exception>
            <exception cref="T:System.NotSupportedException">An <see cref="T:System.Object"/> with <see cref="F:Cauldron.Activator.FactoryCreationPolicy.Singleton"/> with an implemented <see cref="T:System.IDisposable"/> must also implement the <see cref="T:Cauldron.Core.IDisposableObject"/> interface.</exception>
        </member>
        <member name="M:Cauldron.Activator.Factory.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified type using the constructor that best matches the specified parameters.
            This method is similar to <see cref="M:Cauldron.Core.Extensions.ExtensionsReflection.CreateInstance(System.Type,System.Object[])"/>, but this takes the types defined with <see cref="T:Cauldron.Activator.ComponentAttribute"/> into
            account. This also executes the factory extensions (<see cref="T:Cauldron.Activator.IFactoryExtension"/>).
            </summary>
            <param name="type">The type of object to create.</param>
            <param name="args">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A reference to the newly created object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null</exception>
            <exception cref="T:System.NotImplementedException">Implementation of <paramref name="type"/> not found</exception>
        </member>
        <member name="M:Cauldron.Activator.Factory.CreateMany(System.String,System.Object[])">
            <summary>
            Creates instances of the specified type depending on the <see cref="T:Cauldron.Activator.ComponentAttribute"/>
            </summary>
            <param name="contractName">The name that identifies the type</param>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A collection of the newly created objects.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter <paramref name="contractName"/> is null</exception>
            <exception cref="T:System.ArgumentException">The parameter <paramref name="contractName"/> is an empty string</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The contract described by <paramref name="contractName"/> was not found</exception>
            <exception cref="T:System.Exception">Unknown <see cref="T:Cauldron.Activator.FactoryCreationPolicy"/></exception>
            <exception cref="T:System.NotSupportedException">An <see cref="T:System.Object"/> with <see cref="F:Cauldron.Activator.FactoryCreationPolicy.Singleton"/> with an implemented <see cref="T:System.IDisposable"/> must also implement the <see cref="T:Cauldron.Core.IDisposableObject"/> interface.</exception>
        </member>
        <member name="M:Cauldron.Activator.Factory.CreateMany(System.Type,System.Object[])">
            <summary>
            Creates instances of the specified type depending on the <see cref="T:Cauldron.Activator.ComponentAttribute"/>
            </summary>
            <param name="contractType">The Type that contract name derives from</param>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A collection of the newly created objects.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter <paramref name="contractType"/> is null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The contract described by <paramref name="contractType"/> was not found</exception>
            <exception cref="T:System.Exception">Unknown <see cref="T:Cauldron.Activator.FactoryCreationPolicy"/></exception>
            <exception cref="T:System.NotSupportedException">An <see cref="T:System.Object"/> with <see cref="F:Cauldron.Activator.FactoryCreationPolicy.Singleton"/> with an implemented <see cref="T:System.IDisposable"/> must also implement the <see cref="T:Cauldron.Core.IDisposableObject"/> interface.</exception>
        </member>
        <member name="M:Cauldron.Activator.Factory.CreateMany``1(System.Object[])">
            <summary>
            Creates instances of the specified type depending on the <see cref="T:Cauldron.Activator.ComponentAttribute"/>
            </summary>
            <typeparam name="T">The Type that contract name derives from</typeparam>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A collection of the newly created objects.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The contract described by <typeparamref name="T"/> was not found</exception>
            <exception cref="T:System.Exception">Unknown <see cref="T:Cauldron.Activator.FactoryCreationPolicy"/></exception>
            <exception cref="T:System.NotSupportedException">An <see cref="T:System.Object"/> with <see cref="F:Cauldron.Activator.FactoryCreationPolicy.Singleton"/> with an implemented <see cref="T:System.IDisposable"/> must also implement the <see cref="T:Cauldron.Core.IDisposableObject"/> interface.</exception>
        </member>
        <member name="M:Cauldron.Activator.Factory.Destroy``1">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <typeparam name="T">The Type that the contract name derives from</typeparam>
        </member>
        <member name="M:Cauldron.Activator.Factory.Destroy(System.Type)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="contractType">The Type that the contract name derives from</param>
        </member>
        <member name="M:Cauldron.Activator.Factory.Destroy(System.String)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="contractName">The name that identifies the type</param>
        </member>
        <member name="M:Cauldron.Activator.Factory.Destroy">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cauldron.Activator.Factory.HasContract(System.String)">
            <summary>
            Determines whether a contract exist
            </summary>
            <param name="contractName">The name that identifies the type</param>
            <returns>True if the contract exists, otherwise false</returns>
        </member>
        <member name="M:Cauldron.Activator.Factory.HasContract(System.Type)">
            <summary>
            Determines whether a contract exist
            </summary>
            <param name="contractType">The Type that contract name derives from</param>
            <returns>True if the contract exists, otherwise false</returns>
        </member>
        <member name="M:Cauldron.Activator.Factory.IsSingleton``1">
            <summary>
            Returns a value that indicates if the contract is a singleton or not
            </summary>
            <typeparam name="T">The type that the contract name derives from</typeparam>
            <returns>Returns null if the <typeparamref name="T"/> does not exist</returns>
        </member>
        <member name="M:Cauldron.Activator.Factory.IsSingleton(System.Type)">
            <summary>
            Returns a value that indicates if the contract is a singleton or not
            </summary>
            <param name="contractType">The type that the contract name derives from</param>
            <returns>Returns null if the <paramref name="contractType"/> does not exist</returns>
            <exception cref="T:System.ArgumentNullException">The parameter <paramref name="contractType"/> is null</exception>
        </member>
        <member name="M:Cauldron.Activator.Factory.IsSingleton(System.String)">
            <summary>
            Returns a value that indicates if the contract is a singleton or not
            </summary>
            <param name="contractName">The name that identifies the type</param>
            <returns>Returns null if the <paramref name="contractName"/> does not exist</returns>
            <exception cref="T:System.ArgumentNullException">The parameter <paramref name="contractName"/> is null</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="contractName"/> is empty</exception>
        </member>
        <member name="M:Cauldron.Activator.Factory.RemoveType(System.String,System.Type)">
            <summary>
            Removes a <see cref="T:System.Type"/> from the list of known types
            </summary>
            <param name="contractName">The name that identifies the type</param>
            <param name="type">The type to be removed</param>
        </member>
        <member name="T:Cauldron.Activator.FactoryCreationPolicy">
            <summary>
            Describes the creation policy of an object through the <see cref="T:Cauldron.Activator.Factory"/>
            </summary>
        </member>
        <member name="F:Cauldron.Activator.FactoryCreationPolicy.Instanced">
            <summary>
            Always creates a new instance.
            <para/>
            Instances are not managed by the <see cref="T:Cauldron.Activator.Factory"/>.
            <para/>
            Default policy
            </summary>
        </member>
        <member name="F:Cauldron.Activator.FactoryCreationPolicy.Singleton">
            <summary>
            Only a single instance is created and reused everytime.
            <para/>
            Instances are managed by the <see cref="T:Cauldron.Activator.Factory"/>
            </summary>
        </member>
        <member name="T:Cauldron.Activator.FactoryTypeInfo">
            <summary>
            Holds data that is required by the <see cref="T:Cauldron.Activator.Factory"/> to create instances
            </summary>
        </member>
        <member name="F:Cauldron.Activator.FactoryTypeInfo.contractName">
            <summary>
            The contract name associated with the type
            </summary>
        </member>
        <member name="F:Cauldron.Activator.FactoryTypeInfo.creationPolicy">
            <summary>
            The creation policy of the type
            </summary>
        </member>
        <member name="F:Cauldron.Activator.FactoryTypeInfo.objectConstructorInfo">
            <summary>
            The constructor information used to construct the type. This value can be null if the <see cref="T:Cauldron.Activator.Factory"/> uses a method (<see cref="F:Cauldron.Activator.FactoryTypeInfo.objectConstructorMethodInfo"/>)
            to construct the type or the <see cref="T:Cauldron.Activator.Factory"/> is needs to auto-detect the constructor.
            </summary>
        </member>
        <member name="F:Cauldron.Activator.FactoryTypeInfo.objectConstructorMethodInfo">
            <summary>
            The method information of the method used to construct the type. This value can be null. If both <see cref="F:Cauldron.Activator.FactoryTypeInfo.objectConstructorInfo"/> and
            <see cref="F:Cauldron.Activator.FactoryTypeInfo.objectConstructorMethodInfo"/> is not null, then this value will be ignored.
            </summary>
        </member>
        <member name="F:Cauldron.Activator.FactoryTypeInfo.type">
            <summary>
            The type to be constructed
            </summary>
        </member>
        <member name="F:Cauldron.Activator.FactoryTypeInfo.typeInfo">
            <summary>
            THe <see cref="T:System.Reflection.TypeInfo"/> of the type
            </summary>
        </member>
        <member name="T:Cauldron.Activator.IFactoryExtension">
            <summary>
            Represents an interface for the <see cref="T:Cauldron.Activator.Factory"/> extension
            </summary>
        </member>
        <member name="P:Cauldron.Activator.IFactoryExtension.CanHandleAmbiguousMatch">
            <summary>
            Gets a value that indicates that this extension is able to resolve <see cref="T:System.Reflection.AmbiguousMatchException"/>
            </summary>
        </member>
        <member name="M:Cauldron.Activator.IFactoryExtension.CanModifyArguments(System.Reflection.MethodBase,System.Type)">
            <summary>
            Returns true if a <see cref="T:System.Type"/> can modify arguments passed to <see cref="M:Cauldron.Activator.IFactoryExtension.ModifyArgument(System.Reflection.ParameterInfo[],System.Object[])"/> with this <see cref="T:Cauldron.Activator.IFactoryExtension"/> implementation
            </summary>
            <param name="method">The defined constructor defined by <see cref="T:Cauldron.Activator.ComponentConstructorAttribute"/></param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object created</param>
            <returns>True if can be manipulated</returns>
        </member>
        <member name="M:Cauldron.Activator.IFactoryExtension.ModifyArgument(System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            Modifies the arguments defined by <paramref name="arguments"/> and returns the modified array
            </summary>
            <param name="argumentTypes">The parameter info of the constructor</param>
            <param name="arguments">The arguments used to create an object</param>
            <returns>A modified array of arguments</returns>
        </member>
        <member name="M:Cauldron.Activator.IFactoryExtension.OnCreateObject(System.Object,System.Type)">
            <summary>
            Occures when an object is created
            </summary>
            <param name="context">The object instance</param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object created</param>
        </member>
        <member name="M:Cauldron.Activator.IFactoryExtension.OnInitialize(System.Type)">
            <summary>
            Occures when <see cref="T:Cauldron.Activator.Factory"/> is initialized
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the object created</param>
        </member>
        <member name="M:Cauldron.Activator.IFactoryExtension.SelectAmbiguousMatch(System.Collections.Generic.IEnumerable{System.Type},System.String)">
            <summary>
            Occures if multiple Types with the same <paramref name="contractName"/> was found.
            <para/>
            Should return null if <paramref name="ambiguousTypes"/> collection does not contain the required <see cref="T:System.Type"/>
            </summary>
            <param name="ambiguousTypes">A collection of Types that with the same <paramref name="contractName"/></param>
            <param name="contractName">The contract name of the implementations</param>
            <returns>The selected <see cref="T:System.Type"/></returns>
        </member>
        <member name="T:Cauldron.Activator.IFactoryInitializeComponent">
            <summary>
            Represents a component with an explicit instance initializer that will be invoked by the <see cref="T:Cauldron.Activator.Factory"/> after creation
            </summary>
        </member>
        <member name="M:Cauldron.Activator.IFactoryInitializeComponent.OnInitializeComponentAsync">
            <summary>
            Occures after object creation by the <see cref="T:Cauldron.Activator.Factory"/>.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Cauldron.Activator.InjectAttribute">
            <summary>
            Specifies that the property or field contains a type that can be supplied by the <see cref="T:Cauldron.Activator.Factory"/>
            </summary>
        </member>
        <member name="M:Cauldron.Activator.InjectAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Activator.InjectAttribute"/>
            </summary>
        </member>
        <member name="M:Cauldron.Activator.InjectAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Activator.InjectAttribute"/>
            </summary>
            <param name="arguments">The The arguments that can be used to initialize the instance</param>
        </member>
        <member name="M:Cauldron.Activator.InjectAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Activator.InjectAttribute"/>
            </summary>
            <param name="contractType">The type of the contract to inject</param>
            <param name="arguments">The The arguments that can be used to initialize the instance</param>
        </member>
        <member name="M:Cauldron.Activator.InjectAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Activator.InjectAttribute"/>
            </summary>
            <param name="contractName">The name of the contract to inject</param>
            <param name="arguments">The The arguments that can be used to initialize the instance</param>
        </member>
        <member name="M:Cauldron.Activator.InjectAttribute.OnException(System.Exception)">
            <summary>
            Invoked if an intercepted method has raised an exception. The method will always rethrow the exception.
            </summary>
            <param name="e">The exception information.</param>
        </member>
        <member name="M:Cauldron.Activator.InjectAttribute.OnExit">
            <summary>
            Invoked if the intercepted method has finished executing.
            </summary>
        </member>
        <member name="M:Cauldron.Activator.InjectAttribute.OnGet(System.Threading.SemaphoreSlim,Cauldron.Interception.PropertyInterceptionInfo,System.Object)">
            <summary>
            Invoked if the intercepted property getter has been called
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> instance that can be used to lock the the method</param>
            <param name="propertyInterceptionInfo">An object that containes information about the intercepted method</param>
            <param name="value">The current value of the property</param>
        </member>
        <member name="T:Cauldron.Activator.Singleton`1">
            <summary>
            Represents a singleton implementation of <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type that is contained in the singleton</typeparam>
        </member>
        <member name="P:Cauldron.Activator.Singleton`1.Current">
            <summary>
            Gets the current instance of <typeparamref name="T"/>
            </summary>
        </member>
        <member name="M:Cauldron.Activator.Singleton`1.Free">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            <para/>
            This does not dispose the singleton object itself, only the content of <see cref="P:Cauldron.Activator.Singleton`1.Current"/>.
            </summary>
        </member>
        <member name="T:Cauldron.IEnumerableExtensions.Extensions">
            <summary>
            Provides usefull extensions for <see cref="T:System.Collections.IEnumerable"/>
            </summary>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Any_(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.IEnumerable"/> whose elements to apply the predicate to</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>True if any elements in the source sequence pass the test in the specified predicate, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Any_(System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> to check for emptiness.</param>
            <returns>True if the source sequence contains any elements, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Count_(System.Collections.IEnumerable)">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/></param>
            <returns>The total count of items in the <see cref="T:System.Collections.IEnumerable"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.ElementAt_(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the element at the defined index
            </summary>
            <param name="ienumerable">The enumerable that contains the element</param>
            <param name="index">The index of the element</param>
            <returns>The element with the specified index</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ienumerable"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Except_(System.Collections.IEnumerable,System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="items">The <see cref="T:System.Collections.IEnumerable"/> that may contain the object to remove</param>
            <param name="itemToExcept">The object to remove from the <see cref="T:System.Collections.IEnumerable"/>. The value can be null for reference types.</param>
            <returns>A new instance of the <see cref="T:System.Collections.IEnumerable"/> without the item specified by <paramref name="itemToExcept"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.FirstElement_(System.Collections.IEnumerable)">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> to return the first element of.</param>
            <returns>The first element in the specified sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.SequenceEqual_(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their types
            </summary>
            <param name="first">An <see cref="T:System.Collections.IEnumerable"/> to compare to second.</param>
            <param name="second">An <see cref="T:System.Collections.IEnumerable"/> to compare to the first sequence.</param>
            <returns>
            true if the two source sequences are of equal length and their corresponding
            elements are equal according to the default equality comparer for their type;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">first or second is null.</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.ToArray_``1(System.Collections.IEnumerable)">
            <summary>
            Converts a <see cref="T:System.Collections.IEnumerable"/> to an array
            </summary>
            <typeparam name="T">The type of elements the <see cref="T:System.Collections.IEnumerable"/> contains</typeparam>
            <param name="items">The <see cref="T:System.Collections.IEnumerable"/> to convert</param>
            <returns>An array of <typeparamref name="T"/></returns>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.ToList_``1(System.Collections.IEnumerable)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="target">The <see cref="T:System.Collections.IEnumerable"/> to create a <see cref="T:System.Collections.Generic.List`1"/> from.</param>
            <returns>A System.Collections.Generic.List`1 that contains elements from the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
    </members>
</doc>
