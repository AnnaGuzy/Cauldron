<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cauldron.XAML.Validation</name>
    </assembly>
    <members>
        <member name="T:Cauldron.Internal.Extensions">
            <summary>
            Provides usefull extensions for <see cref="T:System.Collections.IEnumerable"/>
            </summary>
        </member>
        <member name="M:Cauldron.Internal.Extensions.Any_(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.IEnumerable"/> whose elements to apply the predicate to</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>True if any elements in the source sequence pass the test in the specified predicate, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.Internal.Extensions.Any_(System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> to check for emptiness.</param>
            <returns>True if the source sequence contains any elements, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.Internal.Extensions.Count_(System.Collections.IEnumerable)">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/></param>
            <returns>The total count of items in the <see cref="T:System.Collections.IEnumerable"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.Internal.Extensions.ElementAt_(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the element at the defined index
            </summary>
            <param name="ienumerable">The enumerable that contains the element</param>
            <param name="index">The index of the element</param>
            <returns>The element with the specified index</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ienumerable"/> is null</exception>
        </member>
        <member name="M:Cauldron.Internal.Extensions.Except_(System.Collections.IEnumerable,System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="items">The <see cref="T:System.Collections.IEnumerable"/> that may contain the object to remove</param>
            <param name="itemToExcept">The object to remove from the <see cref="T:System.Collections.IEnumerable"/>. The value can be null for reference types.</param>
            <returns>A new instance of the <see cref="T:System.Collections.IEnumerable"/> without the item specified by <paramref name="itemToExcept"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is null</exception>
        </member>
        <member name="M:Cauldron.Internal.Extensions.FirstElement_(System.Collections.IEnumerable)">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> to return the first element of.</param>
            <returns>The first element in the specified sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.Internal.Extensions.SequenceEqual_(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their types
            </summary>
            <param name="first">An <see cref="T:System.Collections.IEnumerable"/> to compare to second.</param>
            <param name="second">An <see cref="T:System.Collections.IEnumerable"/> to compare to the first sequence.</param>
            <returns>
            true if the two source sequences are of equal length and their corresponding
            elements are equal according to the default equality comparer for their type;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">first or second is null.</exception>
        </member>
        <member name="M:Cauldron.Internal.Extensions.ToArray_``1(System.Collections.IEnumerable)">
            <summary>
            Converts a <see cref="T:System.Collections.IEnumerable"/> to an array
            </summary>
            <typeparam name="T">The type of elements the <see cref="T:System.Collections.IEnumerable"/> contains</typeparam>
            <param name="items">The <see cref="T:System.Collections.IEnumerable"/> to convert</param>
            <returns>An array of <typeparamref name="T"/></returns>
        </member>
        <member name="M:Cauldron.Internal.Extensions.ToList_``1(System.Collections.IEnumerable)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="target">The <see cref="T:System.Collections.IEnumerable"/> to create a <see cref="T:System.Collections.Generic.List`1"/> from.</param>
            <returns>A System.Collections.Generic.List`1 that contains elements from the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
        <member name="T:Cauldron.XAML.Validation.EqualityAttribute">
            <summary>
            Validates if two properties are equal in value
            <para/>
            Causes a validation error if the values of both properties are not equal
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.EqualityAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.EqualityAttribute"/>
            </summary>
            <param name="otherProperty">The property name of the property this property has to be equal to</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.EqualityAttribute.OnValidate(System.Reflection.PropertyInfo,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Invokes the validation on the specified context with the specified parameters
            </summary>
            <param name="sender">The property that invoked the validation</param>
            <param name="context">The viewmodel context that has to be validated</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> of the validated property</param>
            <param name="value">The value of the property</param>
            <returns>Has to return true on validation error otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.EqualityAttribute.ValidationMessage(System.String,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel)">
            <summary>
            Occures on validation
            <para/>
            Can be used to modify the validation error message.
            </summary>
            <param name="errorMessage">The validtion error message</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <returns>A modified validation error message</returns>
        </member>
        <member name="T:Cauldron.XAML.Validation.GreaterThanAttribute">
            <summary>
            Validates the property if value is greater than the given value or the given property
            </summary>
            <exception cref="T:System.ArgumentException">The property was not found</exception>
        </member>
        <member name="M:Cauldron.XAML.Validation.GreaterThanAttribute.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.GreaterThanAttribute"/>
            </summary>
            <param name="value">The value to compare to</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.GreaterThanAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.GreaterThanAttribute"/>
            </summary>
            <param name="propertyName">The name of the property to validate against</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null</exception>
        </member>
        <member name="M:Cauldron.XAML.Validation.GreaterThanAttribute.OnValidate(System.Reflection.PropertyInfo,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Invokes the validation on the specified context with the specified parameters
            </summary>
            <param name="sender">The property that invoked the validation</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> of the validated property</param>
            <param name="value">The value of the property</param>
            <returns>Has to return true on validation error otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.GreaterThanAttribute.ValidationMessage(System.String,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel)">
            <summary>
            Occures on validation
            <para/>
            Can be used to modify the validation error message.
            </summary>
            <param name="errorMessage">The validation error message</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <returns>A modified validation error message</returns>
        </member>
        <member name="T:Cauldron.XAML.Validation.GreaterThanOrEqualAttribute">
            <summary>
            Validates the property if value is greater than or equal the given value or the given property
            </summary>
            <exception cref="T:System.ArgumentException">The property was not found</exception>
        </member>
        <member name="M:Cauldron.XAML.Validation.GreaterThanOrEqualAttribute.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.GreaterThanOrEqualAttribute"/>
            </summary>
            <param name="value">The value to compare to</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.GreaterThanOrEqualAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.GreaterThanOrEqualAttribute"/>
            </summary>
            <param name="propertyName">The name of the property to validate against</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null</exception>
        </member>
        <member name="M:Cauldron.XAML.Validation.GreaterThanOrEqualAttribute.OnValidate(System.Reflection.PropertyInfo,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Invokes the validation on the specified context with the specified parameters
            </summary>
            <param name="sender">The property that invoked the validation</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> of the validated property</param>
            <param name="value">The value of the property</param>
            <returns>Has to return true on validation error otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.GreaterThanOrEqualAttribute.ValidationMessage(System.String,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel)">
            <summary>
            Occures on validation
            <para/>
            Can be used to modify the validation error message.
            </summary>
            <param name="errorMessage">The validation error message</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <returns>A modified validation error message</returns>
        </member>
        <member name="T:Cauldron.XAML.Validation.InEqualityAttribute">
            <summary>
            Validates if two properties are not equal in value
            <para/>
            Causes a validation error if the values of both properties are equal
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.InEqualityAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.InEqualityAttribute"/>
            </summary>
            <param name="otherProperty">The property name of the property this property has to be unequal to</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.InEqualityAttribute.OnValidate(System.Reflection.PropertyInfo,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Invokes the validation on the specified context with the specified parameters
            </summary>
            <param name="sender">The property that invoked the validation</param>
            <param name="context">The viewmodel context that has to be validated</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> of the validated property</param>
            <param name="value">The value of the property</param>
            <returns>Has to return true on validation error otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.InEqualityAttribute.ValidationMessage(System.String,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel)">
            <summary>
            Occures on validation
            <para/>
            Can be used to modify the validation error message.
            </summary>
            <param name="errorMessage">The validation error message</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <returns>A modified validation error message</returns>
        </member>
        <member name="T:Cauldron.XAML.Validation.IsMandatoryAttribute">
            <summary>
            Validates a property for mandatory value.
            <para/>
            Value is null or empty will cause a validation error
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.IsMandatoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.IsMandatoryAttribute"/>
            </summary>
            <param name="errorMessageKey">The key of the localized error message string</param>
        </member>
        <member name="P:Cauldron.XAML.Validation.IsMandatoryAttribute.AlwaysValidate">
            <summary>
            Gets a value that if true indicates that this validator will be invoked everytime the property has changed
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.IsMandatoryAttribute.OnValidate(System.Reflection.PropertyInfo,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Invokes the validation on the specified context with the specified parameters
            </summary>
            <param name="sender">The property that invoked the validation</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> of the validated property</param>
            <param name="value">The value of the property</param>
            <returns>Has to return true on validation error otherwise false</returns>
        </member>
        <member name="T:Cauldron.XAML.Validation.LessThanAttribute">
            <summary>
            Validates the property if value is less than the given value or the given property
            </summary>
            <exception cref="T:System.ArgumentException">The property was not found</exception>
        </member>
        <member name="M:Cauldron.XAML.Validation.LessThanAttribute.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.LessThanAttribute"/>
            </summary>
            <param name="value">The value to compare to</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.LessThanAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.LessThanAttribute"/>
            </summary>
            <param name="propertyName">The name of the property to validate against</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null</exception>
        </member>
        <member name="M:Cauldron.XAML.Validation.LessThanAttribute.OnValidate(System.Reflection.PropertyInfo,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Invokes the validation on the specified context with the specified parameters
            </summary>
            <param name="sender">The property that invoked the validation</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> of the validated property</param>
            <param name="value">The value of the property</param>
            <returns>Has to return true on validation error otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.LessThanAttribute.ValidationMessage(System.String,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel)">
            <summary>
            Occures on validation
            <para/>
            Can be used to modify the validation error message.
            </summary>
            <param name="errorMessage">The validation error message</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <returns>A modified validation error message</returns>
        </member>
        <member name="T:Cauldron.XAML.Validation.LessThanOrEqualAttribute">
            <summary>
            Validates the property if value is less than or equal the given value or the given property
            </summary>
            <exception cref="T:System.ArgumentException">The property was not found</exception>
        </member>
        <member name="M:Cauldron.XAML.Validation.LessThanOrEqualAttribute.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.LessThanOrEqualAttribute"/>
            </summary>
            <param name="value">The value to compare to</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.LessThanOrEqualAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.LessThanOrEqualAttribute"/>
            </summary>
            <param name="propertyName">The name of the property to validate against</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null</exception>
        </member>
        <member name="M:Cauldron.XAML.Validation.LessThanOrEqualAttribute.OnValidate(System.Reflection.PropertyInfo,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Invokes the validation on the specified context with the specified parameters
            </summary>
            <param name="sender">The property that invoked the validation</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> of the validated property</param>
            <param name="value">The value of the property</param>
            <returns>Has to return true on validation error otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.LessThanOrEqualAttribute.ValidationMessage(System.String,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel)">
            <summary>
            Occures on validation
            <para/>
            Can be used to modify the validation error message.
            </summary>
            <param name="errorMessage">The validation error message</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <returns>A modified validation error message</returns>
        </member>
        <member name="T:Cauldron.XAML.Validation.PasswordStrengthAttribute">
            <summary>
            Validates the password strength the property.
            <para/>
            <see cref="F:Cauldron.Cryptography.PasswordScore.Blank"/>, <see cref="F:Cauldron.Cryptography.PasswordScore.VeryWeak"/> and <see cref="F:Cauldron.Cryptography.PasswordScore.Weak"/> will cause a validation error
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.PasswordStrengthAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.PasswordStrengthAttribute"/>
            </summary>
            <param name="errorMessageKey">The key of the localized error message string</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.PasswordStrengthAttribute.OnValidate(System.Reflection.PropertyInfo,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Invokes the validation on the specified context with the specified parameters
            </summary>
            <param name="sender">The property that invoked the validation</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> of the validated property</param>
            <param name="value">The value of the property</param>
            <returns>Has to return true on validation error otherwise false</returns>
        </member>
        <member name="T:Cauldron.XAML.Validation.StringLengthAttribute">
            <summary>
            Validates a property for the string length.
            <para/>
            A <see cref="T:System.String"/> that is shorter or longer than the specified length will cause a validation error
            </summary>
            <exception cref="T:System.ArgumentException">If the property is applied to a type that is not a string</exception>
        </member>
        <member name="M:Cauldron.XAML.Validation.StringLengthAttribute.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.StringLengthAttribute"/>
            </summary>
            <param name="minLength">The minimum length the string should have</param>
            <param name="maxLength">The maximum length the string should have</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.StringLengthAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.StringLengthAttribute"/>
            </summary>
            <param name="length">The length the string should have</param>
            <param name="errorMessageKey">The key of the localized error message string</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.StringLengthAttribute.OnValidate(System.Reflection.PropertyInfo,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Invokes the validation on the specified context with the specified parameters
            </summary>
            <param name="sender">The property that invoked the validation</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> of the validated property</param>
            <param name="value">The value of the property</param>
            <returns>Has to return true on validation error otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.StringLengthAttribute.ValidationMessage(System.String,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel)">
            <summary>
            Occures on validation
            <para/>
            Can be used to modify the validation error message.
            </summary>
            <param name="errorMessage">The validation error message</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <returns>A modified validation error message</returns>
        </member>
        <member name="T:Cauldron.XAML.Validation.ValidationBaseAttribute">
            <summary>
            Specifies the validation method for a property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.ValidationBaseAttribute"/>
            </summary>
            <param name="errorMessageKey">The key of the localized error message string</param>
        </member>
        <member name="P:Cauldron.XAML.Validation.ValidationBaseAttribute.AlwaysValidate">
            <summary>
            Gets a value that if true indicates that this validator will be invoked everytime the property has changed
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Validation.ValidationBaseAttribute.ErrorMessageKey">
            <summary>
            Gets or sets the key of the localized error message string
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationBaseAttribute.Validate(System.Reflection.PropertyInfo,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel)">
            <summary>
            Invokes the validation on the specified context with the specified parameters
            </summary>
            <param name="sender">The property that invoked the validation</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <returns>Returns the error message if validation fails. Empty if successful</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationBaseAttribute.OnValidate(System.Reflection.PropertyInfo,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Invokes the validation on the specified context with the specified parameters
            </summary>
            <param name="sender">The property that invoked the validation</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> of the validated property</param>
            <param name="value">The value of the property</param>
            <returns>Has to return true on validation error otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationBaseAttribute.ValidationMessage(System.String,Cauldron.XAML.Validation.ViewModels.IValidatableViewModel)">
            <summary>
            Occures on validation
            <para/>
            Can be used to modify the validation error message.
            </summary>
            <param name="errorMessage">The validation error message</param>
            <param name="context">The Viewmodel context that has to be validated</param>
            <returns>A modified validation error message</returns>
        </member>
        <member name="T:Cauldron.XAML.Validation.ValidationBehaviour">
            <summary>
            Provides supporting functionalities for the validation
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationBehaviour.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationBehaviour.OnAttach">
            <summary>
            Occures when the behavior is attached to the object
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationBehaviour.OnDataContextChanged">
            <summary>
            Occures if the <see cref="P:Windows.UI.Xaml.FrameworkElement.DataContext"/> of <see cref="P:Cauldron.XAML.Interactivity.Behaviour`1.AssociatedObject"/> has changed
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationBehaviour.OnDetach">
            <summary>
            Occures when the behaviour is detached from the object
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Validation.ValidationEventArgs">
            <summary>
            Provides data for the <see cref="E:Cauldron.XAML.Validation.ValidationHandler.Validation"/> event.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.XAML.Validation.ValidationEventArgs"/> class
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.XAML.Validation.ValidationEventArgs"/> class
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Validation.ValidationEventArgs.PropertyName">
            <summary>
            Gets the property name of the property that need to be validated.
            <para/>
            The value is empty if a properties are validated
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Validation.ValidationHandler">
            <summary>
            Handles validation of a viewmodel
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationHandler.#ctor(Cauldron.XAML.Validation.ViewModels.IValidatableViewModel)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.ValidationHandler"/> class
            </summary>
            <param name="context">The viewmodel that contains the properties that requires validation</param>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="context"/> is null</exception>
        </member>
        <member name="E:Cauldron.XAML.Validation.ValidationHandler.ErrorsChanged">
            <summary>
            Occures if the count of the errors has changed
            </summary>
        </member>
        <member name="E:Cauldron.XAML.Validation.ValidationHandler.Validation">
            <summary>
            Occures on validation
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Validation.ValidationHandler.Errors">
            <summary>
            Gets or sets the error info strings
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Validation.ValidationHandler.HasErrors">
            <summary>
            Gets a value that indicates if the ViewModel has errors after validation
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationHandler.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property or for the entire entity.
            </summary>
            <param name="propertyName">The name of the property to retrieve validation errors for; or null or Empty, to retrieve entity-level errors.</param>
            <returns>The validation errors for the property or entity.</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationHandler.Validate(System.String)">
            <summary>
            Starts a validation on all properties
            </summary>
            <param name="propertyName">The name of the property that requires validation</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationHandler.Validate(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Starts a validation on all properties
            </summary>
            <param name="sender">The property info of the property that requested a validation</param>
            <param name="propertyName">The name of the property that requires validation</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationHandler.Validate">
            <summary>
            Starts a validation on all properties
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationHandler.OnDispose(System.Boolean)">
            <summary>
            Occures after <see cref="M:System.IDisposable.Dispose"/> has been invoked
            </summary>
            <param name="disposeManaged">true if managed resources requires disposing</param>
        </member>
        <member name="T:Cauldron.XAML.Validation.ValidationProperties">
            <summary>
            Provides an attached property required for the validation
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Validation.ValidationProperties.IsDisabledByErrorInPropertyNameProperty">
            <summary>
            Identifies the IsDisabledByErrorInPropertyName dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationProperties.GetIsDisabledByErrorInPropertyName(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of IsDisabledByErrorInPropertyName
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationProperties.SetIsDisabledByErrorInPropertyName(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the value of the IsDisabledByErrorInPropertyName attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="F:Cauldron.XAML.Validation.ValidationProperties.IsMandatoryProperty">
            <summary>
            Identifies the <see cref="F:Cauldron.XAML.Validation.ValidationProperties.IsMandatoryProperty" /> dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationProperties.GetIsMandatory(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of <see cref="F:Cauldron.XAML.Validation.ValidationProperties.IsMandatoryProperty" />
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationProperties.SetIsMandatory(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="F:Cauldron.XAML.Validation.ValidationProperties.IsMandatoryProperty" /> attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="F:Cauldron.XAML.Validation.ValidationProperties.ErrorsProperty">
            <summary>
            Identifies the Errors dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationProperties.GetErrors(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of Errors
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationProperties.SetErrors(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the value of the Errors attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="F:Cauldron.XAML.Validation.ValidationProperties.HasErrorsProperty">
            <summary>
            Identifies the HasErrors dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationProperties.GetHasErrors(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of HasErrors
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.ValidationProperties.SetHasErrors(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the HasErrors attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="T:Cauldron.XAML.Validation.ViewModels.IValidatableViewModel">
            <summary>
            Represents a viewmodel that is able to validate property values
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.IValidatableViewModel.Validate">
            <summary>
            Starts a validation on all properties
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.IValidatableViewModel.Validate(System.String)">
            <summary>
            Starts a validation on all properties
            </summary>
            <param name="propertyName">The name of the property that requires validation</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.IValidatableViewModel.Validate(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Starts a validation on all properties
            </summary>
            <param name="sender">The property info of the property that requested a validation</param>
            <param name="propertyName">The name of the property that requires validation</param>
        </member>
        <member name="T:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase">
            <summary>
            Represents a base class with an implemented validation
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase"/>
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase"/>
            </summary>
            <param name="id">A unique identifier of the viewmodel</param>
        </member>
        <member name="E:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.ErrorsChanged">
            <summary>
            Occures if the count of the errors has changed
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.Errors">
            <summary>
            Gets or sets the error info strings
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.HasErrors">
            <summary>
            Gets a value that indicates if the ViewModel has errors after validation
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property or for the entire entity.
            </summary>
            <param name="propertyName">The name of the property to retrieve validation errors for; or null or Empty, to retrieve entity-level errors.</param>
            <returns>The validation errors for the property or entity.</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.Validate">
            <summary>
            Starts a validation on all properties
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.Validate(System.String)">
            <summary>
            Starts a validation on a single properties
            </summary>
            <param name="propertyName">The name of the property that requires validation</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.Validate(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Starts a validation on all properties
            </summary>
            <param name="sender">The property info of the property that requested a validation</param>
            <param name="propertyName">The name of the property that requires validation</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.BeforeRaiseNotifyPropertyChanged(System.String)">
            <summary>
            Occured before the <see cref="E:Cauldron.XAML.ViewModels.ViewModelBase.PropertyChanged"/> event is invoked.
            </summary>
            <param name="propertyName">The name of the property where the value change has occured</param>
            <returns>Returns true if <see cref="M:Cauldron.XAML.ViewModels.ViewModelBase.RaisePropertyChanged(System.String)"/> should be cancelled. Otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.OnDispose(System.Boolean)">
            <summary>
            Occures after <see cref="M:System.IDisposable.Dispose"/> has been invoked
            </summary>
            <param name="disposeManaged">true if managed resources requires disposing</param>
        </member>
        <member name="M:Cauldron.XAML.Validation.ViewModels.ValidatableViewModelBase.OnValidation(System.String)">
            <summary>
            Occures on validation
            </summary>
            <param name="propertyName">The property name that is going to be validated</param>
        </member>
    </members>
</doc>
