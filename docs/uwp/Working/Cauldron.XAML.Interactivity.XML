<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cauldron.XAML.Interactivity</name>
    </assembly>
    <members>
        <member name="T:Cauldron.XAML.Interactivity.Attached.CustomCursor">
            <summary>
            An attach property that can assign a cursor to a <see cref="T:Windows.UI.Xaml.FrameworkElement"/>
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Attached.CustomCursor.ResourceIndexProperty">
            <summary>
            Identifies the ResourceIndex dependency property
            <para/>
            See https://blogs.msdn.microsoft.com/devfish/2012/08/01/customcursors-in-windows-8-csharp-metro-applications/ for more information about custom cursors in UWP.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.CustomCursor.GetResourceIndex(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of ResourceIndex
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.CustomCursor.SetResourceIndex(Windows.UI.Xaml.DependencyObject,System.UInt32)">
            <summary>
            Sets the value of the ResourceIndex attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Attached.CustomCursor.ResourceKeyProperty">
            <summary>
            Identifies the ResourceKey dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.CustomCursor.GetResourceKey(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of ResourceKey
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.CustomCursor.SetResourceKey(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the value of the ResourceKey attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.Attached.HyperlinkProperties">
            <summary>
            Provides Attached Properties to <see cref="T:Windows.UI.Xaml.Documents.Hyperlink"/> that has the <see cref="P:Windows.System.LauncherOptions.TreatAsUntrusted"/> property set to false
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Attached.HyperlinkProperties.NavigateUriProperty">
            <summary>
            Identifies the NavigateUri dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.HyperlinkProperties.GetNavigateUri(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of NavigateUri
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.HyperlinkProperties.SetNavigateUri(Windows.UI.Xaml.DependencyObject,System.Uri)">
            <summary>
            Sets the value of the NavigateUri attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.Attached.ButtonProperties">
            <summary>
            Provides attached properties for the <see cref="T:Windows.UI.Xaml.Controls.Button"/> control
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Attached.ButtonProperties.TextProperty">
            <summary>
            Identifies the Text dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.ButtonProperties.GetText(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of Text
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.ButtonProperties.SetText(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the value of the Text attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Attached.ButtonProperties.ImageKeyProperty">
            <summary>
            Identifies the ImageKey dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.ButtonProperties.GetImageKey(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of ImageKey
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.ButtonProperties.SetImageKey(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the value of the ImageKey attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.Attached.ImageProperties">
            <summary>
            Provides attached properties for the <see cref="T:Windows.UI.Xaml.Controls.Image"/> control
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Attached.ImageProperties.AnimateOpacityProperty">
            <summary>
            Identifies the AnimateOpacity dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.ImageProperties.GetAnimateOpacity(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of AnimateOpacity
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.ImageProperties.SetAnimateOpacity(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the AnimateOpacity attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Attached.ImageProperties.ImageKeyProperty">
            <summary>
            Identifies the ImageKey dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.ImageProperties.GetImageKey(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of ImageKey
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.ImageProperties.SetImageKey(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the value of the ImageKey attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.Attached.Localized">
            <summary>
            Provides Attached Properties to enable localization in controls.
            <para/>
            Existing text are overridden.
            <para />
            Supported controls: <see cref="!:FrameworkElement.ToolTip"/> <see cref="P:Windows.UI.Xaml.Controls.TextBlock.Text"/>, <see cref="P:Windows.UI.Xaml.Controls.ContentControl.Content"/>
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Attached.Localized.TextProperty">
            <summary>
            Identifies the Text dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.Localized.GetText(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of Text
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.Localized.SetText(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the value of the Text attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Attached.Localized.TooltipProperty">
            <summary>
            Identifies the <see cref="F:Cauldron.XAML.Interactivity.Attached.Localized.TooltipProperty" /> dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.Localized.GetTooltip(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of <see cref="F:Cauldron.XAML.Interactivity.Attached.Localized.TooltipProperty" />
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.Localized.SetTooltip(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the value of the <see cref="F:Cauldron.XAML.Interactivity.Attached.Localized.TooltipProperty" /> attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.Attached.TextBlockProperties">
            <summary>
            Provides attached properties for the <see cref="T:Windows.UI.Xaml.Controls.Button"/> control
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Attached.TextBlockProperties.InlineProperty">
            <summary>
            Identifies the Inline dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.TextBlockProperties.GetInline(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of Inline
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attached.TextBlockProperties.SetInline(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the value of the Inline attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Resources.DummyResources.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Resources.DummyResources.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.TextBoxOnTextChanged.TextProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.TextBoxOnTextChanged.Text" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.TextBoxOnTextChanged.Text">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.TextBoxOnTextChanged.Text" /> Property
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.Actions.ActionBase">
            <summary>
            Represents a base class for action behaviours
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Actions.ActionBase.Invoke(System.Object)">
            <summary>
            Occures when the action is invoked by an event
            </summary>
            <param name="parameter">The parameter passed by the event</param>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.Actions.ActionCollection">
            <summary>
            Represents a collection of <see cref="T:Cauldron.XAML.Interactivity.Actions.ActionBase"/>
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction">
            <summary>
            Represents an action, that can invoke a method (also with parameters) residing on the the <see cref="P:Cauldron.XAML.Interactivity.Behaviour`1.AssociatedObject"/> or in the control defined by <see cref="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodOwnerType"/>.
            The method parameters must be properties of the <see cref="P:Cauldron.XAML.Interactivity.Behaviour`1.AssociatedObject"/> or it's templatedparent (Not available in UWP)
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodParametersProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodParameters" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodParameters">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodParameters" /> Property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodNameProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodName" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodName">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodName" /> Property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodOwnerTypeProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodOwnerType" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodOwnerType">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.MethodOwnerType" /> Property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.ParametersFromTemplatedParentProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.ParametersFromTemplatedParent" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.ParametersFromTemplatedParent">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.ParametersFromTemplatedParent" /> Property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.PriorityLowProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.PriorityLow" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.PriorityLow">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.PriorityLow" /> Property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.Invoke(System.Object)">
            <summary>
            Occures when the action is invoked by an event
            </summary>
            <param name="parameter">The parameter passed by the event</param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.OnAttach">
            <summary>
            Occures when the behavior is attached to the object
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Actions.InvokeMethodAction.OnDetach">
            <summary>
            Occures when the behaviour is detached from the object
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.Attributes.BehaviourUsageAttribute">
            <summary>
            Specifies that a behaviour can only be applied once
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attributes.BehaviourUsageAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Interactivity.Attributes.BehaviourUsageAttribute"/>
            </summary>
            <param name="allowMultiple">Disallows multiple application of behavior on the same instance</param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Attributes.BehaviourUsageAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Interactivity.Attributes.BehaviourUsageAttribute"/>
            <para/>
            The <see cref="P:Cauldron.XAML.Interactivity.Attributes.BehaviourUsageAttribute.AllowMultiple"/> property is true
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.Attributes.BehaviourUsageAttribute.AllowMultiple">
            <summary>
            Gets a value that indicates if a behaviour can be applied once or multiple times
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.Behaviour`1">
            <summary>
            A base class for behaviours
            </summary>
            <typeparam name="T">The control type the behaviour can be attached to</typeparam>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Behaviour`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Interactivity.Behaviour`1"/>
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.Behaviour`1.AssociatedObject">
            <summary>
            Gets the associated object instance of <typeparamref name="T"/>
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.Behaviour`1.IsAssignedFromTemplate">
            <summary>
            Gets a value that indicates if the behaviour was assigned from template
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Behaviour`1.OnAttach">
            <summary>
            Occures when the behavior is attached to the object
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Behaviour`1.OnCopy(Cauldron.XAML.Interactivity.IBehaviour)">
            <summary>
            Occures after shallow copying the behavior
            </summary>
            <param name="behaviour">The resulting behavior from <see cref="M:Cauldron.XAML.Interactivity.IBehaviour.Copy"/></param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Behaviour`1.OnDataContextChanged">
            <summary>
            Occures if the <see cref="P:Windows.UI.Xaml.FrameworkElement.DataContext"/> of <see cref="P:Cauldron.XAML.Interactivity.Behaviour`1.AssociatedObject"/> has changed
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Behaviour`1.OnDataContextPropertyChanged(System.String)">
            <summary>
            Occures if the <see cref="P:Windows.UI.Xaml.FrameworkElement.DataContext"/> has invoked the <see cref="!:INotifyPropertyChanged.PropertyChanged"/> event
            </summary>
            <param name="propertyName">The name of the property that has changed</param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Behaviour`1.OnDetach">
            <summary>
            Occures when the behaviour is detached from the object
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.BehaviourCollection">
            <summary>
            Represents a collection of <see cref="T:Cauldron.XAML.Interactivity.IBehaviour"/>
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.BehaviourCollection`1">
            <summary>
            Represents a collection of <see cref="T:Cauldron.XAML.Interactivity.IBehaviour"/>
            </summary>
            <typeparam name="T">The type of <see cref="T:Cauldron.XAML.Interactivity.IBehaviour"/> implementations in the collection</typeparam>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.BehaviourCollection`1.RemoveAllTemplateAssignedBehaviours">
            <summary>
            Removes all behaviours that was assigned by a template
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.BehaviourCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.The value can be null for reference types.</param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.BehaviourCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection`1"/>
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.BehaviourInvocation.BehaviourInvokeAwareBehaviourBase`1">
            <summary>
            A base class for behaviour invoke aware behaviours
            </summary>
            <typeparam name="T">The control type the behaviour can be attached to</typeparam>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.BehaviourInvocation.BehaviourInvokeAwareBehaviourBase`1.MethodName">
            <summary>
            Gets or sets the method name
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.BehaviourInvocation.BehaviourInvokeAwareBehaviourBase`1.Invoke">
            <summary>
            Occures if the behaviour is requested to invoke
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.BehaviourInvocation.BehaviourInvokeAwareBehaviourBase`1.OnDataContextChanged">
            <summary>
            Occures if the <see cref="P:Windows.UI.Xaml.FrameworkElement.DataContext"/> of <see cref="P:Cauldron.XAML.Interactivity.Behaviour`1.AssociatedObject"/> has changed
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.BehaviourInvocation.BehaviourInvokeAwareBehaviourBase`1.OnDetach">
            <summary>
            Occures when the behaviour is detached from the object
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.BehaviourInvocation.InvocationTrigger">
            <summary>
            Provides a Behaviour that can invoke <see cref="T:Cauldron.XAML.Interactivity.Actions.ActionBase"/> behaviours using invoke awareness event
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.BehaviourInvocation.InvocationTrigger.Actions">
            <summary>
            Gets a collection of actions that can be invoked by this behaviour
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.BehaviourInvocation.InvocationTrigger.Invoke">
            <summary>
            Occures if the behaviour is requested to invoke
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.BehaviourInvocation.InvocationTrigger.OnAttach">
            <summary>
            Occures when the behavior is attached to the object
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.BehaviourInvocation.InvocationTrigger.OnCopy(Cauldron.XAML.Interactivity.IBehaviour)">
            <summary>
            Occures after shallow copying the behavior
            </summary>
            <param name="behaviour">The resulting behavior from <see cref="M:Cauldron.XAML.Interactivity.IBehaviour.Copy"/></param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.BehaviourInvocation.InvocationTrigger.OnDetach">
            <summary>
            Occures when the behaviour is detached from the object
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.EnterKeyToCommand">
            <summary>
            Provides a behaviour that can invoke a command when the Enter key is pressed
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.EnterKeyToCommand.MyPropertyProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.EnterKeyToCommand.Command" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.EnterKeyToCommand.Command">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.EnterKeyToCommand.Command" /> Property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.EnterKeyToCommand.OnAttach">
            <summary>
            Occures when the behavior is attached to the object
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.EnterKeyToCommand.OnDetach">
            <summary>
            Occures when the behaviour is detached from the object
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.EventToCommand">
            <summary>
            Provides a behaviour that can handle events and invokes a binded command
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.EventToCommand.CommandProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.EventToCommand.Command" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.EventToCommand.Command">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.EventToCommand.Command" /> Property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.EventToCommand.EventNameProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.EventToCommand.EventName" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.EventToCommand.EventName">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.EventToCommand.EventName" /> Property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.EventToCommand.ArgumentConverterProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.EventToCommand.ArgumentConverter" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.EventToCommand.ArgumentConverter">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.EventToCommand.ArgumentConverter" /> Property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.EventToCommand.OnAttach">
            <summary>
            Occures when the behavior is attached to the object
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.EventToCommand.OnDetach">
            <summary>
            Occures when the behaviour is detached from the object
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.EventTrigger">
            <summary>
            Provides a Behaviour that can invoke <see cref="T:Cauldron.XAML.Interactivity.Actions.ActionBase"/> behaviours.
            <para/>
            The <see cref="T:Cauldron.XAML.Interactivity.EventTrigger"/> is triggered by an event of the associated <see cref="T:Windows.UI.Xaml.FrameworkElement"/>
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.EventTrigger.EventNameProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.EventTrigger.EventName" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.EventTrigger.EventName">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.EventTrigger.EventName" /> Property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.EventTrigger.Actions">
            <summary>
            Gets a collection of actions that can be invoked by this behaviour
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.EventTrigger.OnAttach">
            <summary>
            Occures when the behavior is attached to the object
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.EventTrigger.OnCopy(Cauldron.XAML.Interactivity.IBehaviour)">
            <summary>
            Occures after shallow copying the behavior
            </summary>
            <param name="behaviour">The resulting behavior from <see cref="M:Cauldron.XAML.Interactivity.IBehaviour.Copy"/></param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.EventTrigger.OnDetach">
            <summary>
            Occures when the behaviour is detached from the object
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.IBehaviour">
            <summary>
            Represents a behaviour
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.IBehaviour.AssociatedObject">
            <summary>
            Gets the <see cref="!:DependencyObject"/> to which the behavior is attached.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.IBehaviour.IsAssignedFromTemplate">
            <summary>
            Gets a value that indicates the behaviour was assigned from a template
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.IBehaviour.Name">
            <summary>
            Gets or sets a name of the behaviour
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.IBehaviour.Attach">
            <summary>
            Attaches a behaviour to a <see cref="!:DependencyObject"/>
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.IBehaviour.Copy">
            <summary>
            Creates a shallow copy of the instance
            </summary>
            <returns>A copy of the behaviour</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.IBehaviour.DataContextChanged(System.Object)">
            <summary>
            Occures if the data context of the <see cref="P:Cauldron.XAML.Interactivity.IBehaviour.AssociatedObject"/> has changed.
            This is only valid if <see cref="P:Cauldron.XAML.Interactivity.IBehaviour.AssociatedObject"/> is a <see cref="!:FrameworkElement"/>.
            </summary>
            <param name="newDataContext">The new datacontext to assign to</param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.IBehaviour.DataContextPropertyChanged(System.String)">
            <summary>
            Occurs when a property value changes of the <see cref="P:Cauldron.XAML.Interactivity.IBehaviour.AssociatedObject"/>.DataContext.
            This is only valid if <see cref="P:Cauldron.XAML.Interactivity.IBehaviour.AssociatedObject"/> is a <see cref="!:FrameworkElement"/>.
            </summary>
            <param name="name">The name of the property that has changed</param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.IBehaviour.Detach">
            <summary>
            Detaches a behviour from a <see cref="!:DependencyObject"/>
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.Interaction">
            <summary>
            Defines a <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection"/> attached property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.Interaction.BehavioursProperty">
            <summary>
            Gets or sets the <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection"/> associated with a specified object.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Interaction.GetBehaviour``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Get a behaviours in the <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection"/> associated with the specified object
            </summary>
            <typeparam name="T">The type of the behaviour</typeparam>
            <param name="dependencyObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> from which to retrieve the <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection"/>.</param>
            <returns>An array of behaviours</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Interaction.GetBehaviours(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection"/> associated with a specified object.
            </summary>
            <param name="dependencyObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> from which to retrieve the <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection"/>.</param>
            <returns>A <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection"/> containing the behaviors associated with the specified object.</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Interaction.SetBehaviours(Windows.UI.Xaml.DependencyObject,Cauldron.XAML.Interactivity.BehaviourCollection)">
            <summary>
            Sets the <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection"/> associated with a specified object.
            </summary>
            <param name="dependencyObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> on which to set the <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection"/>.</param>
            <param name="value">The <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection"/> associated with the object.</param>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="dependencyObject"/> is null</exception>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Interaction.AddBehaviour(Windows.UI.Xaml.DependencyObject,Cauldron.XAML.Interactivity.IBehaviour)">
            <summary>
            Adds a new behaviour to the <see cref="T:Cauldron.XAML.Interactivity.BehaviourCollection"/>
            </summary>
            <param name="dependencyObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> to which to add to</param>
            <param name="behaviour">The behaviour to add</param>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.InteractionTemplate">
            <summary>
            Represents a collection of <see cref="T:Cauldron.XAML.Interactivity.IBehaviour"/>
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.PasswordBoxBinding">
            <summary>
            Provides a behaviour that enables binding to the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/> password property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.PasswordBoxBinding.PasswordProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.PasswordBoxBinding.Password" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.PasswordBoxBinding.Password">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.PasswordBoxBinding.Password" /> Property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.PasswordBoxBinding.OnAttach">
            <summary>
            Occures when the behavior is attached to the object
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.PasswordBoxBinding.OnDetach">
            <summary>
            Occures when the behaviour is detached from the object
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.PropertyChangedTrigger">
            <summary>
            Provides a <see cref="T:Cauldron.XAML.Interactivity.Behaviour`1"/> that can invoke <see cref="T:Cauldron.XAML.Interactivity.Actions.ActionBase"/> behaviours if a property changes
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.PropertyChangedTrigger.PropertyProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Interactivity.PropertyChangedTrigger.Property" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.PropertyChangedTrigger.Property">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Interactivity.PropertyChangedTrigger.Property" /> Property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.PropertyChangedTrigger.Actions">
            <summary>
            Gets a collection of actions that can be invoked by this behaviour
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.PropertyChangedTrigger.OnAttach">
            <summary>
            Occures when the behavior is attached to the object
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.PropertyChangedTrigger.OnCopy(Cauldron.XAML.Interactivity.IBehaviour)">
            <summary>
            Occures after shallow copying the behavior
            </summary>
            <param name="behaviour">The resulting behavior from <see cref="M:Cauldron.XAML.Interactivity.IBehaviour.Copy"/></param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.PropertyChangedTrigger.OnDataContextChanged">
            <summary>
            Occures if the <see cref="P:Windows.UI.Xaml.FrameworkElement.DataContext"/> of <see cref="P:Cauldron.XAML.Interactivity.Behaviour`1.AssociatedObject"/> has changed
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.PropertyChangedTrigger.OnDataContextPropertyChanged(System.String)">
            <summary>
            Occures if the <see cref="P:Windows.UI.Xaml.FrameworkElement.DataContext"/> has invoked the <see cref="E:Windows.UI.Xaml.Data.INotifyPropertyChanged.PropertyChanged"/> event
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.PropertyChangedTrigger.OnDetach">
            <summary>
            Occures when the behaviour is detached from the object
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.SetFocusOnLoad">
            <summary>
            Provides a behaviour that can set the focus of a control after <see cref="E:Windows.UI.Xaml.FrameworkElement.Loaded"/>
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.SetFocusOnLoad.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Interactivity.SetFocusOnLoad"/>
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.SetFocusOnLoad.OnAttach">
            <summary>
            Occures when the behavior is attached to the object
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.SetFocusOnLoad.OnDetach">
            <summary>
            Occures when the behaviour is detached from the object
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Interactivity.StyleInteraction">
            <summary>
            Defines a container that enables to attach behaviours to a <see cref="T:Windows.UI.Xaml.Style"/>
            </summary>
            <example>
            <![CDATA[
            <Setter Property="behaviour:StyleInteraction.Template">
                <Setter.Value>
                    <behaviour:InteractionTemplate>
                        <behaviour:NavigateToLinkDescribedByContent />
                     </behaviour:InteractionTemplate>
                </Setter.Value>
            </Setter>
            ]]>
            </example>
        </member>
        <member name="F:Cauldron.XAML.Interactivity.StyleInteraction.TemplateProperty">
            <summary>
            Gets or sets the <see cref="T:Cauldron.XAML.Interactivity.InteractionTemplate"/> associated with a specified object.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Interactivity.StyleInteraction.Behaviours">
            <summary>
            Gets a collection of behaviours
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.StyleInteraction.GetTemplate(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="T:Cauldron.XAML.Interactivity.InteractionTemplate"/> associated with a specified object.
            </summary>
            <param name="dependencyObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> from which to retrieve the <see cref="T:Cauldron.XAML.Interactivity.InteractionTemplate"/>.</param>
            <returns>A <see cref="T:Cauldron.XAML.Interactivity.InteractionTemplate"/> containing the behaviors associated with the specified object.</returns>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.StyleInteraction.SetTemplate(Windows.UI.Xaml.DependencyObject,Cauldron.XAML.Interactivity.InteractionTemplate)">
            <summary>
            Sets the <see cref="T:Cauldron.XAML.Interactivity.InteractionTemplate"/> associated with a specified object.
            </summary>
            <param name="dependencyObject">The <see cref="T:Windows.UI.Xaml.DependencyObject"/> on which to set the <see cref="T:Cauldron.XAML.Interactivity.InteractionTemplate"/>.</param>
            <param name="value">The <see cref="T:Cauldron.XAML.Interactivity.InteractionTemplate"/> associated with the object.</param>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="dependencyObject"/> is null</exception>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Cauldron_UWP_XAML_Interactivity_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Cauldron_UWP_XAML_Interactivity_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Interactivity.Cauldron_UWP_XAML_Interactivity_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="T:Cauldron.IEnumerableExtensions.Extensions">
            <summary>
            Provides usefull extensions for <see cref="T:System.Collections.IEnumerable"/>
            </summary>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Any_(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.IEnumerable"/> whose elements to apply the predicate to</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>True if any elements in the source sequence pass the test in the specified predicate, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Any_(System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> to check for emptiness.</param>
            <returns>True if the source sequence contains any elements, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Count_(System.Collections.IEnumerable)">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/></param>
            <returns>The total count of items in the <see cref="T:System.Collections.IEnumerable"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.ElementAt_(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the element at the defined index
            </summary>
            <param name="ienumerable">The enumerable that contains the element</param>
            <param name="index">The index of the element</param>
            <returns>The element with the specified index</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ienumerable"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Except_(System.Collections.IEnumerable,System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="items">The <see cref="T:System.Collections.IEnumerable"/> that may contain the object to remove</param>
            <param name="itemToExcept">The object to remove from the <see cref="T:System.Collections.IEnumerable"/>. The value can be null for reference types.</param>
            <returns>A new instance of the <see cref="T:System.Collections.IEnumerable"/> without the item specified by <paramref name="itemToExcept"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.FirstElement_(System.Collections.IEnumerable)">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> to return the first element of.</param>
            <returns>The first element in the specified sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.SequenceEqual_(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their types
            </summary>
            <param name="first">An <see cref="T:System.Collections.IEnumerable"/> to compare to second.</param>
            <param name="second">An <see cref="T:System.Collections.IEnumerable"/> to compare to the first sequence.</param>
            <returns>
            true if the two source sequences are of equal length and their corresponding
            elements are equal according to the default equality comparer for their type;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">first or second is null.</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.ToArray_``1(System.Collections.IEnumerable)">
            <summary>
            Converts a <see cref="T:System.Collections.IEnumerable"/> to an array
            </summary>
            <typeparam name="T">The type of elements the <see cref="T:System.Collections.IEnumerable"/> contains</typeparam>
            <param name="items">The <see cref="T:System.Collections.IEnumerable"/> to convert</param>
            <returns>An array of <typeparamref name="T"/></returns>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.ToList_``1(System.Collections.IEnumerable)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="target">The <see cref="T:System.Collections.IEnumerable"/> to create a <see cref="T:System.Collections.Generic.List`1"/> from.</param>
            <returns>A System.Collections.Generic.List`1 that contains elements from the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
    </members>
</doc>
