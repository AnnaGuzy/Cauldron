<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cauldron.XAML</name>
    </assembly>
    <members>
        <member name="T:Cauldron.XAML.ApplicationBase">
            <summary>
            Encapsulates the app and its available services.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.ApplicationBase"/>
            </summary>
        </member>
        <member name="E:Cauldron.XAML.ApplicationBase.BehaviourInvoke">
            <summary>
            Occures if a behaviour should be invoked
            </summary>
        </member>
        <member name="E:Cauldron.XAML.ApplicationBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ApplicationBase.Dispatcher">
            <summary>
            Gets the <see cref="P:Cauldron.XAML.ApplicationBase.Dispatcher"/> this <see cref="T:Cauldron.Core.DispatcherEx"/> is associated with.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ApplicationBase.EnableFrameRateCounter">
            <summary>
            Gets or sets a value that indicates whether to display frame-rate and per-frame
            CPU usage info. These display as an overlay of counters in the window chrome
            while the app runs.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ApplicationBase.HandleBackButton">
            <summary>
            Gets or sets a value that indicates, that back button should be handled automatically
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ApplicationBase.Id">
            <summary>
            Gets the unique Id of the view model
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ApplicationBase.IsLoading">
            <summary>
            Gets or sets a value that indicates if the viewmodel is loading
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ApplicationBase.MessageDialog">
            <summary>
            Gets the message dialog
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ApplicationBase.Navigator">
            <summary>
            Gets the window navigator
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnException(System.Exception)">
            <summary>
            Centralized error handling
            </summary>
            <param name="e">The <see cref="T:System.Exception"/> that occured</param>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.RaiseNotifyBehaviourInvoke(System.String)">
            <summary>
            Invokes the <see cref="E:Cauldron.XAML.ApplicationBase.BehaviourInvoke"/> event
            </summary>
            <param name="behaviourName">The name of the behaviour to invoke</param>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.RaisePropertyChanged(System.String)">
            <summary>
            Invokes the <see cref="E:Cauldron.XAML.ApplicationBase.PropertyChanged"/> event
            </summary>
            <param name="propertyName">The name of the property where the value change has occured</param>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.AfterRaiseNotifyPropertyChanged(System.String)">
            <summary>
            Occures after the event <see cref="E:Cauldron.XAML.ApplicationBase.PropertyChanged"/> has been invoked
            </summary>
            <param name="propertyName">The name of the property where the value change has occured</param>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.BeforeRaiseNotifyPropertyChanged(System.String)">
            <summary>
            Occured before the <see cref="E:Cauldron.XAML.ApplicationBase.PropertyChanged"/> event is invoked.
            </summary>
            <param name="propertyName">The name of the property where the value change has occured</param>
            <returns>Returns true if <see cref="M:Cauldron.XAML.ApplicationBase.RaisePropertyChanged(System.String)"/> should be cancelled. Otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnActivated(Windows.ApplicationModel.Activation.IActivatedEventArgs)">
            <summary>
            Invoked when the application is activated by some means other than normal launching.
            </summary>
            <param name="args">Event data for the event.</param>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnActivationProtocol(System.Uri)">
            <summary>
            Occures if the application is activated by a URI whose scheme name this app is registered to handle.
            </summary>
            <param name="uri">Gets the Uniform Resource Identifier (URI) for which the app was activated.</param>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnAppVisible">
            <summary>
            Occures if the app is launched after prelaunch has occured
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <summary>
            Invoked when the application is launched normally by the end user.  Other entry points
            will be used such as when the application is launched to open a specific file.
            </summary>
            <param name="e">Details about the launch request and process.</param>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnLoadStateAsync(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <summary>
            Load state from previously suspended application
            </summary>
            <param name="e">Details about the launch request and process.</param>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnPrelaunchActivation">
            <summary>
            Occures on prelaunch
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnPreload">
            <summary>
            Occures on preload
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnResourceLoad">
            <summary>
            Occures before loading XAML resources
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnSaveStateAsync(Windows.ApplicationModel.SuspendingEventArgs)">
            <summary>
            Invoked when application execution is being suspended.  Application state is saved
            without knowing whether the application will be terminated or resumed with the contents
            of memory still intact.
            </summary>
            <param name="e">Details about the suspend request.</param>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnStartup(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <summary>
            Occures if the application is launched
            </summary>
            <param name="e">Details about the launch request and process.</param>
        </member>
        <member name="M:Cauldron.XAML.ApplicationBase.OnSuspending(System.Object,Windows.ApplicationModel.SuspendingEventArgs)">
            <summary>
            Invoked when application execution is being suspended.  Application state is saved
            without knowing whether the application will be terminated or resumed with the contents
            of memory still intact.
            </summary>
            <param name="sender">The source of the suspend request.</param>
            <param name="e">Details about the suspend request.</param>
        </member>
        <member name="T:Cauldron.XAML.CauldronTemplateSelector">
            <summary>
            Provides a way to choose a <see cref="T:Windows.UI.Xaml.DataTemplate"/> based on the data object and the data-bound element.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.CauldronTemplateSelector.SelectTemplateCore(System.Object,Windows.UI.Xaml.DependencyObject)">
            <summary>
            When implemented by a derived class, returns a specific DataTemplate for a given item or container.
            </summary>
            <param name="item">The item to return a template for.</param>
            <param name="container">The parent container for the templated item.</param>
            <returns>The template to use for the given item and/or container.</returns>
        </member>
        <member name="T:Cauldron.XAML.Controls.NavigationFrame">
            <summary>
            Displays Page instances, supports navigation to new pages, and maintains a navigation history to support forward and backward navigation.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Controls.NavigationFrame"/>
            </summary>
        </member>
        <member name="E:Cauldron.XAML.Controls.NavigationFrame.BackRequested">
            <summary>
            Occures when back navigation is requested
            </summary>
        </member>
        <member name="E:Cauldron.XAML.Controls.NavigationFrame.Navigated">
            <summary>
            Occurs when the content that is being navigated to has been found and is available from the Content property, although it may not have completed loading.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Controls.NavigationFrame.BackStack">
            <summary>
            Gets a collection of <see cref="T:Cauldron.XAML.Navigation.PageStackEntry"/> instances representing the backward navigation history of the <see cref="T:Cauldron.XAML.Controls.NavigationFrame"/>.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Controls.NavigationFrame.ForwardStack">
            <summary>
            Gets a collection of <see cref="T:Cauldron.XAML.Navigation.PageStackEntry"/> instances representing the forward navigation history of the <see cref="T:Cauldron.XAML.Controls.NavigationFrame"/>.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.ClearStack">
            <summary>
            Resets the navigation history of the <see cref="T:Cauldron.XAML.Controls.NavigationFrame"/>
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.GoBack">
            <summary>
            Navigates to the most recent item in back navigation history, if a Frame manages its own navigation history.
            </summary>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.GoBack(Cauldron.XAML.Navigation.NavigationType)">
            <summary>
            Navigates to the most recent item in back navigation history, if a Frame manages its own navigation history.
            </summary>
            <param name="navigationType">The type of navigation attempt</param>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.GoForward">
            <summary>
            Gets a collection of PageStackEntry instances representing the forward navigation history of the Frame.
            </summary>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.GoForward(Cauldron.XAML.Navigation.NavigationType)">
            <summary>
            Gets a collection of PageStackEntry instances representing the forward navigation history of the Frame.
            </summary>
            <param name="navigationType">The type of navigation attempt</param>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.Navigate(System.Type,System.Object[])">
            <summary>
            Causes the <see cref="T:Cauldron.XAML.Controls.NavigationFrame"/> to load content represented by the specified <see cref="T:Cauldron.XAML.ViewModels.IViewModel"/>, also passing a parameter to be used to construct the view model.
            </summary>
            <param name="viewModelType">The type of the viewmodel to construct</param>
            <param name="arguments">
            The navigation parameter to pass to the target view model; must have a basic type (string, char, numeric, or GUID) to support parameter serialization.
            </param>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewModelType"/> is null</exception>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.Navigate(System.Type)">
            <summary>
            Causes the <see cref="T:Cauldron.XAML.Controls.NavigationFrame"/> to load content represented by the specified <see cref="T:Cauldron.XAML.ViewModels.IViewModel"/>, also passing a parameter to be used to construct the view model.
            </summary>
            <param name="viewModelType">The type of the viewmodel to construct</param>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewModelType"/> is null</exception>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.Navigate``1(System.Object[],System.Func{System.Threading.Tasks.Task})">
            <summary>
            Create a new <see cref="T:Windows.UI.Xaml.Controls.ContentDialog"/> or <see cref="T:Windows.UI.Xaml.Controls.Flyout"/> with the view defined by the view model, depending on the views definition.
            </summary>
            <typeparam name="TViewModel">The type of the view model to create</typeparam>
            <param name="arguments">The parameters used to construct the view model</param>
            <param name="callback">A delegate that is invoked when the dialog is closed</param>
            <permission cref="T:System.NotSupportedException">The is already an open ContentDialog. Multiple ContentDialogs are not supported</permission>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.Navigate``2(System.Object[],System.Func{``1,System.Threading.Tasks.Task})">
            <summary>
            Create a new <see cref="T:Windows.UI.Xaml.Controls.ContentDialog"/> or <see cref="T:Windows.UI.Xaml.Controls.Flyout"/> with the view defined by the view model, depending on the views definition.
            </summary>
            <typeparam name="TViewModel">The type of the view model to create</typeparam>
            <typeparam name="TResult">The result of the dialog</typeparam>
            <param name="arguments">The parameters used to construct the view model</param>
            <param name="callback">A delegate that is invoked when the dialog is closed</param>
            <permission cref="T:System.NotSupportedException">The is already an open ContentDialog. Multiple ContentDialogs are not supported</permission>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.Reload">
            <summary>
            Reloads the current view and viewmodel
            </summary>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.TryClose">
            <summary>
            Tries to close all <see cref="T:Windows.UI.Xaml.Controls.ContentDialog"/>s and <see cref="T:Windows.UI.Xaml.Controls.Flyout"/>s
            </summary>
            <returns>Returns true if there are open dialogs, otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.Controls.NavigationFrame.TryClose(Cauldron.XAML.ViewModels.IViewModel)">
            <summary>
            Tries to close a view model associated <see cref="T:Windows.UI.Xaml.Controls.ContentDialog"/> or <see cref="T:Windows.UI.Xaml.Controls.Flyout"/>
            </summary>
            <param name="viewModel">The viewmodel to that was assigned to the window's data context</param>
            <returns>Returns true if successfully closed, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="viewModel"/> is null</exception>
        </member>
        <member name="F:Cauldron.XAML.Controls.NavigationFrame.BackButtonVisibleProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Controls.NavigationFrame.BackButtonVisible" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Controls.NavigationFrame.BackButtonVisible">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Controls.NavigationFrame.BackButtonVisible" /> Property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Controls.NavigationFrame.CanGoForwardProperty">
            <summary>
            Identifies the CanGoForward dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Controls.NavigationFrame.CanGoForward">
            <summary>
            Gets or sets the CanGoForward Property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Controls.NavigationFrame.CanGoBackProperty">
            <summary>
            Identifies the CanGoBack dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Controls.NavigationFrame.CanGoBack">
            <summary>
            Gets or sets the CanGoBack Property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Controls.NavigationFrame.MaxStackSizeProperty">
            <summary>
            Identifies the MaxStackSize dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Controls.NavigationFrame.MaxStackSize">
            <summary>
            Gets or sets the MaxStackSize Property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Controls.NavigationFrame.DefaultChildrenTransitionsProperty">
            <summary>
            Identifies the DefaultChildrenTransistions dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Controls.NavigationFrame.DefaultChildrenTransitions">
            <summary>
            Gets or sets the DefaultChildrenTransistions Property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Resources.StylesAndTemplates.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Resources.StylesAndTemplates"/>
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Resources.StylesAndTemplates.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Resources.StylesAndTemplates.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Resources.MessageDialogView.EnterCommandProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Resources.MessageDialogView.EnterCommand" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Resources.MessageDialogView.EnterCommand">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Resources.MessageDialogView.EnterCommand" /> Property
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Resources.MessageDialogView.CancelCommandProperty">
            <summary>
            Identifies the <see cref="P:Cauldron.XAML.Resources.MessageDialogView.CancelCommand" /> dependency property
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Resources.MessageDialogView.CancelCommand">
            <summary>
            Gets or sets the <see cref="P:Cauldron.XAML.Resources.MessageDialogView.CancelCommand" /> Property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Resources.MessageDialogView.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Resources.MessageDialogView.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Resources.LocalizationSource">
            <summary>
            An implementation of <see cref="T:Cauldron.Localization.ILocalizationSource"/> for Cauldron.XAML
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Resources.LocalizationSource.Contains(System.String,System.String)">
            <summary>
            Determines whether an element is in the <see cref="T:Cauldron.Localization.ILocalizationSource"/>
            </summary>
            <param name="key">The key of the localized string</param>
            <param name="twoLetterISOLanguageName">The two letter iso language name according to ISO</param>
            <returns>true if item is found in the <see cref="T:Cauldron.Localization.ILocalizationSource"/>; otherwise, false.</returns>
        </member>
        <member name="M:Cauldron.XAML.Resources.LocalizationSource.GetValue(System.String,System.String)">
            <summary>
            Returns a localized value associated with the key
            </summary>
            <param name="key">The key of the localized string data</param>
            <param name="twoLetterISOLanguageName">The two letter iso language name according to ISO</param>
            <returns>A <see cref="T:System.String"/></returns>
        </member>
        <member name="T:Cauldron.XAML.Navigation.Navigator">
            <summary>
            Handles creation of a new <see cref="T:Windows.UI.Xaml.Controls.Page"/> and association of the viewmodel
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.Navigation.Navigator"/>
            </summary>
        </member>
        <member name="E:Cauldron.XAML.Navigation.Navigator.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.Navigator.CanGoBack">
            <summary>
            Gets a value that indicates whether there is at least one entry in back navigation history.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.Navigator.CanGoForward">
            <summary>
            Gets a value that indicates whether there is at least one entry in forward navigation history.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.GoBack">
            <summary>
            Navigates to the most recent item in back navigation history, if a Frame manages its own navigation history.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.GoForward">
            <summary>
            Navigates to the most recent item in forward navigation history, if a Frame manages its own navigation history.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.NavigateAsync(System.Type)">
            <summary>
            Handles creation of a new page or window and association of the viewmodel
            </summary>
            <param name="viewModelType">The viewModel type to create</param>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.NavigateAsync(System.Type,System.Object[])">
            <summary>
            Causes the window or page to load content represented by the specified <see cref="T:Cauldron.XAML.ViewModels.IViewModel"/>, also passing a parameter to be used to construct the view model.
            </summary>
            <param name="viewModelType">The type of the viewmodel to construct</param>
            <param name="parameters">
            The navigation parameter to pass to the target view model; must have a basic type (string, char, numeric, or GUID) to support parameter serialization.
            </param>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.NavigateAsync``1(System.Object[])">
            <summary>
            Causes the window or page to load content represented by the specified <see cref="T:Cauldron.XAML.ViewModels.IViewModel"/>, also passing a parameter to be used to construct the view model.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <param name="parameters">
            The navigation parameter to pass to the target view model; must have a basic type (string, char, numeric, or GUID) to support parameter serialization.
            </param>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.NavigateAsync``1">
            <summary>
            Causes the window or page to load content represented by the specified <see cref="T:Cauldron.XAML.ViewModels.IViewModel"/>.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.NavigateAsync``2(System.Func{``1,System.Threading.Tasks.Task})">
            <summary>
            Create a new <see cref="T:Windows.UI.Xaml.Controls.ContentDialog"/> or <see cref="T:Windows.UI.Xaml.Controls.Flyout"/> with the view defined by the view model, depending on the views definition.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <typeparam name="TResult">The result type of the dialog</typeparam>
            <param name="callback">A delegate that is called after the popup has been closed</param>
            <permission cref="T:System.NotSupportedException">The is already an open ContentDialog. Multiple ContentDialogs are not supported</permission>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.NavigateAsync``1(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Create a new <see cref="T:Windows.UI.Xaml.Controls.ContentDialog"/> or <see cref="T:Windows.UI.Xaml.Controls.Flyout"/> with the view defined by the view model, depending on the views definition.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <param name="callback">A delegate that is called after the popup has been closed</param>
            <permission cref="T:System.NotSupportedException">The is already an open ContentDialog. Multiple ContentDialogs are not supported</permission>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.NavigateAsync``2(System.Func{``1,System.Threading.Tasks.Task},System.Object[])">
            <summary>
            Create a new <see cref="T:Windows.UI.Xaml.Controls.ContentDialog"/> or <see cref="T:Windows.UI.Xaml.Controls.Flyout"/> with the view defined by the view model, depending on the views definition, also passing a parameter to be used to construct the view model.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <typeparam name="TResult">The result type of the dialog</typeparam>
            <param name="callback">A delegate that is called after the popup has been closed</param>
            <param name="parameters">
            The navigation parameter to pass to the target view model.
            </param>
            <permission cref="T:System.NotSupportedException">The is already an open ContentDialog. Multiple ContentDialogs are not supported</permission>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.NavigateAsync``1(System.Func{System.Threading.Tasks.Task},System.Object[])">
            <summary>
            Create a new <see cref="T:Windows.UI.Xaml.Controls.ContentDialog"/> or <see cref="T:Windows.UI.Xaml.Controls.Flyout"/> with the view defined by the view model, depending on the views definition, also passing a parameter to be used to construct the view model.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <param name="callback">A delegate that is called after the popup has been closed</param>
            <param name="parameters">
            The navigation parameter to pass to the target view model.
            </param>
            <permission cref="T:System.NotSupportedException">The is already an open ContentDialog. Multiple ContentDialogs are not supported</permission>
        </member>
        <member name="M:Cauldron.XAML.Navigation.Navigator.TryClose(Cauldron.XAML.ViewModels.IViewModel)">
            <summary>
            Tries to close a view model associated popup
            </summary>
            <param name="viewModel">The viewmodel to that was assigned to the window's data context</param>
            <returns>Returns true if successfully closed, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="viewModel"/> is null</exception>
        </member>
        <member name="T:Cauldron.XAML.Navigation.CauldronBackRequestedEventArgs">
            <summary>
            Provides data for the back request event
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.CauldronBackRequestedEventArgs.IsHandled">
            <summary>
            Gets or sets a value that indicated that the request was handled
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Navigation.INavigator">
            <summary>
            Represents a class that handles the creation of a new Window (Desktop) or Page (UWP) and association of the viewmodel
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.INavigator.CanGoBack">
            <summary>
            Gets a value that indicates whether there is at least one entry in back navigation history.
            <para/>
            Only relevant for UWP and Desktop single page application
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.INavigator.CanGoForward">
            <summary>
            Gets a value that indicates whether there is at least one entry in forward navigation history.
            <para/>
            Only relevant for UWP and Desktop single page application
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Navigation.INavigator.GoBack">
            <summary>
            Navigates to the most recent item in back navigation history, if a Frame manages its own navigation history.
            <para/>
            Only relevant for UWP and Desktop single page application
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Navigation.INavigator.GoForward">
            <summary>
            Navigates to the most recent item in forward navigation history, if a Frame manages its own navigation history.
            <para/>
            Only relevant for UWP and Desktop single page application
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Navigation.INavigator.NavigateAsync(System.Type)">
            <summary>
            Causes the window or page to load content represented by the specified <see cref="T:Cauldron.XAML.ViewModels.IViewModel"/>.
            </summary>
            <param name="viewModelType">The type of the viewmodel to construct</param>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Navigation.INavigator.NavigateAsync(System.Type,System.Object[])">
            <summary>
            Causes the window or page to load content represented by the specified <see cref="T:Cauldron.XAML.ViewModels.IViewModel"/>, also passing a parameter to be used to construct the view model.
            </summary>
            <param name="viewModelType">The type of the viewmodel to construct</param>
            <param name="parameters">
            The navigation parameter to pass to the target view model; must have a basic type (string, char, numeric, or GUID) to support parameter serialization.
            </param>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Navigation.INavigator.NavigateAsync``1">
            <summary>
            Causes the window or page to load content represented by the specified <see cref="T:Cauldron.XAML.ViewModels.IViewModel"/>.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Navigation.INavigator.NavigateAsync``2(System.Func{``1,System.Threading.Tasks.Task})">
            <summary>
            Create a new popup with the view defined by the view model, depending on the views definition.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <typeparam name="TResult">The result type of the dialog</typeparam>
            <param name="callback">A delegate that is called after the popup has been closed</param>
            <permission cref="T:System.NotSupportedException">The is already an open ContentDialog. Multiple ContentDialogs are not supported</permission>
        </member>
        <member name="M:Cauldron.XAML.Navigation.INavigator.NavigateAsync``1(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Create a new popup with the view defined by the view model, depending on the views definition.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <param name="callback">A delegate that is called after the popup has been closed</param>
            <permission cref="T:System.NotSupportedException">The is already an open ContentDialog. Multiple ContentDialogs are not supported</permission>
        </member>
        <member name="M:Cauldron.XAML.Navigation.INavigator.NavigateAsync``1(System.Object[])">
            <summary>
            Causes the window or page to load content represented by the specified <see cref="T:Cauldron.XAML.ViewModels.IViewModel"/>, also passing a parameter to be used to construct the view model.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <param name="parameters">
            The navigation parameter to pass to the target view model; must have a basic type (string, char, numeric, or GUID) to support parameter serialization.
            </param>
            <returns>true if the navigation attempt was successful; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.XAML.Navigation.INavigator.NavigateAsync``2(System.Func{``1,System.Threading.Tasks.Task},System.Object[])">
            <summary>
            Create a new popup with the view defined by the view model, depending on the views definition, also passing a parameter to be used to construct the view model.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <typeparam name="TResult">The result type of the dialog</typeparam>
            <param name="callback">A delegate that is called after the popup has been closed</param>
            <param name="parameters">
            The navigation parameter to pass to the target view model.
            </param>
            <permission cref="T:System.NotSupportedException">The is already an open ContentDialog. Multiple ContentDialogs are not supported</permission>
        </member>
        <member name="M:Cauldron.XAML.Navigation.INavigator.NavigateAsync``1(System.Func{System.Threading.Tasks.Task},System.Object[])">
            <summary>
            Create a new popup with the view defined by the view model, depending on the views definition, also passing a parameter to be used to construct the view model.
            </summary>
            <typeparam name="T">The type of the viewmodel to construct</typeparam>
            <param name="callback">A delegate that is called after the popup has been closed</param>
            <param name="parameters">
            The navigation parameter to pass to the target view model.
            </param>
            <permission cref="T:System.NotSupportedException">The is already an open ContentDialog. Multiple ContentDialogs are not supported</permission>
        </member>
        <member name="M:Cauldron.XAML.Navigation.INavigator.TryClose(Cauldron.XAML.ViewModels.IViewModel)">
            <summary>
            Tries to close a view model associated popup
            </summary>
            <param name="viewModel">The viewmodel to that was assigned to the window's data context</param>
            <returns>Returns true if successfully closed, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="viewModel"/> is null</exception>
        </member>
        <member name="T:Cauldron.XAML.Navigation.NavigatingInfo">
            <summary>
            Provides data for navigation
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.NavigatingInfo.Cancel">
            <summary>
            Specifies whether a pending navigation should be canceled.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.NavigatingInfo.NavigationMode">
            <summary>
            Gets the value of the mode parameter from the originating Navigate call.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.NavigatingInfo.NavigationType">
            <summary>
            Gets information about what invoked the navigation
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.NavigatingInfo.SourcePageType">
            <summary>
            Gets the data type of the source page.
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Navigation.NavigationInfo">
            <summary>
            Provides data for navigation
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.NavigationInfo.NavigationMode">
            <summary>
            Gets the value of the mode parameter from the originating Navigate call.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.NavigationInfo.NavigationType">
            <summary>
            Gets information about what invoked the navigation
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.NavigationInfo.SourceViewModelType">
            <summary>
            Gets the data type of the source view model.
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Navigation.NavigationType">
            <summary>
            Describes the type of navigation that occured
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Navigation.NavigationType.User">
            <summary>
            The navigation was invoked by the user
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Navigation.NavigationType.Code">
            <summary>
            The navigation was invoked by code
            </summary>
        </member>
        <member name="F:Cauldron.XAML.Navigation.NavigationType.BackButton">
            <summary>
            The device's back button was pressed
            </summary>
        </member>
        <member name="T:Cauldron.XAML.Navigation.PageStackEntry">
            <summary>
            Represents an entry in the BackStack or ForwardStack of a Frame.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.PageStackEntry.Parameters">
            <summary>
            Gets the navigation parameter associated with this navigation entry.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.PageStackEntry.ViewModelType">
            <summary>
            Gets the type of viewmodel associated with this navigation entry.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.Navigation.PageStackEntry.ViewModelTypeName">
            <summary>
            Gets the type fullname of viewmodel associated with this navigation entry.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Navigation.PageStackEntry.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Cauldron.XAML.ValueConverters.ItemClickEventArgsToViewModelConverter">
            <summary>
            Converts <see cref="T:Windows.UI.Xaml.Controls.ItemClickEventArgs"/> to <see cref="T:Cauldron.XAML.ViewModels.IViewModel"/>
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.ItemClickEventArgsToViewModelConverter.OnConvert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.ItemClickEventArgsToViewModelConverter.OnConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value.If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="T:Cauldron.XAML.ValueConverters.BooleanInvertConverter">
            <summary>
            Inverts a bool value
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.BooleanInvertConverter.OnConvert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.BooleanInvertConverter.OnConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value.If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="T:Cauldron.XAML.ValueConverters.BooleanToVisibilityConverter">
            <summary>
            Converts a <see cref="T:System.Boolean"/> to <see cref="T:Windows.UI.Xaml.Visibility"/>. If the value is true, the <see cref="T:Windows.UI.Xaml.Data.IValueConverter"/> will
            return either <see cref="F:Windows.UI.Xaml.Visibility.Collapsed"/> or <see cref="F:Windows.UI.Xaml.Visibility.Visible"/> depending on the parameter
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.BooleanToVisibilityConverter.OnConvert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.BooleanToVisibilityConverter.OnConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value.If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="T:Cauldron.XAML.ValueConverters.KeyToLocalizedStringConverter">
            <summary>
            Tries to get the localized value of the given key
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.KeyToLocalizedStringConverter.OnConvert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.KeyToLocalizedStringConverter.OnConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value.If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="T:Cauldron.XAML.ValueConverters.ObjectToVisibilityConverter">
            <summary>
            Checks if an object is null. If the object is null, the <see cref="T:Windows.UI.Xaml.Data.IValueConverter"/> will return <see cref="F:Windows.UI.Xaml.Visibility.Collapsed"/>
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.ObjectToVisibilityConverter.OnConvert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.ObjectToVisibilityConverter.OnConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value.If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="T:Cauldron.XAML.ValueConverters.VisibilityToBooleanConverter">
            <summary>
            Converts a <see cref="T:System.Boolean"/> to <see cref="T:Windows.UI.Xaml.Visibility"/>. If the value is true, the <see cref="T:Windows.UI.Xaml.Data.IValueConverter"/> will
            return either <see cref="F:Windows.UI.Xaml.Visibility.Collapsed"/> or <see cref="F:Windows.UI.Xaml.Visibility.Visible"/> depending on the parameter
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.VisibilityToBooleanConverter.OnConvert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="M:Cauldron.XAML.ValueConverters.VisibilityToBooleanConverter.OnConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value.If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="T:Cauldron.XAML.BehaviourInvocationArgs">
            <summary>
            Provides data for the <see cref="E:Cauldron.XAML.INotifyBehaviourInvocation.BehaviourInvoke"/> event.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.BehaviourInvocationArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.BehaviourInvocationArgs"/>
            </summary>
            <param name="behaviourName"></param>
        </member>
        <member name="P:Cauldron.XAML.BehaviourInvocationArgs.BehaviourName">
            <summary>
            Gets the name of the behaviour to be invoked
            </summary>
        </member>
        <member name="T:Cauldron.XAML.BitmapImageEx">
            <summary>
            Provides a wrapper for <see cref="T:Windows.UI.Xaml.Media.Imaging.BitmapImage"/> for  Windows.UI.Xaml.Media.Imaging.BitmapImage (UWP) and System.Windows.Media.Imaging.BitmapImage (Desktop)
            </summary>
        </member>
        <member name="P:Cauldron.XAML.BitmapImageEx.Value">
            <summary>
            Gets the wrapped <see cref="T:Windows.UI.Xaml.Media.Imaging.BitmapImage"/>.
            </summary>
        </member>
        <member name="T:Cauldron.XAML.CauldronUICommand">
            <summary>
            Represents a command in the MessageDialog and ContentDialog
            </summary>
        </member>
        <member name="M:Cauldron.XAML.CauldronUICommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.XAML.CauldronUICommand"/> class
            </summary>
            <param name="label">The label of the command button</param>
        </member>
        <member name="M:Cauldron.XAML.CauldronUICommand.#ctor(System.String,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.XAML.CauldronUICommand"/> class
            </summary>
            <param name="label">The label of the command button</param>
            <param name="command">The action that will be invoke if the command is executed</param>
        </member>
        <member name="P:Cauldron.XAML.CauldronUICommand.Label">
            <summary>
            Gets or sets the label of the command button
            </summary>
        </member>
        <member name="M:Cauldron.XAML.CauldronUICommand.Invoke">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="T:Cauldron.XAML.CauldronUICommandCollection">
            <summary>
            Contains a collection of <see cref="T:Cauldron.XAML.CauldronUICommand"/>
            </summary>
        </member>
        <member name="T:Cauldron.XAML.DynamicEventHandler">
            <summary>
            Handles dynamic event registrations
            </summary>
        </member>
        <member name="M:Cauldron.XAML.DynamicEventHandler.#ctor(System.Object,System.String,System.Action{System.Object,System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.DynamicEventHandler"/>
            </summary>
            <param name="associatedObject">The objects that contains the event</param>
            <param name="eventName">The name of the event</param>
            <param name="eventHandler">A delegate that handles the event</param>
        </member>
        <member name="P:Cauldron.XAML.DynamicEventHandler.AssociatedObject">
            <summary>
            Gets the <see cref="T:System.Object"/> to which the event handler is attached.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.DynamicEventHandler.EventHandler">
            <summary>
            Gets the event handler that handles the event
            </summary>
        </member>
        <member name="P:Cauldron.XAML.DynamicEventHandler.EventName">
            <summary>
            Gets the name of the event
            </summary>
        </member>
        <member name="M:Cauldron.XAML.DynamicEventHandler.OnDispose(System.Boolean)">
            <summary>
            Occures after <see cref="M:System.IDisposable.Dispose"/> has been invoked
            </summary>
            <param name="disposeManaged">true if managed resources requires disposing</param>
        </member>
        <member name="T:Cauldron.XAML.Extensions">
            <summary>
            Provides usefull extension methods
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Extensions.AsBitmapImage(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Draws the visuals of a <see cref="T:Windows.UI.Xaml.FrameworkElement"/> to a <see cref="T:Windows.UI.Xaml.Media.Imaging.BitmapImage"/>
            </summary>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement"/> whose visuals are drawn to an image</param>
            <returns>An image representation of the <see cref="T:Windows.UI.Xaml.FrameworkElement"/></returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.Clone``1(``0)">
            <summary>
            Copies a <see cref="T:Windows.UI.Xaml.Data.BindingBase"/>
            </summary>
            <param name="bindingBase">The binding to clone</param>
            <returns>A new instance of <typeparam name="T"></typeparam></returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.FindVisualChildByName(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Searches for a specified visual element in the child tree by name
            </summary>
            <param name="element">The object to find the child object for. This is expected to be either a <see cref="T:Windows.UI.Xaml.FrameworkElement"/> or a <see cref="!:FrameworkContentElement"/>.</param>
            <param name="name">The name of the child to find</param>
            <returns>The instance of the child with the given name, otherwise null</returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.FindVisualChildren``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns all visual childs and sub child (recursively) of the element that matches the given type
            </summary>
            <typeparam name="T">The typ of child to search for</typeparam>
            <param name="element">The parent element</param>
            <returns>A collection of <see cref="T:Windows.UI.Xaml.FrameworkElement"/></returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.FindVisualChildren(Windows.UI.Xaml.DependencyObject,System.Type)">
            <summary>
            Returns all visual childs and sub child (recursively) of the element that matches the given type
            </summary>
            <param name="element">The parent element</param>
            <param name="dependencyObjectType">The typ of child to search for</param>
            <returns>A collection of <see cref="T:Windows.UI.Xaml.FrameworkElement"/></returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.FindVisualParent(Windows.UI.Xaml.DependencyObject,System.Type)">
            <summary>
            Returns the parent object of the specified object by processing the visual tree.
            </summary>
            <param name="element">The object to find the parent object for. This is expected to be either a <see cref="T:Windows.UI.Xaml.FrameworkElement"/> or a <see cref="!:FrameworkContentElement"/>.</param>
            <param name="dependencyObjectType">The type of the parent to find</param>
            <returns>The requested parent object.</returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.FindVisualParent``1(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the parent object of the specified object by processing the visual tree.
            </summary>
            <typeparam name="T">The type of the parent to find</typeparam>
            <param name="element">The object to find the parent object for. This is expected to be either a <see cref="T:Windows.UI.Xaml.FrameworkElement"/> or a <see cref="!:FrameworkContentElement"/>.</param>
            <returns>The requested parent object.</returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.FindVisualRootElement(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Climbs up the visual tree and returns the top most visual parent
            </summary>
            <param name="element">The object that serves as starting point</param>
            <returns>The top most element in the tree</returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.GetDependencyProperties(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns all DependendencyProperty fields in UWP and Desktop
            </summary>
            <param name="dependencyObject">The dependency object whose dependency property to extract</param>
            <returns>A collection of dependencyProperties</returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.GetVisualChildren(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the direct visual children of the element
            </summary>
            <param name="element">The parent element</param>
            <returns>A collection of children</returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.GetVisualParent(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the parent object of the specified object by processing the visual tree.
            </summary>
            <param name="element">The object to find the parent object for. This is expected to be either a <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.</param>
            <returns>The requested parent object.</returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.Run(Cauldron.XAML.ViewModels.IViewModel,System.Action)">
            <summary>
            Handles neccessary setting of the <see cref="P:Cauldron.XAML.ViewModels.IViewModel.IsLoading"/> flag if implemented and the error handling
            </summary>
            <param name="viewModel">The viewmodel to start the operation from</param>
            <param name="action">The action that occures</param>
            <returns>true if this <see cref="T:System.Action"/> was executed without <see cref="T:System.Exception"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewModel"/> is null</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
        </member>
        <member name="M:Cauldron.XAML.Extensions.RunAsync(Cauldron.XAML.ViewModels.IViewModel,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Handles neccessary setting of the <see cref="P:Cauldron.XAML.ViewModels.IViewModel.IsLoading"/> flag and the error handling
            </summary>
            <param name="viewModel">The viewmodel to start the operation from</param>
            <param name="action">The action that occures</param>
            <returns>true if this <see cref="T:System.Action"/> was executed without <see cref="T:System.Exception"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewModel"/> is null</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
        </member>
        <member name="M:Cauldron.XAML.Extensions.RunDispatcherAsync(Cauldron.XAML.ViewModels.IViewModel,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the <paramref name="action"/> asyncronously using the <see cref="P:Cauldron.XAML.ViewModels.IViewModel.Dispatcher"/> on the lowest priority.
            Handles neccessary setting of the <see cref="P:Cauldron.XAML.ViewModels.IViewModel.IsLoading"/> flag and the error handling.
            </summary>
            <param name="viewModel">The viewmodel to start the operation from</param>
            <param name="action">The action that occures</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewModel"/> is null</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
        </member>
        <member name="M:Cauldron.XAML.Extensions.SaveVisualAsPngAsync(Windows.UI.Xaml.FrameworkElement,Windows.Storage.StorageFile)">
            <summary>
            Saves the visuals of a <see cref="T:Windows.UI.Xaml.FrameworkElement"/> to a png file
            </summary>
            <param name="visual">The <see cref="!:FrameworkElementFactory"/> whose visuals are drawn to an image</param>
            <param name="file">The file of the png to save to</param>
        </member>
        <member name="M:Cauldron.XAML.Extensions.SetBinding(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.DependencyProperty,System.Object,Windows.UI.Xaml.PropertyPath,Windows.UI.Xaml.Data.BindingMode)">
            <summary>
            Attaches a binding to a FrameworkElement, using the provided binding object.
            </summary>
            <param name="element">The <see cref="T:Windows.UI.Xaml.FrameworkElement"/> that is binded to</param>
            <param name="dp">The dependency property identifier of the property that is data bound.</param>
            <param name="source">The data source for the binding.</param>
            <param name="path">The path to the binding source property.</param>
            <param name="mode">Indicates the direction of the data flow in the binding.</param>
            <returns>The binding that is used for the property.</returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.ToBitmapImageAsync(System.Byte[])">
            <summary>
            Creates a new instance of <see cref="T:Windows.UI.Xaml.Media.Imaging.BitmapImage"/> and assigns the <see cref="T:System.Byte"/> array to its <see cref="!:BitmapImage.StreamSource"/> property
            </summary>
            <param name="bytes">The array of bytes that represents the image</param>
            <returns>A new instance of <see cref="T:Windows.UI.Xaml.Media.Imaging.BitmapImage"/></returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.ToBitmapImageAsync(System.IO.Stream)">
            <summary>
            Creates a new instance of <see cref="T:Windows.UI.Xaml.Media.Imaging.BitmapImage"/> and assigns the <see cref="T:System.IO.Stream"/> to its <see cref="!:BitmapImage.StreamSource"/> property
            <para/>
            Returns null if <paramref name="stream"/> is null.
            </summary>
            <param name="stream">The stream that contains an image</param>
            <returns>A new instance of <see cref="T:Windows.UI.Xaml.Media.Imaging.BitmapImage"/></returns>
        </member>
        <member name="M:Cauldron.XAML.Extensions.TryClose(Cauldron.XAML.ViewModels.IDialogViewModel)">
            <summary>
            Tries to close a view associated with the view model
            </summary>
            <param name="viewModel">The viewmodel to that was assigned to the window's data context</param>
            <returns>Returns true if successfully closed, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="viewModel"/> is null</exception>
        </member>
        <member name="T:Cauldron.XAML.IImageManager">
            <summary>
            Represents a type used to retrieving and caching of embedded images
            </summary>
        </member>
        <member name="M:Cauldron.XAML.IImageManager.GetImageAsync(System.String)">
            <summary>
            Returns an embedded image
            <para/>
            Returns null if the <paramref name="resourceInfoName"/> was not found
            </summary>
            <param name="resourceInfoName">The end of the fully qualified name of the embedded resource</param>
            <returns>The embedded image</returns>
        </member>
        <member name="M:Cauldron.XAML.IImageManager.LoadBitmapImageAsync(Windows.Storage.StorageFile)">
            <summary>
            Loads an image from a file
            </summary>
            <param name="file">The file that contains the image</param>
            <returns>The image represented by <see cref="T:Windows.UI.Xaml.Media.Imaging.BitmapImage"/></returns>
        </member>
        <member name="T:Cauldron.XAML.ImageManager">
            <summary>
            Provides retrieving and caching of embedded images
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ImageManager.GetImageAsync(System.String)">
            <summary>
            Returns an embedded image
            <para/>
            Returns null if the <paramref name="resourceInfoName"/> was not found
            </summary>
            <param name="resourceInfoName">The end of the fully qualified name of the embedded resource</param>
            <returns>The embedded image</returns>
        </member>
        <member name="M:Cauldron.XAML.ImageManager.LoadBitmapImageAsync(Windows.Storage.StorageFile)">
            <summary>
            Loads an image from a file
            </summary>
            <param name="file">The file that contains the image</param>
            <returns>The image represented by <see cref="T:Windows.UI.Xaml.Media.Imaging.BitmapImage"/></returns>
        </member>
        <member name="M:Cauldron.XAML.ImageManager.Finalize">
            <summary>
            Destructors are used to destruct instances of classes.
            </summary>
        </member>
        <member name="E:Cauldron.XAML.ImageManager.Disposed">
            <summary>
            Occures if the object has been disposed
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ImageManager.IsDisposed">
            <summary>
            Gets a value indicating if the object has been disposed or not
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ImageManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ImageManager.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">true if managed resources requires disposing</param>
        </member>
        <member name="T:Cauldron.XAML.IMessageDialog">
            <summary>
            Represents a dialog.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowAsync(System.String,System.String,Cauldron.XAML.CauldronUICommand,Cauldron.XAML.CauldronUICommand)">
            <summary>
            Begins an asynchronous operation showing a dialog.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="command1">A command that appear in the command bar of the message dialog. This command makes the dialog actionable.</param>
            <param name="command2">A command that appear in the command bar of the message dialog. This command makes the dialog actionable.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowAsync(System.String,System.String,System.UInt32,System.UInt32,Cauldron.XAML.MessageBoxImage,Cauldron.XAML.CauldronUICommandCollection)">
            <summary>
            Begins an asynchronous operation showing a dialog.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="defaultCommandIndex">The index of the command you want to use as the default. This is the command that fires by default when users press the ENTER key.</param>
            <param name="cancelCommandIndex">The index of the command you want to use as the cancel command. This is the command that fires when users press the ESC key.</param>
            <param name="messageBoxImage">The icon to show on the dialog</param>
            <param name="commands">An array of commands that appear in the command bar of the message dialog. These commands makes the dialog actionable.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowAsync(System.String,System.String,Cauldron.XAML.MessageBoxImage,Cauldron.XAML.CauldronUICommand,Cauldron.XAML.CauldronUICommand)">
            <summary>
            Begins an asynchronous operation showing a dialog.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="messageBoxImage">The icon to show on the dialog</param>
            <param name="command1">A command that appear in the command bar of the message dialog. This command makes the dialog actionable.</param>
            <param name="command2">A command that appear in the command bar of the message dialog. This command makes the dialog actionable.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowAsync(System.String,System.String,System.UInt32,System.UInt32,Cauldron.XAML.CauldronUICommandCollection)">
            <summary>
            Begins an asynchronous operation showing a dialog.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="defaultCommandIndex">The index of the command you want to use as the default. This is the command that fires by default when users press the ENTER key.</param>
            <param name="cancelCommandIndex">The index of the command you want to use as the cancel command. This is the command that fires when users press the ESC key.</param>
            <param name="commands">An array of commands that appear in the command bar of the message dialog. These commands makes the dialog actionable.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowException(System.Exception,System.String)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK and a copy button
            </summary>
            <param name="e">The exception to show on the dialog</param>
            <param name="format">Additional information to be displayed to the user. The exception is added in {0}</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowException(System.Exception)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK and a copy button
            </summary>
            <param name="e">The exception to show on the dialog</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowOKAsync(System.String,System.String)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowOKAsync(System.String,System.String,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="command">The action associated with the OK Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowOKAsync(System.String,System.String,Cauldron.XAML.MessageBoxImage)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="messageBoxImage">The icon to show on the dialog</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowOKAsync(System.String)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK button.
            </summary>
            <param name="content">The message to be displayed to the user.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowOKCancelAsync(System.String,System.String,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK and cancel button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandOK">The action associated with the OK Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowOKCancelAsync(System.String,System.String,System.Action,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK and cancel button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandOK">The action associated with the OK Command</param>
            <param name="commandCancel">The action associated with the cancel Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowYesNoAsync(System.String,System.String)">
            <summary>
            Begins an asynchronous operation showing a dialog with a Yes and No button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <returns>Returns true if the user has selected Yes, otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowYesNoAsync(System.String,System.String,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with a Yes and No button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandYes">The action associated with the Yes Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowYesNoAsync(System.String,System.String,System.Action,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with a Yes and No button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandYes">The action associated with the Yes Command</param>
            <param name="commandNo">The action associated with the No Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowYesNoCancelAsync(System.String,System.String,System.Action,System.Action,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with a Yes, No and Cancel button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandYes">The action associated with the Yes Command</param>
            <param name="commandNo">The action associated with the No Command</param>
            <param name="commandCancel">The action associated with the Cancel Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.IMessageDialog.ShowYesNoCancelAsync(System.String,System.String,System.Action,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with a Yes, No and Cancel button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandYes">The action associated with the Yes Command</param>
            <param name="commandNo">The action associated with the No Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Cauldron.XAML.INotifyBehaviourInvocation">
            <summary>
            Notifies the client that a behaviour should be invoked
            </summary>
        </member>
        <member name="E:Cauldron.XAML.INotifyBehaviourInvocation.BehaviourInvoke">
            <summary>
            Occures if a behaviour should be invoked
            </summary>
        </member>
        <member name="T:Cauldron.XAML.IRelayCommand">
            <summary>
            Defines a command
            </summary>
        </member>
        <member name="M:Cauldron.XAML.IRelayCommand.RefreshCanExecute">
            <summary>
            Triggers the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event and forces the control to refresh the execution state
            </summary>
        </member>
        <member name="T:Cauldron.XAML.MessageBoxImage">
            <summary>
            Specifies the icon that is displayed by a message box.
            </summary>
        </member>
        <member name="F:Cauldron.XAML.MessageBoxImage.None">
            <summary>
            No icon is displayed.
            </summary>
        </member>
        <member name="F:Cauldron.XAML.MessageBoxImage.Error">
            <summary>
            The message box contains a symbol consisting of white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:Cauldron.XAML.MessageBoxImage.Question">
            <summary>
            The message box contains a symbol consisting of a question mark in a circle.
            </summary>
        </member>
        <member name="F:Cauldron.XAML.MessageBoxImage.Exclamation">
            <summary>
            The message box contains a symbol consisting of an exclamation point in a triangle with a yellow background.
            </summary>
        </member>
        <member name="F:Cauldron.XAML.MessageBoxImage.Information">
            <summary>
            The message box contains a symbol consisting of a lowercase letter i in a circle.
            </summary>
        </member>
        <member name="T:Cauldron.XAML.MessageDialogEx">
            <summary>
            Represents a dialog.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowAsync(System.String,System.String,Cauldron.XAML.CauldronUICommand,Cauldron.XAML.CauldronUICommand)">
            <summary>
            Begins an asynchronous operation showing a dialog.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="command1">A command that appear in the command bar of the message dialog. This command makes the dialog actionable.</param>
            <param name="command2">A command that appear in the command bar of the message dialog. This command makes the dialog actionable.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowAsync(System.String,System.String,System.UInt32,System.UInt32,Cauldron.XAML.CauldronUICommandCollection)">
            <summary>
            Begins an asynchronous operation showing a dialog.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="defaultCommandIndex">The index of the command you want to use as the default. This is the command that fires by default when users press the ENTER key.</param>
            <param name="cancelCommandIndex">The index of the command you want to use as the cancel command. This is the command that fires when users press the ESC key.</param>
            <param name="commands">An array of commands that appear in the command bar of the message dialog. These commands makes the dialog actionable.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowAsync(System.String,System.String,Cauldron.XAML.MessageBoxImage,Cauldron.XAML.CauldronUICommand,Cauldron.XAML.CauldronUICommand)">
            <summary>
            Begins an asynchronous operation showing a dialog.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="messageBoxImage">The icon to show on the dialog</param>
            <param name="command1">A command that appear in the command bar of the message dialog. This command makes the dialog actionable.</param>
            <param name="command2">A command that appear in the command bar of the message dialog. This command makes the dialog actionable.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowAsync(System.String,System.String,System.UInt32,System.UInt32,Cauldron.XAML.MessageBoxImage,Cauldron.XAML.CauldronUICommandCollection)">
            <summary>
            Begins an asynchronous operation showing a dialog.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="defaultCommandIndex">The index of the command you want to use as the default. This is the command that fires by default when users press the ENTER key.</param>
            <param name="cancelCommandIndex">The index of the command you want to use as the cancel command. This is the command that fires when users press the ESC key.</param>
            <param name="messageBoxImage">The icon to show on the dialog</param>
            <param name="commands">An array of commands that appear in the command bar of the message dialog. These commands makes the dialog actionable.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowException(System.Exception)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK and a copy button
            </summary>
            <param name="e">The exception to show on the dialog</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowException(System.Exception,System.String)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK and a copy button
            </summary>
            <param name="e">The exception to show on the dialog</param>
            <param name="format">Additional information to be displayed to the user. The exception is added in {0}</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowOKAsync(System.String)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK button.
            </summary>
            <param name="content">The message to be displayed to the user.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowOKAsync(System.String,System.String)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowOKAsync(System.String,System.String,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="command">The action associated with the OK Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowOKAsync(System.String,System.String,Cauldron.XAML.MessageBoxImage)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="messageBoxImage">The icon to show on the dialog</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowOKCancelAsync(System.String,System.String,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK and cancel button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandOK">The action associated with the OK Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowOKCancelAsync(System.String,System.String,System.Action,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with an OK and cancel button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandOK">The action associated with the OK Command</param>
            <param name="commandCancel">The action associated with the cancel Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowYesNoAsync(System.String,System.String)">
            <summary>
            Begins an asynchronous operation showing a dialog with a Yes and No button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <returns>Returns true if the user has selected Yes, otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowYesNoAsync(System.String,System.String,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with a Yes and No button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandYes">The action associated with the Yes Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowYesNoAsync(System.String,System.String,System.Action,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with a Yes and No button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandYes">The action associated with the Yes Command</param>
            <param name="commandNo">The action associated with the No Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowYesNoCancelAsync(System.String,System.String,System.Action,System.Action,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with a Yes, No and Cancel button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandYes">The action associated with the Yes Command</param>
            <param name="commandNo">The action associated with the No Command</param>
            <param name="commandCancel">The action associated with the Cancel Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cauldron.XAML.MessageDialogEx.ShowYesNoCancelAsync(System.String,System.String,System.Action,System.Action)">
            <summary>
            Begins an asynchronous operation showing a dialog with a Yes, No and Cancel button.
            </summary>
            <param name="title">The title to display on the dialog, if any.</param>
            <param name="content">The message to be displayed to the user.</param>
            <param name="commandYes">The action associated with the Yes Command</param>
            <param name="commandNo">The action associated with the No Command</param>
            <returns>An object that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Cauldron.XAML.RelayCommand">
            <summary>
            Implements the <see cref="T:Cauldron.XAML.IRelayCommand"/> interface
            </summary>
        </member>
        <member name="F:Cauldron.XAML.RelayCommand._IsEnabled">
            <summary>
            Backing field for IsEnabled Property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.RelayCommand"/> class
            </summary>
            <param name="action">The action that is invoked on command execution</param>
            <param name="canexecute">A delegate that indicates if the command can be executed or not. Should return true if the command can be executed.</param>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.RelayCommand"/> class
            </summary>
            <param name="action">The action that is invoked on command execution</param>
        </member>
        <member name="E:Cauldron.XAML.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="E:Cauldron.XAML.RelayCommand.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.RelayCommand.IsEnabled">
            <summary>
            Gets or sets a value that indicates if the assiociated control is disabled or enabled
            </summary>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand.RefreshCanExecute">
            <summary>
            Triggers the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event and forces the control to refresh the execution state
            </summary>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand.OnCanExecuteChanged">
            <summary>
            Occures if the <see cref="M:Cauldron.XAML.RelayCommand.RefreshCanExecute"/> method has been invoked
            </summary>
        </member>
        <member name="T:Cauldron.XAML.RelayCommand`1">
            <summary>
            Implements the <see cref="T:Cauldron.XAML.IRelayCommand"/> interface
            <para/>
            <see cref="T:Cauldron.XAML.RelayCommand`1"/> will pass the <see cref="T:System.EventArgs"/> from the control's event to the action delegate
            </summary>
        </member>
        <member name="F:Cauldron.XAML.RelayCommand`1._IsEnabled">
            <summary>
            Backing field for IsEnabled Property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.RelayCommand`1"/> class
            </summary>
            <param name="action">The action that is invoked on command execution</param>
            <param name="canexecute">A delegate that indicates if the command can be executed or not. Should return true if the command can be executed.</param>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.RelayCommand`1"/> class
            </summary>
            <param name="action">The action that is invoked on command execution</param>
        </member>
        <member name="E:Cauldron.XAML.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="E:Cauldron.XAML.RelayCommand`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.RelayCommand`1.IsEnabled">
            <summary>
            Gets or sets a value that indicates if the assiociated control is disabled or enabled
            </summary>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand`1.RefreshCanExecute">
            <summary>
            Triggers the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event and forces the control to refresh the execution state
            </summary>
        </member>
        <member name="M:Cauldron.XAML.RelayCommand`1.OnCanExecuteChanged">
            <summary>
            Occures if the <see cref="M:Cauldron.XAML.RelayCommand.RefreshCanExecute"/> method has been invoked
            </summary>
        </member>
        <member name="F:Cauldron.XAML.TextBlockInline.TextBlockInlineProperty">
            <summary>
            Identifies the TextBlockInline dependency property
            </summary>
        </member>
        <member name="M:Cauldron.XAML.TextBlockInline.GetTextBlockInline(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the value of TextBlockInline
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <returns>The value of the attached property</returns>
        </member>
        <member name="M:Cauldron.XAML.TextBlockInline.SetTextBlockInline(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            Sets the value of the TextBlockInline attached property
            </summary>
            <param name="obj"><see cref="T:Windows.UI.Xaml.DependencyObject" /> with the attached property</param>
            <param name="value">The new value to set</param>
        </member>
        <member name="T:Cauldron.XAML.ValueConverterBase">
            <summary>
            Provides a base class for <see cref="T:Windows.UI.Xaml.Data.Binding"/> value converters.
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ValueConverterBase.GetLanguage">
            <summary>
            Gets the ISO 639-1 two-letter code for the language of the current System.Globalization.CultureInfo.
            </summary>
            <returns>The ISO 639-1 two-letter code for the language of the current System.Globalization.CultureInfo.</returns>
        </member>
        <member name="M:Cauldron.XAML.ValueConverterBase.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="M:Cauldron.XAML.ValueConverterBase.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value.If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="M:Cauldron.XAML.ValueConverterBase.OnConvert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="M:Cauldron.XAML.ValueConverterBase.OnConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Occures if a value is converted
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language to use in the converter.</param>
            <returns>A converted value.If the method returns null, the valid null value is used.</returns>
            <exception cref="T:System.NotImplementedException">Always throws <see cref="T:System.NotImplementedException"/>. This method is not implemented.</exception>
        </member>
        <member name="T:Cauldron.XAML.ViewAttribute">
            <summary>
            Specifies a view for a the viewmodel
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ViewAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.ViewAttribute"/>
            </summary>
            <param name="viewType">The type of view to associate with the viewmodel</param>
        </member>
        <member name="P:Cauldron.XAML.ViewAttribute.ViewType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the view
            </summary>
        </member>
        <member name="T:Cauldron.XAML.ViewModels.IDialogViewModel`1">
            <summary>
            Represents a view model with a return value.
            </summary>
            <typeparam name="TResult">The type of the result value</typeparam>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.IDialogViewModel`1.Result">
            <summary>
            Gets or sets the result value
            </summary>
        </member>
        <member name="T:Cauldron.XAML.ViewModels.IDialogViewModel">
            <summary>
            Represents a view model with a return value.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.IDialogViewModel.Title">
            <summary>
            Gets the title of the dialog
            </summary>
        </member>
        <member name="T:Cauldron.XAML.ViewModels.IFrameAware">
            <summary>
            Represents a view model that reacts to certain events in the NavigationFrame (UWP) or Window (Desktop).
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.IFrameAware.Activated">
            <summary>
            Occures if the page or window is activated
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.IFrameAware.CanClose">
            <summary>
            Occures if a page or window is about to close. If returns false, the closing will be cancelled.
            </summary>
            <returns>Should return true if page or window can be closed.</returns>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.IFrameAware.Deactivated">
            <summary>
            Occures if the page or window is deactivated
            </summary>
        </member>
        <member name="T:Cauldron.XAML.ViewModels.INavigable">
            <summary>
            Represents a navigable view model
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.INavigable.OnNavigatedFrom(Cauldron.XAML.Navigation.NavigationInfo)">
            <summary>
            Invoked immediately after the Page is unloaded and is no longer the current source of a parent Frame.
            </summary>
            <param name="args">The arguments of the navigation</param>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.INavigable.OnNavigatedTo(Cauldron.XAML.Navigation.NavigationInfo)">
            <summary>
            Invoked when the Page is loaded and becomes the current source of a parent Frame.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.INavigable.OnNavigatingFrom(Cauldron.XAML.Navigation.NavigatingInfo)">
            <summary>
            Invoked immediately before the Page is unloaded and is no longer the current source of a parent Frame.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Cauldron.XAML.ViewModels.IPrelaunchAware">
            <summary>
            Represents a viewmodel that is aware of application prelaunch
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.IPrelaunchAware.AppIsVisible">
            <summary>
            Occures if the app becomes visible when it is prelaunched
            </summary>
        </member>
        <member name="T:Cauldron.XAML.ViewModels.ISizeAware">
            <summary>
            Represents a view model that is aware of the window sizing
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.ISizeAware.SizeChanged(System.Double,System.Double)">
            <summary>
            Occures if the window size has changed
            </summary>
            <param name="width">The new width of the window</param>
            <param name="height">Thw new height of the window</param>
        </member>
        <member name="T:Cauldron.XAML.ViewModels.IViewModel">
            <summary>
            Defines a ViewModel
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.IViewModel.Dispatcher">
            <summary>
            Gets the <see cref="P:Cauldron.XAML.ViewModels.IViewModel.Dispatcher"/> this <see cref="T:Cauldron.Core.DispatcherEx"/> is associated with.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.IViewModel.Id">
            <summary>
            Gets the unique Id of the view model
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.IViewModel.IsLoading">
            <summary>
            Gets or sets a value that indicates if the viewmodel is loading
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.IViewModel.OnException(System.Exception)">
            <summary>
            Centralized error handling
            </summary>
            <param name="e">The <see cref="T:System.Exception"/> that occured</param>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.IViewModel.RaiseNotifyBehaviourInvoke(System.String)">
            <summary>
            Invokes the <see cref="E:Cauldron.XAML.INotifyBehaviourInvocation.BehaviourInvoke"/> event
            </summary>
            <param name="behaviourName"></param>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.IViewModel.RaisePropertyChanged(System.String)">
            <summary>
            Invokes the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event
            </summary>
            <param name="propertyName">The name of the property where the value change has occured</param>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.MessageDialogCommandViewModel.ButtonCommand">
            <summary>
            Gets the Button command
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.MessageDialogViewModel.CancelCommand">
            <summary>
            Gets the Cancel command
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.MessageDialogViewModel.EnterCommand">
            <summary>
            Gets the Enter command
            </summary>
        </member>
        <member name="T:Cauldron.XAML.ViewModels.ViewModelBase">
            <summary>
            Represents the base class of a ViewModel
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.ViewModelBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.ViewModels.ViewModelBase"/>
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.ViewModelBase.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.XAML.ViewModels.ViewModelBase"/>
            </summary>
            <param name="id">A unique identifier of the viewmodel</param>
        </member>
        <member name="E:Cauldron.XAML.ViewModels.ViewModelBase.BehaviourInvoke">
            <summary>
            Occures if a behaviour should be invoked
            </summary>
        </member>
        <member name="E:Cauldron.XAML.ViewModels.ViewModelBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.ViewModelBase.Dispatcher">
            <summary>
            Gets the <see cref="P:Cauldron.XAML.ViewModels.ViewModelBase.Dispatcher"/> this <see cref="T:Cauldron.Core.DispatcherEx"/> is associated with.
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.ViewModelBase.Id">
            <summary>
            Gets the unique Id of the view model
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.ViewModelBase.IsLoading">
            <summary>
            Gets or sets a value that indicates if the viewmodel is loading
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.ViewModelBase.MessageDialog">
            <summary>
            Gets the message dialog
            </summary>
        </member>
        <member name="P:Cauldron.XAML.ViewModels.ViewModelBase.Navigator">
            <summary>
            Gets the window navigator
            </summary>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.ViewModelBase.OnException(System.Exception)">
            <summary>
            Centralized error handling
            </summary>
            <param name="e">The <see cref="T:System.Exception"/> that occured</param>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.ViewModelBase.RaiseNotifyBehaviourInvoke(System.String)">
            <summary>
            Invokes the <see cref="E:Cauldron.XAML.ViewModels.ViewModelBase.BehaviourInvoke"/> event
            </summary>
            <param name="behaviourName">The name of the behaviour to invoke</param>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.ViewModelBase.RaisePropertyChanged(System.String)">
            <summary>
            Invokes the <see cref="E:Cauldron.XAML.ViewModels.ViewModelBase.PropertyChanged"/> event
            </summary>
            <param name="propertyName">The name of the property where the value change has occured</param>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.ViewModelBase.AfterRaiseNotifyPropertyChanged(System.String)">
            <summary>
            Occures after the event <see cref="E:Cauldron.XAML.ViewModels.ViewModelBase.PropertyChanged"/> has been invoked
            </summary>
            <param name="propertyName">The name of the property where the value change has occured</param>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.ViewModelBase.BeforeRaiseNotifyPropertyChanged(System.String)">
            <summary>
            Occured before the <see cref="E:Cauldron.XAML.ViewModels.ViewModelBase.PropertyChanged"/> event is invoked.
            </summary>
            <param name="propertyName">The name of the property where the value change has occured</param>
            <returns>Returns true if <see cref="M:Cauldron.XAML.ViewModels.ViewModelBase.RaisePropertyChanged(System.String)"/> should be cancelled. Otherwise false</returns>
        </member>
        <member name="M:Cauldron.XAML.ViewModels.ViewModelBase.OnDispose(System.Boolean)">
            <summary>
            Occures after <see cref="M:System.IDisposable.Dispose"/> has been invoked
            </summary>
            <param name="disposeManaged">true if managed resources requires disposing</param>
        </member>
        <member name="T:Cauldron.XAML.XAMLHelper">
            <summary>
            Provides helper methods for XAML
            </summary>
        </member>
        <member name="M:Cauldron.XAML.XAMLHelper.GetPropertyValueFromPath(System.Object,System.String)">
            <summary>
            Returns the value of the property described by the path.
            </summary>
            <param name="source">The object where to start finding the property</param>
            <param name="path">The path of the property separated by period (.)</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:Cauldron.XAML.XAMLHelper.GetSourceFromPath(System.Object,System.String)">
            <summary>
            Returns the source object of the property described by the path.
            </summary>
            <param name="source">The object where to start finding the property</param>
            <param name="path">The path of the property separated by period (.)</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:Cauldron.XAML.XAMLHelper.ParseToInline(System.String)">
            <summary>
            Reads the XAML input in the specified text string and returns a <see cref="T:Windows.UI.Xaml.Documents.Span"/> wrapping the an object that
            corresponds to the root of the specified markup.
            </summary>
            <param name="xamlText">The input XAML, as a single text string.</param>
            <returns>The <see cref="T:Windows.UI.Xaml.Documents.Span"/> root of the created object tree.</returns>
        </member>
        <member name="M:Cauldron.XAML.Cauldron_UWP_XAML_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Cauldron_UWP_XAML_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:Cauldron.XAML.Cauldron_UWP_XAML_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="T:Cauldron.Core.Output">
            <summary>
            Provides a set of methods that help to output information of a compiled dll
            </summary>
        </member>
        <member name="T:Cauldron.IEnumerableExtensions.Extensions">
            <summary>
            Provides usefull extensions for <see cref="T:System.Collections.IEnumerable"/>
            </summary>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Any_(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.IEnumerable"/> whose elements to apply the predicate to</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>True if any elements in the source sequence pass the test in the specified predicate, otherwise false</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Any_(System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> to check for emptiness.</param>
            <returns>True if the source sequence contains any elements, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Count_(System.Collections.IEnumerable)">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/></param>
            <returns>The total count of items in the <see cref="T:System.Collections.IEnumerable"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.ElementAt_(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the element at the defined index
            </summary>
            <param name="ienumerable">The enumerable that contains the element</param>
            <param name="index">The index of the element</param>
            <returns>The element with the specified index</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ienumerable"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.Except_(System.Collections.IEnumerable,System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="items">The <see cref="T:System.Collections.IEnumerable"/> that may contain the object to remove</param>
            <param name="itemToExcept">The object to remove from the <see cref="T:System.Collections.IEnumerable"/>. The value can be null for reference types.</param>
            <returns>A new instance of the <see cref="T:System.Collections.IEnumerable"/> without the item specified by <paramref name="itemToExcept"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.FirstElement_(System.Collections.IEnumerable)">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> to return the first element of.</param>
            <returns>The first element in the specified sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.SequenceEqual_(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their types
            </summary>
            <param name="first">An <see cref="T:System.Collections.IEnumerable"/> to compare to second.</param>
            <param name="second">An <see cref="T:System.Collections.IEnumerable"/> to compare to the first sequence.</param>
            <returns>
            true if the two source sequences are of equal length and their corresponding
            elements are equal according to the default equality comparer for their type;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">first or second is null.</exception>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.ToArray_``1(System.Collections.IEnumerable)">
            <summary>
            Converts a <see cref="T:System.Collections.IEnumerable"/> to an array
            </summary>
            <typeparam name="T">The type of elements the <see cref="T:System.Collections.IEnumerable"/> contains</typeparam>
            <param name="items">The <see cref="T:System.Collections.IEnumerable"/> to convert</param>
            <returns>An array of <typeparamref name="T"/></returns>
        </member>
        <member name="M:Cauldron.IEnumerableExtensions.Extensions.ToList_``1(System.Collections.IEnumerable)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="target">The <see cref="T:System.Collections.IEnumerable"/> to create a <see cref="T:System.Collections.Generic.List`1"/> from.</param>
            <returns>A System.Collections.Generic.List`1 that contains elements from the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
    </members>
</doc>
