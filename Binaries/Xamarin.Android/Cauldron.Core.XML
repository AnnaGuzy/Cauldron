<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cauldron.Core</name>
    </assembly>
    <members>
        <member name="T:Windows.Storage.ApplicationData">
            <summary>
            Provides access to the application data store
            </summary>
        </member>
        <member name="P:Windows.Storage.ApplicationData.Current">
            <summary>
            Current instance of the <see cref="T:Windows.Storage.ApplicationData"/>
            </summary>
        </member>
        <member name="P:Windows.Storage.ApplicationData.LocalFolder">
            <summary>
            Gets the root folder in the local app data store.
            </summary>
        </member>
        <member name="P:Windows.Storage.ApplicationData.RoamingFolder">
            <summary>
            Gets the root folder in the roaming app data store.
            </summary>
        </member>
        <member name="P:Windows.Storage.ApplicationData.TemporaryFolder">
            <summary>
            Gets the root folder in the temporary app data store.
            </summary>
        </member>
        <member name="T:Windows.Storage.KnownFolders">
            <summary>
            Provides access to common locations that contain user content.
            </summary>
        </member>
        <member name="P:Windows.Storage.KnownFolders.DocumentsLibrary">
            <summary>
            Gets the Documents library. The Documents library is not intended for general use.
            </summary>
        </member>
        <member name="P:Windows.Storage.KnownFolders.MusicLibrary">
            <summary>
            Gets the Music library.
            </summary>
        </member>
        <member name="P:Windows.Storage.KnownFolders.PictureLibrary">
            <summary>
            Gets the Pictures library.
            </summary>
        </member>
        <member name="P:Windows.Storage.KnownFolders.VideosLibrary">
            <summary>
            Gets the Videos library.
            </summary>
        </member>
        <member name="T:Windows.UI.Core.CoreDispatcherPriority">
            <summary>
            Describes the priorities at which operations can be invoked
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreDispatcherPriority.Low">
            <summary>
            Low priority. Delegates are processed when the window's main thread is idle and there is
            no input pending in the queue.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreDispatcherPriority.Normal">
            <summary>
            Normal priority. Delegates are processed in the order they are scheduled.
            </summary>
        </member>
        <member name="F:Windows.UI.Core.CoreDispatcherPriority.High">
            <summary>
            High priority. Delegates are invoked immediately for all synchronous requests.
            Asynchronous requests are queued and processed before any other request type.
            </summary>
        </member>
        <member name="T:Cauldron.Core.CreationCollisionOption">
            <summary>
            Specifies what to do if a file or folder with the specified name already exists in the current folder when you create a new file or folder.
            </summary>
        </member>
        <member name="F:Cauldron.Core.CreationCollisionOption.GenerateUniqueName">
            <summary>
            Automatically append a number to the base of the specified name if the file or
            folder already exists.For example, if MyFile.txt already exists, then the new
            file is named MyFile (2).txt. If MyFolder already exists, then the new folder
            is named MyFolder (2).
            </summary>
        </member>
        <member name="F:Cauldron.Core.CreationCollisionOption.ReplaceExisting">
            <summary>
            Replace the existing item if the file or folder already exists.
            </summary>
        </member>
        <member name="F:Cauldron.Core.CreationCollisionOption.FailIfExists">
            <summary>
            Raise an exception of type System.Exception if the file or folder already exists.Methods
            that don't explicitly pass a value from the CreationCollisionOption enumeration
            use the FailIfExists value as the default when you try to create, rename, copy,
            or move a file or folder.
            </summary>
        </member>
        <member name="F:Cauldron.Core.CreationCollisionOption.OpenIfExists">
            <summary>
            Return the existing item if the file or folder already exists.
            </summary>
        </member>
        <member name="T:Cauldron.Core.Extensions.ExtensionsDirectoryInfo">
            <summary>
            Provides usefull extension methods for the <see cref="T:System.IO.DirectoryInfo"/> class
            </summary>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsDirectoryInfo.CopyAsync(System.IO.FileInfo,System.IO.DirectoryInfo,System.String)">
            <summary>
            Creates a copy of the file in the specified folder and renames the copy.
            </summary>
            <param name="source">The file to be copied</param>
            <param name="destinationFolder">The destination folder where the copy of the file is created.</param>
            <param name="desiredNewName">The new name for the copy of the file created in the <paramref name="destinationFolder"/></param>
            <returns>
            When this method completes, it returns a <see cref="T:System.IO.FileInfo"/> that represents the copy
            of the file created in the <paramref name="destinationFolder"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="desiredNewName"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="desiredNewName"/> is empty</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsDirectoryInfo.CopyAsync(System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>
            Creates a copy of the file in the specified folder.
            </summary>
            <param name="source">The file to be copied</param>
            <param name="destinationFolder">The destination folder where the copy of the file is created.</param>
            <returns>
            When this method completes, it returns a <see cref="T:System.IO.FileInfo"/> that represents the copy
            of the file created in the <paramref name="destinationFolder"/>.
            </returns>
            <exception cref="T:System.IO.IOException">If file already exists. Only on <see cref="F:Cauldron.Core.NameCollisionOption.FailIfExists"/></exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsDirectoryInfo.CopyAsync(System.IO.FileInfo,System.IO.DirectoryInfo,System.String,Cauldron.Core.NameCollisionOption)">
            <summary>
            Creates a copy of the file in the specified folder and renames the copy. This
            method also specifies what to do if a file with the same name already exists
            in the destination folder.
            </summary>
            <param name="source">The file to be copied</param>
            <param name="destinationFolder">The destination folder where the copy of the file is created.</param>
            <param name="desiredNewName">The new name for the copy of the file created in the <paramref name="destinationFolder"/>.</param>
            <param name="option">
            One of the enumeration values that determines how to handle the collision if
            a file with the specified <paramref name="desiredNewName"/> already exists in the destination folder.
            </param>
            <returns>
            When this method completes, it returns a <see cref="T:System.IO.FileInfo"/> that represents the copy
            of the file created in the <paramref name="destinationFolder"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="desiredNewName"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="desiredNewName"/> is empty</exception>
            <exception cref="T:System.IO.IOException">If file already exists. Only on <see cref="F:Cauldron.Core.NameCollisionOption.FailIfExists"/></exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsDirectoryInfo.CreateFileAsync(System.IO.DirectoryInfo,System.String,Cauldron.Core.CreationCollisionOption)">
            <summary>
            Creates a new file in the current folder. This method also specifies what to do if a file with the same name already exists in the current folder.
            </summary>
            <param name="directoryInfo">The <see cref="T:System.IO.DirectoryInfo"/> representing the current folder</param>
            <param name="desiredName">The name of the new file to create in the current folder.</param>
            <param name="options">One of the enumeration values that determines how to handle the collision if a file with the specified desiredName already exists in the current folder.</param>
            <returns>When this method completes, it returns a <see cref="T:System.IO.FileInfo"/> that represents the new file.></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="desiredName"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="desiredName"/> is empty</exception>
            <exception cref="T:System.IO.IOException">If file already exists. Only on <see cref="F:Cauldron.Core.CreationCollisionOption.FailIfExists"/></exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsDirectoryInfo.CreateFileAsync(System.IO.DirectoryInfo,System.String)">
            <summary>
            Creates a new file with the specified name in the current folder.
            </summary>
            <param name="directoryInfo">The <see cref="T:System.IO.DirectoryInfo"/> representing the current folder</param>
            <param name="desiredName">The name of the new file to create in the current folder.</param>
            <returns>When this method completes, it returns a <see cref="T:System.IO.FileInfo"/> that represents the new file.></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="desiredName"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="desiredName"/> is empty</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsDirectoryInfo.CreateFolderAsync(System.IO.DirectoryInfo,System.String)">
            <summary>
            Creates a new subfolder with the specified name in the current folder.
            </summary>
            <param name="directoryInfo">The <see cref="T:System.IO.DirectoryInfo"/> representing the current folder</param>
            <param name="desiredName">The name of the new subfolder to create in the current folder.</param>
            <returns>When this method completes, it returns a <see cref="T:System.IO.DirectoryInfo"/> that represents the new subfolder.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsDirectoryInfo.CreateFolderAsync(System.IO.DirectoryInfo,System.String,Cauldron.Core.CreationCollisionOption)">
            <summary>
            Creates a new subfolder with the specified name in the current folder. This method
            also specifies what to do if a subfolder with the same name already exists in
            the current folder.
            </summary>
            <param name="directoryInfo">The <see cref="T:System.IO.DirectoryInfo"/> representing the current folder</param>
            <param name="desiredName">The name of the new subfolder to create in the current folder.</param>
            <param name="options">
            One of the enumeration values that determines how to handle the collision if
             a subfolder with the specified desiredName already exists in the current folder.
            </param>
            <returns>When this method completes, it returns a <see cref="T:System.IO.DirectoryInfo"/> that represents the new subfolder.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsDirectoryInfo.GetFileAsync(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets the file with the specified name from the current folder.
            </summary>
            <param name="directoryInfo">The <see cref="T:System.IO.DirectoryInfo"/> representing the current folder</param>
            <param name="name">The name (or path relative to the current folder) of the file to get.</param>
            <returns>When this method completes successfully, it returns a <see cref="T:System.IO.FileInfo"/> that represents the specified file.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsDirectoryInfo.GetUniqueDirectoryName(System.String)">
            <summary>
            Checks if the filename of <paramref name="path"/> exist. If the file already exists, an indexer will be added to the filename to make it unique.
            </summary>
            <param name="path">The path and filename of a file</param>
            <returns>A unique and valied path and filename</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsDirectoryInfo.GetUniqueFilename(System.String)">
            <summary>
            Checks if the filename of <paramref name="path"/> exist. If the file already exists, an indexer will be added to the filename to make it unique.
            </summary>
            <param name="path">The path and filename of a file</param>
            <returns>A unique and valied path and filename</returns>
        </member>
        <member name="T:Cauldron.Core.Extensions.ExtensionsFileInfo">
            <summary>
            Provides usefull extension methods for the <see cref="T:System.IO.FileInfo"/> class
            </summary>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsFileInfo.DeleteAsync(System.IO.FileInfo)">
            <summary>
            Deletes the current file.
            </summary>
            <param name="file">The file to delete</param>
            <returns>No object or value is returned by this method when it completes.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsFileInfo.GetDateModifiedAsync(System.IO.FileInfo)">
            <summary>
            Gets the timestamp of the last time the file was modified.
            </summary>
            <param name="file">The file</param>
            <returns>The timestamp.</returns>
        </member>
        <member name="T:Cauldron.Core.Extensions.ExtensionsXmlDocument">
            <summary>
            Provides usefull extension methods for <see cref="T:System.Xml.XmlDocument"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsXmlDocument.Contains(System.Xml.XmlNode,System.String)">
            <summary>
            Checks if the node contains a child with the name defined by <paramref name="nodeName"/>
            </summary>
            <param name="target">The node to check</param>
            <param name="nodeName">The name of the node to find</param>
            <returns>Returns true if found; otherwise false</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsXmlDocument.Contains(System.Xml.XmlAttributeCollection,System.String)">
            <summary>
            Checks if an attribute with the name defined by <paramref name="attributeName"/> exists in the attrbute collection
            </summary>
            <param name="target">The attribute collection to check</param>
            <param name="attributeName">The name of the attribute to find</param>
            <returns>Returns true if found; otherwise false</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsXmlDocument.CountOf(System.Xml.XmlNodeList,System.Xml.XmlNodeType)">
            <summary>
            Counts the number of childs that have the type defined by <paramref name="type"/>
            </summary>
            <param name="target">The starting node</param>
            <param name="type">The type of child to count</param>
            <returns>Returns the number of children</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsXmlDocument.GetNode(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Gets a node defined by <paramref name="nodePath"/>
            </summary>
            <param name="target">The starting node</param>
            <param name="nodePath">A node path separated by /</param>
            <param name="attributeName">The name of the attribute to retrieve</param>
            <param name="attributeValue">The value that the attribute <paramref name="attributeName"/> should have</param>
            <returns>Returns the node if successfull; otherwise null</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsXmlDocument.GetNodeInnerText(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets the concatenated values of the node and all its child nodes.
            </summary>
            <param name="target">The xml document</param>
            <param name="nodePath">A node path separated by /</param>
            <returns>The concatenated values of the node and all its child nodes.</returns>
        </member>
        <member name="T:Cauldron.Core.Extensions.Extensions">
            <summary>
            Provides usefull extension methods
            </summary>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Compress(System.String)">
            <summary>
            Compresses a utf8 encoded string using gzip
            </summary>
            <param name="data">The data to be compressed</param>
            <returns>The compressed string as byte array</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="data"/> is empty</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Compress(System.Byte[])">
            <summary>
            Compresses data using gzip
            </summary>
            <param name="data">The data to compress</param>
            <returns>The compressed data in bytes</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Concat``1(``0[][])">
            <summary>
            Concatenates a jagged array to a one-dimensional array
            </summary>
            <param name="arrays">The jagged array</param>
            <returns>An one dimensional array</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether a specified substring occurs within this string.
            </summary>
            <param name="text">The string to seek from.</param>
            <param name="value">The string to seek. </param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search. </param>
            <returns>True if the value parameter occurs within this string, or if value is the empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Copy(System.String)">
            <summary>
            Creates a new instance of System.String with the same value as a specified System.String.
            </summary>
            <param name="value">The string to copy.</param>
            <returns>A new string with the same value as str.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Returns distinct elements from a sequence by using a selector to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="selector">An expression used to determines whether the specified object are equal</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.EnclosedIn(System.String,System.String,System.String)">
            <summary>
            Gets the string enclosed by two strings
            </summary>
            <param name="target">The string that contains the string to be retrieved</param>
            <param name="start"></param>
            <param name="end"></param>
            <returns>The enclosed string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.FillWithRandomValues(System.Runtime.InteropServices.GCHandle,System.Int32)">
            <summary>
            Replaces the values of data in memory with random values. The GC handle will be freed.
            </summary>
            <remarks>Will only work on <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned"/></remarks>
            <param name="target"></param>
            <param name="targetLength"></param>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Foreach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T">The type that is contained in the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="collection">The collection to perform the action on</param>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>Returns <paramref name="collection"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.GetBytes(System.Byte[],System.UInt32)">
            <summary>
            Gets a specified length of bytes.
            <para />
            If the specified length <paramref name="length"/> is longer than the source array the source array will be returned instead.
            </summary>
            <param name="target">The Array that contains the data to copy.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <returns>Returns an array of bytes</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="length"/> is 0</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.GetBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets a specified length of bytes
            </summary>
            <param name="target">The Array that contains the data to copy.</param>
            <param name="startingPosition">A 32-bit integer that represents the index in the sourceArray at which copying begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="startingPosition"/> and <paramref name="length"/> are out of range</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.GetHash(System.String)">
            <summary>
            Get the hash representing the string. The hash algorithm used is <see cref="F:Cauldron.Core.HashAlgorithms.Md5"/>
            </summary>
            <param name="target">The string to hash</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.GetHash(System.String,Cauldron.Core.HashAlgorithms)">
            <summary>
            Get the hash representing the string
            </summary>
            <param name="target">The string to hash</param>
            <param name="algorithm">The hash algortihm to use</param>
            <returns>The hash value</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.GetLines(System.String)">
            <summary>
            Splits a string into lines
            </summary>
            <param name="value">The string to be slitted</param>
            <returns>The lines of the string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.GetStackTrace(System.Exception)">
            <summary>
            Gets the stacktrace of the exception and the inner exceptions recursively
            </summary>
            <param name="e">The exception with the stack trace</param>
            <returns>A string representation of the stacktrace</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.GetTarget``1(System.WeakReference{``0})">
            <summary>
            Retrieves the target object referenced by the current <see cref="T:System.WeakReference`1"/> object
            <para/>
            Returns null if the target is not available
            </summary>
            <typeparam name="T">The type of the object referenced.</typeparam>
            <param name="weakReference">The current <see cref="T:System.WeakReference`1"/> object</param>
            <returns>Contains the target object, if it is available; otherwise null</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.GetTypes(System.Object[])">
            <summary>
            Retrieves the types of the object array
            </summary>
            <param name="objs">The object array to get the type from</param>
            <returns>An array of types that represents the object array</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.IndexOf(System.Byte[],System.Byte[])">
            <summary>
            Searches for the specified byte array and returns the zero-based index of the first
            occurrence within the entire <see cref="T:System.Array"/>
            </summary>
            <param name="data">The <see cref="T:System.Array"/> that could contain <paramref name="value"/></param>
            <param name="value">The object to locate in the <see cref="T:System.Array"/>. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:System.Array"/>, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.IndexOf``1(``0[],``0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the entire <see cref="T:System.Array"/>
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Array"/></typeparam>
            <param name="target">The <see cref="T:System.Array"/> that could contain <paramref name="value"/></param>
            <param name="value">The object to locate in the <see cref="T:System.Array"/>. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:System.Array"/>, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.IsBase64String(System.String)">
            <summary>
            Checkes if the string is encoded in Base64.
            </summary>
            <param name="str">The string to check</param>
            <returns>True if the string is base 64 encoded; otherwise false</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.IsNotNull``1(``0,System.Action{``0})">
            <summary>
            Checks if the value is null. If not, it will invoke <paramref name="action"/>
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="value">The value to check</param>
            <param name="action">The action to invoke if <paramref name="value"/> is not null</param>
            <returns>the instance of the value</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.IsNotNull``2(``0,System.Func{``0,``1})">
            <summary>
            Checks if the value is null. If not, it will invoke <paramref name="func"/>
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <typeparam name="TResult">The return type</typeparam>
            <param name="value">The value to check</param>
            <param name="func">The func to invoke if <paramref name="value"/> is not null</param>
            <returns>The result of <paramref name="value"/></returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            collection of type <see cref="T:System.String"/>, using the specified <paramref name="separator"/> between each member.
            </summary>
            <param name="source">A collection that contains the strings to concatenate.</param>
            <param name="separator">
            The string to use as a <paramref name="separator"/>. <paramref name="separator"/> is included in the returned string
            only if values has more than one element.
            </param>
            <returns>
            A string that consists of the members of values delimited by the <paramref name="separator"/> string.
            If values has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Join(System.Object[],System.String)">
            <summary>
            Concatenates the elements of an object array, using the specified <paramref name="separator"/> between each element.
            </summary>
            <param name="source">An array that contains the elements to concatenate.</param>
            <param name="separator">
            The string to use as a <paramref name="separator"/>. <paramref name="separator"/> is included in the returned string
            only if values has more than one element.
            </param>
            <returns>
            A string that consists of the elements of values delimited by the <paramref name="separator"/> string.
            If values is an empty array, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified <paramref name="separator"/> between each member.
            </summary>
            <param name="source">A collection that contains the objects to concatenate.</param>
            <param name="separator">
            The string to use as a <paramref name="separator"/>. <paramref name="separator"/> is included in the returned string
            only if values has more than one element.
            </param>
            <returns>
            A string that consists of the members of values delimited by the <paramref name="separator"/> string.
            If values has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Join(System.String[],System.String)">
            <summary>
            Concatenates all the elements of a string array, using the specified <paramref name="separator"/> between each element.
            </summary>
            <param name="source">An array that contains the elements to concatenate.</param>
            <param name="separator">
            The string to use as a <paramref name="separator"/>. <paramref name="separator"/> is included in the returned string
            only if values has more than one element.
            </param>
            <returns>
            A string that consists of the elements in value delimited by the <paramref name="separator"/> string.
            If value is an empty array, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Left(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the left side of a string.
            </summary>
            <param name="source"><see cref="T:System.String"/> expression from which the leftmost characters are returned.</param>
            <param name="length">
            Numeric expression indicating how many characters to return. If 0, a zero-length string (<see cref="F:System.String.Empty"/>) is returned.
            If greater than or equal to the number of characters in str, the entire string is returned.
            </param>
            <returns>Returns a string containing a specified number of characters from the left side of a string.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.LowerFirstCharacter(System.String)">
            <summary>
            Replaces the first char of a string against a lower cased char
            </summary>
            <param name="target">The string to replace</param>
            <returns>Returns a new string with a lower cased first character</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Move``1(System.Collections.ObjectModel.ObservableCollection{``0},``0,System.Int32)">
            <summary>
            Moves the specified item to a new location in the collection
            </summary>
            <typeparam name="T">The Type of item contained in the collection</typeparam>
            <param name="source">The source collection that contains the item</param>
            <param name="entry">The item to move</param>
            <param name="relativeIndex">The new position of the item relativ to its current position.</param>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.OrderBy``1(System.Array,System.Func{``0,System.Boolean})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <param name="array">A sequence of values to order.</param>
            <typeparam name="TElements">Der Typ der Elemente von source.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.ParseQueryString(System.Uri)">
            <summary>
            Parses a query string into a NameValueCollection using UTF8 encoding.
            </summary>
            <param name="uri">The uri to parse.</param>
            <returns>A dictionary of query parameters and values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.RandomPick``1(``0[])">
            <summary>
            Picks a random element from the given array
            </summary>
            <typeparam name="T">The type of element in the array</typeparam>
            <param name="array">The array to pick a random element from</param>
            <returns>The randomly picked element</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads all characters from the current position to the end of the stream.
            </summary>
            <param name="stream">The stream to read</param>
            <param name="encoding">The character encoding to use.</param>
            <returns>The rest of the stream as a string, from the current position to the end. If the current position is at the end of the stream, returns an empty string ("").</returns>
            <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.ReadToEnd(System.IO.Stream)">
            <summary>
            Reads all characters from the current position to the end of the stream.
            </summary>
            <param name="stream">The stream to read</param>
            <returns>The rest of the stream as a string, from the current position to the end. If the current position is at the end of the stream, returns an empty string ("").</returns>
            <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Replace(System.String,System.Char[],System.Char)">
            <summary>
            Replaces a series of chars <paramref name="oldChars"/> with a single char <paramref name="newChar"/>
            </summary>
            <param name="value">The string with the chars to replace</param>
            <param name="oldChars">The old chars to be replaced by <paramref name="newChar"/></param>
            <param name="newChar">The new char that replaces the old chars</param>
            <returns>A copy of the original string with the chars defined by <paramref name="oldChars"/> replaced by <paramref name="newChar"/>.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Right(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the right side of a string.
            </summary>
            <param name="source"><see cref="T:System.String"/> expression from which the rightmost characters are returned.</param>
            <param name="length">
            Numeric expression indicating how many characters to return. If 0, a zero-length string (<see cref="F:System.String.Empty"/>) is returned.
            If greater than or equal to the number of characters in str, the entire string is returned.
            </param>
            <returns>Returns a string containing a specified number of characters from the right side of a string.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.RunSync``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Runs the <see cref="T:System.Threading.Tasks.Task"/> synchronously on the default <see cref="T:System.Threading.Tasks.TaskScheduler"/>.
            </summary>
            <typeparam name="TResult">The type of the result produced by this <see cref="T:System.Threading.Tasks.Task"/></typeparam>
            <param name="task">The task instance</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.RunSync(System.Threading.Tasks.Task)">
            <summary>
            Runs the <see cref="T:System.Threading.Tasks.Task"/> synchronously on the default <see cref="T:System.Threading.Tasks.TaskScheduler"/>.
            </summary>
            <param name="task">The task instance</param>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.SliceColumn``1(``0[0:,0:],System.Int32)">
            <summary>
            Returns the elements of the first dimension of a multidimensional array
            </summary>
            <typeparam name="T">The type that is contained in the array</typeparam>
            <param name="array">The array to get the dimension from</param>
            <param name="column">The second dimension of the array</param>
            <returns>The second dimension of the array depending on the <paramref name="column"/></returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.SliceRow``1(``0[0:,0:],System.Int32)">
            <summary>
            Returns the elements of the second dimension of a multidimensional array
            </summary>
            <typeparam name="T">The type that is contained in the array</typeparam>
            <param name="array">The array to get the dimension from</param>
            <param name="row">The first dimension of the array</param>
            <returns>The second dimension of the array depending on the <paramref name="row"/></returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Swap``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Swaps two elements in a collection
            </summary>
            <typeparam name="T">The type that is contained in the collection</typeparam>
            <param name="collection">The collection where the elements should be swaped</param>
            <param name="a">The first element to swap</param>
            <param name="b">The second element to swap with</param>
            <returns>The collection</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.TryDispose(System.Object)">
            <summary>
            Tries to performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            <para/>
            This will dispose an object if it implements the <see cref="T:System.IDisposable"/> interface.
            </summary>
            <param name="context">The object to dispose</param>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.TryEncode(System.Byte[])">
            <summary>
            Tries to encode a byte array to a string by detecting its encoding.
            <para/>
            It will try to detect the encoding for for UTF-7, UTF-8/16/32 (bom, no bom, little and big endian), and local default codepage, and potentially other codepages.
            </summary>
            <param name="data">The byte array that contains the string to be encoded</param>
            <returns>The encoded string</returns>
            <example>
            <code>
            var text = Assemblies.GetManifestResource("embedded-text.txt").TryEncode();
            </code>
            </example>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.Uncompress(System.Byte[])">
            <summary>
            Uncompresses a gzip compressed data
            </summary>
            <param name="compressedData">The compressed data to uncompress</param>
            <returns>The uncompressed string</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="compressedData"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.Extensions.UncompressString(System.Byte[])">
            <summary>
            Uncompresses a gzip compressed string
            </summary>
            <param name="compressedData">The compressed data to uncompress</param>
            <returns>The uncompressed data</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="compressedData"/> is null</exception>
        </member>
        <member name="T:Cauldron.Core.Extensions.ExtensionsConvertions">
            <summary>
            Provides usefull extension methods
            </summary>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.As``1(System.Object)">
             <summary>
             Performs a cast between compatible reference types. If a convertion is not possible then null is returned.
             <para/>
             Tries to use the implicit and explicit operators if exists when convertion with 'as' returns null.
             </summary>
             <typeparam name="T">The <see cref="T:System.Type"/> to convert to</typeparam>
             <param name="source">The object to convert</param>
             <returns>The object casted to <typeparamref name="T"/></returns>
             <example>
             In the following code example, the 'As' extension is used to convert a returned object via the implicit operator.
             <code>
             public interface IFoo
             {
                 string Name {get;}
                 string Description {get;}
             }
            
             public class Foo : IFoo
             {
                 public string Name {get; set;}
                 public string Description {get; set;}
             }
            
             public class Bar : BarBase
             {
                 private IFoo internalFoo;
            
                 private Bar(IFoo foo)
                 {
                     this.internalFoo = foo;
                 }
            
                 public void DoSomeStuff()
                 {
                 }
            
                 public void DoSomeOtherStuff()
                 {
                 }
            
                 public static implicit operator Bar(Foo value) => new Boo(value);
                 public static implicit operator Foo(Bar value) => value.internalFoo;
             }
            
             public class SomeOtherClass
             {
                 public IFoo GetFooFromSomewhere(string fooId) => new Foo { Name = "A Foo", Description = "This is the foo you are looking for." };
             }
             </code>
             The code can be called like following:
             <code>
             var bar = someOtherClassInstance.GetFooFromSomewhere("fooThatINeed").As&lt;Bar&gt;();
             </code>
             </example>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.IDictionary`2"/> to a <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary to wrap.</param>
            <returns>A new instance of <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.Convert``1(System.String)">
            <summary>
            Converts a string to the type defined by <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type to convert the string to</typeparam>
            <param name="value">The string value to convert</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.Convert``1(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Converts a string to the type defined by <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type to convert the string to</typeparam>
            <param name="value">The string value to convert</param>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="value"/>.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.Convert(System.String,System.Type)">
            <summary>
            Converts a string to the type defined by <paramref name="targetType"/>
            </summary>
            <param name="value">The string value to convert</param>
            <param name="targetType">The type to convert the string to</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.Convert(System.String,System.Type,System.Globalization.NumberFormatInfo)">
            <summary>
            Converts a string to the type defined by <paramref name="targetType"/>
            </summary>
            <param name="value">The string value to convert</param>
            <param name="targetType">The type to convert the string to</param>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="value"/>.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.Convert(System.String,Cauldron.Core.Encodings,Cauldron.Core.Encodings)">
            <summary>
            Converts a string from a encoding to another encoding
            </summary>
            <param name="source">The string to convert</param>
            <param name="from">The source strings encoding</param>
            <param name="to">The target encoding</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.Convert(System.Byte[],Cauldron.Core.Encodings,Cauldron.Core.Encodings)">
            <summary>
            Converts a string represented by a byte array from a encoding to another encoding
            </summary>
            <param name="source">The string to convert</param>
            <param name="from">The source strings encoding</param>
            <param name="to">The target encoding</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ConvertEscapeSequences(System.String)">
            <summary>
            Converts the readable escaped chars in a string to its equivalent char. This includes simple-escape-sequences such as \' \" \\ \0 \a \b \f \n \r \t \v
            </summary>
            <param name="source">The source string to convert</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ConvertToBytes(System.String,Cauldron.Core.Encodings,Cauldron.Core.Encodings)">
            <summary>
            Converts a string from a encoding to another encoding
            </summary>
            <param name="source">The string to convert</param>
            <param name="from">The source strings encoding</param>
            <param name="to">The target encoding</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToArray(System.Collections.IEnumerable,System.Type)">
            <summary>
            Converts a <see cref="T:System.Collections.IEnumerable"/> to an array
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> to convert</param>
            <param name="elementType">The element type contained in the <see cref="T:System.Collections.IEnumerable"/></param>
            <returns>An array of <paramref name="elementType"/></returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToBase64String(System.String)">
            <summary>
            Converts a string to its equivalent string representation that is encoded with base-64 digits.
            </summary>
            <param name="source">The string to convert</param>
            <returns>The string representation, in base 64</returns>
            <exception cref="T:System.ArgumentNullException">source string is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToBool(System.String)">
            <summary>
            Converts a string to bool.
            <para/>
            This will first try to compare the string to "true" and then to "false". If both fails then it will
            use <see cref="M:System.Boolean.TryParse(System.String,System.Boolean@)"/> to parse the string to bool. If that also fails
            then the string will be compared to "1".
            </summary>
            <param name="target">The value to convert</param>
            <returns>Returns true if the string is equivalent to true; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToByte(System.String)">
            <summary>
            Converts the value to a byte
            If convertion fails the value will always be 0
            </summary>
            <param name="target">The value to convert</param>
            <returns>The byte value of the string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToBytes(System.UInt32)">
            <summary>
            Converts the value to a byte array
            </summary>
            <param name="target">The value to convert</param>
            <returns>The <paramref name="target"/> as an array of bytes</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToBytes(System.Int32)">
            <summary>
            Converts the value to a byte array
            </summary>
            <param name="target">The value to convert</param>
            <returns>The <paramref name="target"/> as an array of bytes</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToBytes(System.Int64)">
            <summary>
            Converts the value to a byte array
            </summary>
            <param name="target">The value to convert</param>
            <returns>The <paramref name="target"/> as an array of bytes</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToBytes(System.Double)">
            <summary>
            Converts the value to a byte array
            </summary>
            <param name="target">The value to convert</param>
            <returns>The <paramref name="target"/> as an array of bytes</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToBytes(System.Single)">
            <summary>
            Converts the value to a byte array
            </summary>
            <param name="target">The value to convert</param>
            <returns>The <paramref name="target"/> as an array of bytes</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToBytesAsync(System.IO.Stream)">
            <summary>
            Converts a <see cref="T:System.IO.Stream"/> to <see cref="T:System.Byte"/> array. If the stream is not seekable, then this will use <see cref="M:System.IO.StreamReader.ReadToEndAsync"/> to get the stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to convert</param>
            <returns>An array of bytes</returns>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="stream"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToChar(System.String)">
            <summary>
            Converts the value to a char
            If convertion fails the value will always be '\0'
            </summary>
            <param name="target">The value to convert</param>
            <returns>The char value of the string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToDecimal(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Decimal"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a decimal that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToDecimal(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Decimal"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a decimal that represents the converted string</returns>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="target"/>.</param>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToDecimalUS(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Decimal"/>  using the en-US number format
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a decimal that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToDouble(System.String)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.
            if the string content is "nan" then a <see cref="F:System.Double.NaN"/> is returned.
            </summary>
            <param name="target">A string that contains a number to convert.</param>
            <returns> A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="target"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToDouble(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.
            if the string content is "nan" then a <see cref="F:System.Double.NaN"/> is returned.
            </summary>
            <param name="target">A string that contains a number to convert.</param>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="target"/>.</param>
            <returns> A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="target"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToDoubleUS(System.String)">
            <summary>
            Converts the string representation of a number in the en-US format to its double-precision floating-point number equivalent.
            if the string content is "nan" then a <see cref="F:System.Double.NaN"/> is returned.
            </summary>
            <param name="target">A string that contains a number to convert.</param>
            <returns> A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="target"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToFloat(System.String)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.
            if the string content is "nan" then a <see cref="F:System.Double.NaN"/> is returned.
            </summary>
            <param name="target">A string that contains a number to convert.</param>
            <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="target"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToFloat(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.
            if the string content is "nan" then a <see cref="F:System.Double.NaN"/> is returned.
            </summary>
            <param name="target">A string that contains a number to convert.</param>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="target"/>.</param>
            <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="target"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToFloatUS(System.String)">
            <summary>
            Converts the string representation of a number in a the en-US format format to its single-precision floating-point number equivalent.
            if the string content is "nan" then a <see cref="F:System.Double.NaN"/> is returned.
            </summary>
            <param name="target">A string that contains a number to convert.</param>
            <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="target"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToInteger(System.Byte[])">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="target">An array of bytes.</param>
            <returns>A 32-bit signed integer formed by four bytes</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToInteger(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Int32"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns an int that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToInteger(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Int32"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns an int that represents the converted string</returns>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="target"/>.</param>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToIntegerUS(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Int32"/> using the en-US number format
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns an int that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToKeyedCollection``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            Creates a <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to a specified key selector function.
            </summary>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> that contains values of <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToLong(System.Byte[])">
            <summary>
            Returns a long converted from eight bytes.
            </summary>
            <param name="target">An array of bytes.</param>
            <returns>A long formed by eight bytes</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="target"/>has less than 8 bytes</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToLong(System.Object)">
            <summary>
            Tries to convert a <see cref="T:System.Object"/> to an <see cref="T:System.Int64"/>
            </summary>
            <param name="target">The object to convert</param>
            <returns>Returns a long that represents the converted object</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToLong(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Int64"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a long that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToLong(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Int64"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a long that represents the converted string</returns>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="target"/>.</param>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToLongUS(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Int64"/> using the en-US number format
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a long that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToShort(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Int16"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a short that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToShort(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Int16"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a short that represents the converted string</returns>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="target"/>.</param>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToShortUS(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.Int16"/>  using the en-US number format
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a short that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToString(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.
            This also takes into account that <paramref name="source"/> can be an inline text for the TextBlock.
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used as <see cref="T:System.IFormatProvider"/>
            </summary>
            <param name="source">The formatted string</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args"/>.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToString(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.
            This also takes into account that <paramref name="source"/> can be an inline text for the TextBlock
            </summary>
            <param name="source">The formatted string</param>
            <param name="provider">An object that supplies culture-specific formatting information</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args"/>.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToStringEx(System.Object,System.String)">
            <summary>
            Converts the value of this instance to its equivalent string representation, using the specified format.
            <para/>
            The following custom formatter are already added: <see cref="T:Cauldron.Core.Formatters.ByteSizeFormatter"/>, <see cref="T:Cauldron.Core.Formatters.MetricUnitFormatter"/>
            </summary>
            <param name="obj">The object to convert to string</param>
            <param name="format">A standard or custom format string</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToStringEx(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the value of this instance to its equivalent string representation, using the specified format.
            <para/>
            The following custom formatter are already added: <see cref="T:Cauldron.Core.Formatters.ByteSizeFormatter"/>, <see cref="T:Cauldron.Core.Formatters.MetricUnitFormatter"/>
            </summary>
            <param name="obj">The object to convert to string</param>
            <param name="format">A standard or custom format string</param>
            <param name="cultureInfo">An object that supplies culture-specific formatting information</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToUInteger(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt32"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns an uint that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToUInteger(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt32"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns an uint that represents the converted string</returns>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="target"/>.</param>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToUIntegerUS(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt32"/> using the en-US number format
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns an uint that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToULong(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt64"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a ulong that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToULong(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt64"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a ulong that represents the converted string</returns>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="target"/>.</param>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToULongUS(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt64"/>  using the en-US number format
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a ulong that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToUshort(System.Byte[])">
            <summary>
            Returns a 16-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="target">An array of bytes.</param>
            <returns>A 16-bit signed integer formed by four bytes</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToUshort(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt16"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns an int that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToUshort(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt16"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns an int that represents the converted string</returns>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="target"/>.</param>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToUShort(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt16"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a ushort that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToUShort(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt16"/>
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a ushort that represents the converted string</returns>
            <param name="numberformat">An object that supplies culture-specific formatting information about <paramref name="target"/>.</param>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToUshortUS(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt16"/> using the en-US number format
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns an int that represents the converted string</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsConvertions.ToUShortUS(System.String)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> to an <see cref="T:System.UInt16"/>  using the en-US number format
            </summary>
            <param name="target">The string to convert</param>
            <returns>Returns a ushort that represents the converted string</returns>
        </member>
        <member name="T:Cauldron.Core.Extensions.ExtensionsFileIO">
            <summary>
            Provides helper methods for reading, writing and checking files in Windows Desktop applications and Universal Windows Plattform.
            </summary>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsFileIO.ExistsAsync(System.IO.DirectoryInfo,System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="folder">The folder where the file resides</param>
            <param name="filename">The filename of the file to check.</param>
            <returns>
            When this method completes, it returns true if the file exists, otherwise false.
            If the caller does not have sufficient
            permissions to read the specified file, no exception is thrown and the method
            returns false regardless of the existence of path.
            </returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsFileIO.ReadBytesAsync(System.IO.FileInfo)">
            <summary>
            Reads the contents of the specified file and returns a byte array.
            </summary>
            <param name="file">The file to read.</param>
            <returns>When this method completes, it returns an array of bytes that represents the contents of the file.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsFileIO.ReadTextAsync(System.IO.FileInfo)">
            <summary>
            Reads the contents of the specified file and returns text.
            </summary>
            <param name="file">The file to read.</param>
            <returns>When this method completes successfully, it returns the contents of the file as a text string.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsFileIO.ReadTextAsync(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Reads the contents of the specified file and returns text.
            </summary>
            <param name="file">The file to read.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>When this method completes successfully, it returns the contents of the file as a text string.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsFileIO.ReadTextAsync(System.IO.DirectoryInfo,System.String)">
            <summary>
            Reads the contents of the specified file and returns text.
            </summary>
            <param name="folder">The folder where the file resides</param>
            <param name="filename">The name of the file to read.</param>
            <returns>When this method completes successfully, it returns the contents of the file as a text string.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsFileIO.ReadTextAsync(System.IO.DirectoryInfo,System.String,System.Text.Encoding)">
            <summary>
            Reads the contents of the specified file and returns text.
            </summary>
            <param name="folder">The folder where the file resides</param>
            <param name="filename">The name of the file to read.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>When this method completes successfully, it returns the contents of the file as a text string.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsFileIO.WriteBytesAsync(System.IO.FileInfo,System.Byte[])">
            <summary>
            Writes an array of bytes of data to the specified file.
            </summary>
            <param name="file">The file that the byte is written to.</param>
            <param name="content">The array of bytes to write.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsFileIO.WriteTextAsync(System.IO.FileInfo,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="file">The file to write to.</param>
            <param name="content">The string to write to the file.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsFileIO.WriteTextAsync(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="file">The file to write to.</param>
            <param name="content">The string to write to the file.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>No object or value is returned when this method completes.</returns>
        </member>
        <member name="T:Cauldron.Core.Extensions.ExtensionsReflection">
            <summary>
            Provides a set of extensions used in reflection
            </summary>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.AreReferenceAssignable(System.Type,System.Type)">
            <summary>
            Returns a value that indicates whether the specified type can be assigned to the current type.
            </summary>
            <param name="type">The current type that will be assigned to</param>
            <param name="toBeAssigned">The type to check.</param>
            <returns>true if the specified type can be assigned to this type; otherwise, false.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified type using the constructor that best matches the specified parameters.
            </summary>
            <param name="type">The type of object to create.</param>
            <param name="args">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A reference to the newly created object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null</exception>
            <exception cref="T:Cauldron.Core.CreateInstanceIsAnInterfaceException"><paramref name="type"/> is an interface</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.CreateInstance(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Creates an instance of the specified type using the constructor
            </summary>
            <param name="ctor">The constructor use to construct the instance</param>
            <param name="args">
            An array of arguments that match in number, order, and type the parameters of
            the constructor to invoke. If args is an empty array or null, the constructor
            that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>A reference to the newly created object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ctor"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetChildrenType(System.Type)">
            <summary>
            Returns the type of T in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> implementation
            </summary>
            <param name="type">The <see cref="T:System.Type"/> with the <see cref="T:System.Collections.Generic.IEnumerable`1"/> implementation</param>
            <returns>The type of T in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> implementation</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetCustomAttribute``2(``1)">
            <summary>
            Gets the attribute of an enum member
            </summary>
            <typeparam name="TAttib">The attribute to retrieve</typeparam>
            <typeparam name="TEnum">The enum type</typeparam>
            <param name="enumValue">The enum member value</param>
            <returns>The custom attribute of the enum member.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="enumValue"/> is not an enum</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetDefaultInstance(System.Type)">
            <summary>
            Retrieves the default value for a given Type.
            <para/>
            http://stackoverflow.com/questions/2490244/default-value-of-a-type-at-runtime
            By Mark Jones
            </summary>
            <param name="type">The Type for which to get the default value</param>
            <returns>The default value for <paramref name="type"/></returns>
            <remarks>
            If a null Type, a reference Type, or a System.Void Type is supplied, this method always returns null.  If a value type
            is supplied which is not publicly visible or which contains generic parameters, this method will fail with an
            exception.
            </remarks>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetDictionaryKeyValueTypes(System.Type)">
            <summary>
            Returns the type of TKey and TValue in an <see cref="T:System.Collections.Generic.IDictionary`2"/> implementation
            </summary>
            <param name="type">The <see cref="T:System.Type"/> with the <see cref="T:System.Collections.Generic.IDictionary`2"/> implementation</param>
            <returns>The type of TKey and TValue in an <see cref="T:System.Collections.Generic.IDictionary`2"/> implementation</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetDisplayName``1(``0)">
            <summary>
            Returns the name value of the <see cref="T:Cauldron.Core.DisplayNameAttribute"/> of the enum member
            </summary>
            <typeparam name="TEnum">The enum type</typeparam>
            <param name="enumValue">The enum member value</param>
            <returns>The value of <see cref="P:Cauldron.Core.DisplayNameAttribute.DisplayName"/>. Returns null if the enum member has no <see cref="T:Cauldron.Core.DisplayNameAttribute"/></returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetFieldsEx(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Returns all the fields of the current Type, using the specified binding constraints including those of the base classes.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the fields</param>
            <param name="bindingFlags">A bitmask comprised of one or more BindingFlags that specify how the search is conducted.</param>
            <returns>A collection of <see cref="T:System.Reflection.FieldInfo"/> objects representing all the fields defined for the current Type.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetMethod(System.Type,System.String,System.Type[],System.Reflection.BindingFlags)">
            <summary>
            Returns all the methods of the current Type, using the specified binding constraints including those of the base classes.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the method</param>
            <param name="methodName">The name of the method to get</param>
            <param name="parameterTypes">The type of parameters the method should have</param>
            <param name="bindingFlags">A bitmask comprised of one or more BindingFlags that specify how the search is conducted.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> object representing the method defined for the current Type that match the specified binding constraint.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetMethodEx(System.Type,System.String,System.Type[],System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified public method whose parameters match the specified argument types.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the methods</param>
            <param name="methodName">The string containing the name of the method to get. </param>
            <param name="parameterTypes">The type of parameters the method should have</param>
            <param name="bindingFlags">A bitmask comprised of one or more BindingFlags that specify how the search is conducted.</param>
            <returns>An object representing the public method whose parameters match the specified argument types, if found; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="methodName"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetMethodsEx(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Returns all the methods of the current Type, using the specified binding constraints including those of the base classes.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the methods</param>
            <param name="bindingFlags">A bitmask comprised of one or more BindingFlags that specify how the search is conducted.</param>
            <returns>A collection of <see cref="T:System.Reflection.MethodInfo"/> objects representing all the methods defined for the current Type.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetPropertiesEx(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Returns all the properties of the current Type, using the specified binding constraints including those of the base classes.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the properties</param>
            <param name="bindingFlags">A bitmask comprised of one or more BindingFlags that specify how the search is conducted.</param>
            <returns>A collection of <see cref="T:System.Reflection.PropertyInfo"/> objects representing all the properties defined for the current Type.</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetPropertyEx(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets a specific property of the current Type.
            <para/>
            This method will try to find the exact property if an <see cref="T:System.Reflection.AmbiguousMatchException"/> occures
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the property</param>
            <param name="propertyName">The string containing the name of the property to get</param>
            <param name="bindingFlags">A bitmask comprised of one or more BindingFlags that specify how the search is conducted.</param>
            <returns>An object representing the public property with the specified name, if found; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetPropertyFromPath(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Tries to find a property defined by a path
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the property</param>
            <param name="path">The path of the property</param>
            <param name="bindingFlags">A bitmask comprised of one or more BindingFlags that specify how the search is conducted.</param>
            <returns>An object representing the public property with the specified name, if found; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetPropertyNonPublicValue``1(System.Object,System.String)">
            <summary>
            Searches for the specified property, using the specified binding constraints and returns its value.
            <para/>
            Default <see cref="T:System.Reflection.BindingFlags"/> are <see cref="F:System.Reflection.BindingFlags.Instance"/> and <see cref="F:System.Reflection.BindingFlags.NonPublic"/>
            </summary>
            <typeparam name="T">The property's return value type</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to retrieve the value from</param>
            <param name="propertyName">The string containing the name of the property to get. </param>
            <returns>The property value of the specified object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null</exception>
            <exception cref="T:System.NullReferenceException">The property defined by <paramref name="propertyName"/> was not found</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetPropertyValue``1(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified property, using the specified binding constraints and returns its value.
            </summary>
            <typeparam name="T">The property's return value type</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to retrieve the value from</param>
            <param name="propertyName">The string containing the name of the property to get. </param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.
            <para/>
            Zero, to return null.
            </param>
            <returns>The property value of the specified object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null</exception>
            <exception cref="T:System.NullReferenceException">The property defined by <paramref name="propertyName"/> was not found</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified property, using the specified binding constraints and returns its value.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to retrieve the value from</param>
            <param name="propertyName">The string containing the name of the property to get. </param>
            <param name="bindingFlags">
            A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.
            <para/>
            Zero, to return null.
            </param>
            <returns>The property value of the specified object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null</exception>
            <exception cref="T:System.NullReferenceException">The property defined by <paramref name="propertyName"/> was not found</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            Searches for the specified property, using the specified binding constraints and returns its value.
            <para/>
            Default <see cref="T:System.Reflection.BindingFlags"/> are <see cref="F:System.Reflection.BindingFlags.Instance"/> and <see cref="F:System.Reflection.BindingFlags.Public"/>
            </summary>
            <typeparam name="T">The property's return value type</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to retrieve the value from</param>
            <param name="propertyName">The string containing the name of the property to get. </param>
            <returns>The property value of the specified object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null</exception>
            <exception cref="T:System.NullReferenceException">The property defined by <paramref name="propertyName"/> was not found</exception>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.ImplementsInterface``1(System.Type)">
            <summary>
            Checks if the type has implemented the defined interface
            </summary>
            <typeparam name="T">The type of interface to look for</typeparam>
            <param name="type">The type that may implements the interface <typeparamref name="T"/></param>
            <exception cref="T:System.ArgumentException">The type <typeparamref name="T"/> is not an interface</exception>
            <returns>True if the <paramref name="type"/> has implemented the interface <typeparamref name="T"/></returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.ImplementsInterface(System.Type,System.Type)">
            <summary>
            Checks if the type has implemented the defined interface
            </summary>
            <param name="type">The type that may implements the interface</param>
            <param name="typeOfInterface">The type of interface to look for</param>
            <exception cref="T:System.ArgumentException">The type <paramref name="typeOfInterface"/> is not an interface</exception>
            <returns>True if the <paramref name="type"/> has implemented the interface <paramref name="typeOfInterface"/></returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.ImplementsInterface``1(System.Reflection.TypeInfo)">
            <summary>
            Checks if the type has implemented the defined interface
            </summary>
            <typeparam name="T">The type of interface to look for</typeparam>
            <param name="typeInfo">The type that may implements the interface <typeparamref name="T"/></param>
            <exception cref="T:System.ArgumentException">The type <typeparamref name="T"/> is not an interface</exception>
            <returns>True if the <paramref name="typeInfo"/> has implemented the interface <typeparamref name="T"/></returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.ImplementsInterface(System.Reflection.TypeInfo,System.Type)">
            <summary>
            Checks if the type has implemented the defined interface
            </summary>
            <param name="typeInfo">The type that may implements the interface <paramref name="typeOfInterface"/></param>
            <param name="typeOfInterface">The type of interface to look for</param>
            <exception cref="T:System.ArgumentException">The type <paramref name="typeOfInterface"/> is not an interface</exception>
            <returns>True if the <paramref name="typeInfo"/> has implemented the interface <paramref name="typeOfInterface"/></returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.IsCollectionOrList(System.Type)">
            <summary>
            Checks if the type implements the <see cref="T:System.Collections.ICollection"/> or <see cref="T:System.Collections.IList"/> interface
            </summary>
            <param name="type">The type to check</param>
            <returns>Returns true if the type is a collection or a list; otherwise false</returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.IsNullable(System.Type)">
            <summary>
            Gets a value indicating whether the current type is a <see cref="T:System.Nullable`1"/>
            </summary>
            <param name="target">The type to test</param>
            <returns>Returns true if the type is <see cref="T:System.Nullable`1"/></returns>
        </member>
        <member name="M:Cauldron.Core.Extensions.ExtensionsReflection.MatchesArgumentTypes(System.Reflection.MethodBase,System.Type[])">
            <summary>
            Returns true if the argument types defined by <paramref name="argumentTypes"/> matches with the argument types of <paramref name="method"/>
            </summary>
            <param name="method">The method info which has to be compared to</param>
            <param name="argumentTypes">The argument types that has to match to</param>
            <returns>true if the argument types of <paramref name="method"/> matches with the argument type defined by <paramref name="argumentTypes"/>; otherwise, false.</returns>
        </member>
        <member name="T:Cauldron.Core.LogonType">
            <summary>
            The type of logon operation to perform
            </summary>
        </member>
        <member name="F:Cauldron.Core.LogonType.Interactive">
            <summary>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on by a terminal server, remote shell, or similar process. This logon type has the additional expense of caching logon information for disconnected operations; therefore, it is inappropriate for some client/server applications, such as a mail server.
            </summary>
        </member>
        <member name="F:Cauldron.Core.LogonType.Network">
            <summary>
            This logon type is intended for high performance servers to authenticate plaintext passwords. The LogonUser function does not cache credentials for this logon type.
            </summary>
        </member>
        <member name="F:Cauldron.Core.LogonType.Batch">
            <summary>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without their direct intervention. This type is also for higher performance servers that process many plaintext authentication attempts at a time, such as mail or web servers.
            </summary>
        </member>
        <member name="F:Cauldron.Core.LogonType.Service">
            <summary>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </summary>
        </member>
        <member name="F:Cauldron.Core.LogonType.NetworkCleartext">
            <summary>
            This logon type preserves the name and password in the authentication package, which allows the server to make connections to other network servers while impersonating the client. A server can accept plaintext credentials from a client, call LogonUser, verify that the user can access the system across the network, and still communicate with other servers.
            </summary>
        </member>
        <member name="F:Cauldron.Core.LogonType.NewCredentials">
            <summary>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections. The new logon session has the same local identifier but uses different credentials for other network connections.
            </summary>
        </member>
        <member name="T:Cauldron.Core.NameCollisionOption">
            <summary>
            Specifies what to do if a file or folder with the specified name already exists in the current folder when you copy, move, or rename a file or folder.
            </summary>
        </member>
        <member name="F:Cauldron.Core.NameCollisionOption.GenerateUniqueName">
            <summary>
            Automatically append a number to the base of the specified name if the file or
            folder already exists. For example, if MyFile.txt already exists, then the new
            file is named MyFile (2).txt. If MyFolder already exists, then the new folder
            is named MyFolder (2).
            </summary>
        </member>
        <member name="F:Cauldron.Core.NameCollisionOption.ReplaceExisting">
            <summary>
            Replace the existing item if the file or folder already exists.
            </summary>
        </member>
        <member name="F:Cauldron.Core.NameCollisionOption.FailIfExists">
            <summary>
            Raise an exception of type System.Exception if the file or folder already exists.Methods
            that don't explicitly pass a value from the CreationCollisionOption enumeration
            use the FailIfExists value as the default when you try to create, rename, copy,
            or move a file or folder.
            </summary>
        </member>
        <member name="T:Cauldron.Core.Network">
            <summary>
            Provides properties and methods useful for gathering information about the network
            </summary>
            <summary>
            Provides properties and methods useful for gathering information about the network
            </summary>
        </member>
        <member name="P:Cauldron.Core.Network.IsNetworkAvailable">
            <summary>
            Get a value that indicates whether any network connection is available.
            <para/>
            Returns true if a network connection is available, othwise false
            </summary>
        </member>
        <member name="P:Cauldron.Core.Network.ConnectionType">
            <summary>
            Detect the current connection type
            </summary>
            <returns>
            2 for 2G, 3 for 3G, 4 for 4G
            100 for WiFi
            0 for unknown or not connected</returns>
        </member>
        <member name="P:Cauldron.Core.Network.HasInternetConnection">
            <summary>
            Gets a value that indicates if internet connection is available
            </summary>
        </member>
        <member name="M:Cauldron.Core.Network.Ping(System.String,System.UInt32)">
            <summary>
            Allows an application to determine whether a remote computer is accessible over the network.
            </summary>
            <param name="hostname">The hostname of the remote computer</param>
            <param name="port">The port to ping</param>
            <returns>An object that represents the ping results</returns>
        </member>
        <member name="T:Cauldron.Core.ViewOrientation">
            <summary>
            Defines the set of display orientation modes
            </summary>
        </member>
        <member name="F:Cauldron.Core.ViewOrientation.Landscape">
            <summary>
            The window is in landscape orientation, with the display width greater than the height.
            </summary>
        </member>
        <member name="F:Cauldron.Core.ViewOrientation.Portrait">
            <summary>
            The window is in portrait orientation, with the display height greater than the width.
            </summary>
        </member>
        <member name="T:Cauldron.Core.WebAuthenticationBrokerCallbackEventArgs">
            <summary>
            Contains data for the the <see cref="F:Cauldron.Core.WebAuthenticationBrokerWrapper.OnCallBack"/>
            </summary>
        </member>
        <member name="P:Cauldron.Core.WebAuthenticationBrokerCallbackEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the event as handled. A true value for Handled prevents most handlers along the event route from handling the same event again.
            </summary>
        </member>
        <member name="P:Cauldron.Core.WebAuthenticationBrokerCallbackEventArgs.ResponseData">
            <summary>
            Contains the protocol data when the operation successfully completes.
            </summary>
        </member>
        <member name="T:Cauldron.Core.WebAuthenticationBrokerWrapper">
            <summary>
            Provides a wrapper for the UWP WebAuthenticationBroker and the Desktop Authentication handling
            </summary>
            <summary>
            Provides a wrapper for the UWP WebAuthenticationBroker and the Desktop Authentication handling
            </summary>
        </member>
        <member name="F:Cauldron.Core.WebAuthenticationBrokerWrapper.OnCallBack">
            <summary>
            Occures if the callback was invoked
            </summary>
        </member>
        <member name="M:Cauldron.Core.WebAuthenticationBrokerWrapper.CallBack(System.String)">
            <summary>
            Invokes the <see cref="F:Cauldron.Core.WebAuthenticationBrokerWrapper.OnCallBack"/> event
            </summary>
            <param name="responseData">Contains the protocol data when the operation successfully completes.</param>
            <returns>True if the event was handled, otherwise false</returns>
        </member>
        <member name="M:Cauldron.Core.WebAuthenticationBrokerWrapper.AuthenticateAsync(System.Uri,System.Uri)">
            <summary>
            Starts the asynchronous authentication operation.
            On Desktop the method has a timeout of 1 minute
            </summary>
            <param name="uri">The starting URI of the web service. This URI must be a secure address of https://.</param>
            <param name="callbackUri">The callback uri of the authentification. This will be used to verify the result value.</param>
            <returns>Contains the protocol data when the operation successfully completes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="uri"/> is not a secure address</exception>
        </member>
        <member name="T:Cauldron.Core.WindowsMessages">
            <summary>
            Windows Messages.
            <para />
            Defined in winuser.h from Windows SDK v6.1
            <para />
            Documentation pulled from MSDN.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen.
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SYSCOLORCHANGE">
            <summary>
            This message is sent to all top-level windows when a change is made to a system color setting.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SETTINGCHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application.
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.COMMNOTIFY">
            <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.POWER">
            <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.INPUT_DEVICE_CHANGE">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.INPUT">
            <summary>
            The WM_INPUT message is sent to the window that is getting raw input.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.KEYFIRST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.UNICHAR">
            <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed.
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CTLCOLORMSGBOX">
            <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MOUSEFIRST">
            <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MOUSEHWHEEL">
            <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MOUSELAST">
            <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_SETCONTEXT">
            <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.WTSSESSION_CHANGE">
            <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.QUERYNEWPALETTE">
            <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.PALETTECHANGED">
            <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette.
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.APPCOMMAND">
            <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DWMCOMPOSITIONCHANGED">
            <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DWMNCRENDERINGCHANGED">
            <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other windowd go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CPL_LAUNCH">
            <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.CPL_LAUNCHED">
            <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.SYSTIMER">
            <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSHELL_ACCESSIBILITYSTATE">
            <summary>
            The accessibility state has changed.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSHELL_ACTIVATESHELLWINDOW">
            <summary>
            The shell should activate its main window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSHELL_APPCOMMAND">
            <summary>
            The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by that input.
            If the Shell procedure handles the WM_COMMAND message, it should not call CallNextHookEx. See the Return Value section for more information.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSHELL_GETMINRECT">
            <summary>
            A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSHELL_LANGUAGE">
            <summary>
            Keyboard language was changed or a new keyboard layout was loaded.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSHELL_REDRAW">
            <summary>
            The title of a window in the task bar has been redrawn.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSHELL_TASKMAN">
            <summary>
            The user has selected the task list. A shell application that provides a task list should return TRUE to prevent Windows from starting its task list.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSHELL_WINDOWCREATED">
            <summary>
            A top-level, unowned window has been created. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSHELL_WINDOWDESTROYED">
            <summary>
            A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSHELL_WINDOWACTIVATED">
            <summary>
            The activation has changed to a different top-level, unowned window.
            </summary>
        </member>
        <member name="F:Cauldron.Core.WindowsMessages.HSHELL_WINDOWREPLACED">
            <summary>
            A top-level window is being replaced. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="T:Cauldron.Core.ApplicationInfo">
            <summary>
            Provides methods to retrieve information about the application
            </summary>
        </member>
        <member name="P:Cauldron.Core.ApplicationInfo.ApplicationName">
            <summary>
            Gets the application name
            </summary>
        </member>
        <member name="P:Cauldron.Core.ApplicationInfo.ApplicationPath">
            <summary>
            Gets the full path of the application
            </summary>
        </member>
        <member name="P:Cauldron.Core.ApplicationInfo.ApplicationPublisher">
            <summary>
            Gets the application publisher name
            </summary>
        </member>
        <member name="P:Cauldron.Core.ApplicationInfo.ApplicationVersion">
            <summary>
            Gets a value representing the version of the application
            </summary>
        </member>
        <member name="P:Cauldron.Core.ApplicationInfo.Description">
            <summary>
            Gets the application description
            </summary>
        </member>
        <member name="P:Cauldron.Core.ApplicationInfo.ProductName">
            <summary>
            Gets the applications product name
            </summary>
        </member>
        <member name="P:Cauldron.Core.ApplicationInfo.TargetFramework">
            <summary>
            Gets the target framework the application was built against
            </summary>
        </member>
        <member name="T:Cauldron.Core.Assemblies">
            <summary>
            Contains methods and properties that helps to manage and gather <see cref="T:System.Reflection.Assembly"/> information
            </summary>
        </member>
        <member name="E:Cauldron.Core.Assemblies.LoadedAssemblyChanged">
            <summary>
            Occures if the assembly dictionary has changed
            </summary>
        </member>
        <member name="P:Cauldron.Core.Assemblies.AssemblyAndResourceNamesInfo">
            <summary>
            Gets a collection of <see cref="T:Cauldron.Core.AssemblyAndResourceNameInfo"/> that contains all fully qualified filename of embedded resources and thier corresponding <see cref="T:System.Reflection.Assembly"/>
            </summary>
        </member>
        <member name="P:Cauldron.Core.Assemblies.Classes">
            <summary>
            Gets a collection of classes loaded to the <see cref="T:Cauldron.Core.Assemblies"/>
            </summary>
        </member>
        <member name="P:Cauldron.Core.Assemblies.ExportedTypes">
            <summary>
            Gets a collection of exported types found in the loaded <see cref="T:System.Reflection.Assembly"/>
            </summary>
        </member>
        <member name="P:Cauldron.Core.Assemblies.Interfaces">
            <summary>
            Gets a colleciton of Interfaces found in the loaded <see cref="T:System.Reflection.Assembly"/>
            </summary>
        </member>
        <member name="P:Cauldron.Core.Assemblies.IsDebugging">
            <summary>
            Gets a value that determines if the <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/> or <see cref="M:System.Reflection.Assembly.GetCallingAssembly"/> is in debug mode
            </summary>
        </member>
        <member name="P:Cauldron.Core.Assemblies.Known">
            <summary>
            Gets a collection of <see cref="T:System.Reflection.Assembly"/> that is loaded to the <see cref="T:Cauldron.Core.Assemblies"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.Assemblies.GetFirstAssemblyWithResourceName(System.String)">
            <summary>
            Returns the first found <see cref="T:System.Reflection.Assembly"/> that contains an embedded resource with the given resource name
            </summary>
            <param name="resourceInfoName">The end of the fully qualified name of the embedded resource</param>
            <returns>The first found <see cref="T:System.Reflection.Assembly"/> otherwise returns null</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceInfoName"/> is null</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="resourceInfoName"/> parameter is an empty string ("").</exception>
        </member>
        <member name="M:Cauldron.Core.Assemblies.GetManifestResource(System.String)">
            <summary>
            Loads the specified manifest resource from this assembly.
            </summary>
            <param name="resourceInfoName">The end of the fully qualified name of the embedded resource</param>
            <returns>The manifest resource; or null if no resources were specified during compilation or if the resource is not visible to the caller.</returns>
            <exception cref="T:System.ArgumentNullException">The resourceInfoName parameter is null</exception>
            <exception cref="T:System.ArgumentException">The resourceInfoName parameter is an empty string</exception>
            <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="resourceInfoName"/> was not found.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="resourceInfoName"/> is not a valid assembly.</exception>
            <exception cref="T:System.NotImplementedException">Resource length is greater than <see cref="F:System.Int64.MaxValue"/></exception>
        </member>
        <member name="M:Cauldron.Core.Assemblies.GetManifestResource(System.Func{Cauldron.Core.AssemblyAndResourceNameInfo,System.Boolean})">
            <summary>
            Loads the specified manifest resource from this assembly.
            </summary>
            <param name="selector"></param>
            <returns>The manifest resource; or null if no resources were specified during compilation or if the resource is not visible to the caller.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> parameter is null</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="selector"/> parameter is an empty string</exception>
            <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
            <exception cref="T:System.NotImplementedException">Resource length is greater than <see cref="F:System.Int64.MaxValue"/></exception>
        </member>
        <member name="M:Cauldron.Core.Assemblies.GetManifestResourceInfo(System.String)">
            <summary>
            Returns information about how the given resource has been persisted.
            </summary>
            <param name="resourceInfoName">The end of the fully qualified name of the embedded resource</param>
            <returns>An object that is populated with information about the resource's topology, or null if the resource is not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceInfoName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="resourceInfoName"/> parameter is an empty string ("").</exception>
        </member>
        <member name="M:Cauldron.Core.Assemblies.GetManifestResources(System.String)">
            <summary>
            Returns all information about how the given resource has been persisted.
            </summary>
            <param name="resourceInfoName">The end of the fully qualified name of the embedded resource</param>
            <returns>An <see cref="T:System.Collections.Generic.List`1"/> object that is populated with information about the resource's topology</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceInfoName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="resourceInfoName"/> parameter is an empty string ("").</exception>
        </member>
        <member name="M:Cauldron.Core.Assemblies.GetTypeFromName(System.String)">
            <summary>
            Tries to find/identify a <see cref="T:System.Type"/> by its name
            </summary>
            <param name="typeName">The name of the <see cref="T:System.Type"/></param>
            <returns>The <see cref="T:System.Type"/> that is defined by the parameter <paramref name="typeName"/></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeName"/> parameter is null</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="typeName"/> parameter is an empty string</exception>
        </member>
        <member name="M:Cauldron.Core.Assemblies.GetTypesImplementsInterface``1">
            <summary>
            Returns all Types that implements the interface <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The interface <see cref="T:System.Type"/></typeparam>
            <returns>A colletion of <see cref="T:System.Type"/> that implements the interface <typeparamref name="T"/> otherwise null</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not an interface</exception>
        </member>
        <member name="M:Cauldron.Core.Assemblies.LoadAssembly(System.IO.DirectoryInfo,System.String)">
            <summary>
            Loads the contents of all assemblies that matches the specified filter
            </summary>
            <param name="directory">The directory where the assemblies are located</param>
            <param name="filter">
            The search string to match against the names of files in <paramref name="directory"/>. This parameter can contain a combination of
            valid literal path and wildcard (* and ?) characters, but doesn't support regular expressions.
            </param>
            <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded</exception>
        </member>
        <member name="M:Cauldron.Core.Assemblies.LoadAssembly(System.IO.FileInfo)">
            <summary>
            Loads the contents of an assembly file on the specified path.
            </summary>
            <param name="fileInfo">The path of filename of the assembly</param>
            <exception cref="T:System.NotSupportedException">The <paramref name="fileInfo"/> is a dynamic assembly.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="fileInfo"/> parameter is null.</exception>
            <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded</exception>
            <exception cref="T:System.IO.FileNotFoundException">The <paramref name="fileInfo"/> does not exist</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="fileInfo"/> is not a valid assembly.</exception>
        </member>
        <member name="T:Cauldron.Core.Assemblies.AssemblyAddedEventArgs">
            <summary>
            Contains data of the <see cref="E:Cauldron.Core.Assemblies.LoadedAssemblyChanged"/> event.
            </summary>
        </member>
        <member name="P:Cauldron.Core.Assemblies.AssemblyAddedEventArgs.Assembly">
            <summary>
            Gets the assembly that has been added to the known assembly collection
            </summary>
        </member>
        <member name="P:Cauldron.Core.Assemblies.AssemblyAddedEventArgs.Types">
            <summary>
            Gets a collection of types that is defined in the assembly
            </summary>
        </member>
        <member name="T:Cauldron.Core.AssemblyAndResourceNameInfo">
            <summary>
            Represents a resource info of an embedded resource with its corresponding <see cref="P:Cauldron.Core.AssemblyAndResourceNameInfo.Assembly"/>
            </summary>
        </member>
        <member name="P:Cauldron.Core.AssemblyAndResourceNameInfo.Assembly">
            <summary>
            Gets the Assembly that contains the embedded resource
            </summary>
        </member>
        <member name="P:Cauldron.Core.AssemblyAndResourceNameInfo.Filename">
            <summary>
            Gets the fully qualified name of the embedded resource
            </summary>
        </member>
        <member name="T:Cauldron.Core.AsyncHelper">
            <summary>
            Provides methods for Asyncronous operations
            </summary>
        </member>
        <member name="M:Cauldron.Core.AsyncHelper.NullGuard(System.Threading.Tasks.Task)">
            <summary>
            Insures that an awaited method always returns a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="task">The awaitable task</param>
            <returns>An awaitable task</returns>
            <example>
            <code>
            await AsyncHelper.NullGuard(instance.GetStuff()?.RemoveAllAsync());
            </code>
            </example>
        </member>
        <member name="M:Cauldron.Core.AsyncHelper.NullGuard``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Insures that an awaited method always returns a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <typeparam name="TResult">The type of the result produced by <see cref="T:System.Threading.Tasks.Task`1"/>.</typeparam>
            <param name="task">The awaitable task</param>
            <returns>An awaitable task</returns>
            <exception cref="T:System.NotSupportedException"><typeparamref name="TResult"/> is a value type</exception>
            <example>
            <code>
            var value = await AsyncHelper.NullGuard(instance.GetStuff()?.GetAllValuesAsync());
            </code>
            </example>
        </member>
        <member name="T:Cauldron.Core.Collections.ConcurrentKeyedCollection`2">
            <summary>
            Provides the abstract thread-safe base class for a collection whose keys are embedded in the values.
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of items in the collection.</typeparam>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2"/> class that uses the specified equality comparer.
            </summary>
            <param name="comparer">
            The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic
            interface to use when comparing keys, or null to use the default equality comparer
            for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.
            </param>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2"/> class that uses the specified equality comparer.
            </summary>
            <param name="comparer">
            The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic
            interface to use when comparing keys, or null to use the default equality comparer
            for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.
            </param>
            <param name="dictionaryCreationThreshold">
            The number of elements the collection can hold without creating a lookup dictionary
            (0 creates the lookup dictionary when the first item is added), or –1 to specify
            that a lookup dictionary is never created.
            </param>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2"/> class that uses the specified equality comparer.
            </summary>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollection`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollection`2"/>
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollection`2"/>.
            The collection itself cannot be null, but it can contain elements that are null,
            if type T is a reference type.
            </param>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollection`2.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollection`2"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollection`2.InsertItem(System.Int32,`1)">
            <summary>
            Inserts an element into the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollection`2"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollection`2.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollection`2"/>
            </summary>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollection`2.SetItem(System.Int32,`1)">
            <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
            <param name="index">The zero-based index of the item to be replaced.</param>
            <param name="item">The new item.</param>
        </member>
        <member name="T:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2">
            <summary>
            Provides an implementation of the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2"/> that can define the key on construction
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of items in the collection.</typeparam>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2.#ctor(System.Func{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2"/> class that uses the default equality comparer.
            </summary>
            <param name="keySelector">A function to extract a key from each element.</param>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2"/>
            class that uses the specified equality comparer and creates a lookup dictionary
            when the specified threshold is exceeded.
            </summary>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">
            The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic
            interface to use when comparing keys, or null to use the default equality comparer
            for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>
            </param>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2"/>
            class that uses the specified equality comparer and creates a lookup dictionary
            when the specified threshold is exceeded.
            </summary>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">
            The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic
            interface to use when comparing keys, or null to use the default equality comparer
            for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>
            </param>
            <param name="dictionaryCreationThreshold">
            The number of elements the collection can hold without creating a lookup dictionary
            (0 creates the lookup dictionary when the first item is added), or –1 to specify
            that a lookup dictionary is never created.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">dictionaryCreationThreshold is less than –1.</exception>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentKeyedCollectionEx`2.GetKeyForItem(`1)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="T:Cauldron.Core.Collections.ConcurrentList`1">
            <summary>
            Represents a thread-safe list of items that can be accessed by multiple threads concurrently.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> class that
            contains elements copied from the specified collection and has sufficient capacity
            to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="P:Cauldron.Core.Collections.ConcurrentList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
        </member>
        <member name="P:Cauldron.Core.Collections.ConcurrentList`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> has a fixed size.
            </summary>
        </member>
        <member name="P:Cauldron.Core.Collections.ConcurrentList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> is read-only.
            </summary>
        </member>
        <member name="P:Cauldron.Core.Collections.ConcurrentList`1.IsSynchronized">
             <summary>
            
             </summary>
        </member>
        <member name="P:Cauldron.Core.Collections.ConcurrentList`1.SyncRoot">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Cauldron.Core.Collections.ConcurrentList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than <see cref="P:Cauldron.Core.Collections.ConcurrentList`1.Count"/>.</exception>
        </member>
        <member name="P:Cauldron.Core.Collections.ConcurrentList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than <see cref="P:Cauldron.Core.Collections.ConcurrentList`1.Count"/>.</exception>
        </member>
        <member name="P:Cauldron.Core.Collections.ConcurrentList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than <see cref="P:Cauldron.Core.Collections.ConcurrentList`1.Count"/>.</exception>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="item">
            The object to be added to the end of the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            The value can be null for reference types.
            </param>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>.
            The collection itself cannot be null, but it can contain elements that are null,
            if type T is a reference type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            collection is null.
            </exception>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="item">The object to locate in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>. The value can be null for reference types.</param>
            <returns>true if item is found in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.Contains(System.Func{`0,System.Boolean})">
            <summary>
            Determines whether an element is in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>true if item is found in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.Contains(System.Object)">
            <summary>
            Determines whether an element is in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="value">The object to locate in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>. The value can be null for reference types.</param>
            <returns>true if item is found in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies a range of elements from the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>. The System.Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> is greater
            than the available space from arrayIndex to the end of the destination array.
            </exception>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies a range of elements from the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
            from <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>. The System.Array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> is greater
            than the available space from arrayIndex to the end of the destination array.
            </exception>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>.</returns>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="item">The object to remove from the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>. The value can be null for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/></returns>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an object to the end of the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="value">
            The object to be added to the end of the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            The value can be null for reference types.
            </param>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="value">The object to remove from the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>. The value can be null for reference types.</param>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the entire <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="item">The object to locate in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the entire <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="value">The object to locate in the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> at the specified index
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than <see cref="P:Cauldron.Core.Collections.ConcurrentList`1.Count"/>.</exception>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> at the specified index
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="value">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than <see cref="P:Cauldron.Core.Collections.ConcurrentList`1.Count"/>.</exception>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="item">The object to remove from the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>. The value can be null for reference types.</param>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A list of items that was removed from the collection</returns>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.</param>
            <exception cref="T:System.ArgumentNullException">match is null.</exception>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than 0.-or-index is equal to or greater than <see cref="P:Cauldron.Core.Collections.ConcurrentList`1.Count"/>.
            </exception>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>.</returns>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/></returns>
        </member>
        <member name="M:Cauldron.Core.Collections.ConcurrentList`1.ToList">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:Cauldron.Core.Collections.ConcurrentList`1"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> that contains elements from the input sequence.</returns>
        </member>
        <member name="T:Cauldron.Core.Collections.KeyedCollectionEx`2">
            <summary>
            Provides an implementation of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> that can define the key on construction
            </summary>
            <typeparam name="TKey">The type of keys in the collection.</typeparam>
            <typeparam name="TItem">The type of items in the collection.</typeparam>
        </member>
        <member name="M:Cauldron.Core.Collections.KeyedCollectionEx`2.#ctor(System.Func{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Collections.KeyedCollectionEx`2"/> class that uses the default equality comparer.
            </summary>
            <param name="keySelector">A function to extract a key from each element.</param>
        </member>
        <member name="M:Cauldron.Core.Collections.KeyedCollectionEx`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Collections.KeyedCollectionEx`2"/>
            class that uses the specified equality comparer and creates a lookup dictionary
            when the specified threshold is exceeded.
            </summary>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">
            The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic
            interface to use when comparing keys, or null to use the default equality comparer
            for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>
            </param>
        </member>
        <member name="M:Cauldron.Core.Collections.KeyedCollectionEx`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Collections.KeyedCollectionEx`2"/>
            class that uses the specified equality comparer and creates a lookup dictionary
            when the specified threshold is exceeded.
            </summary>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">
            The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> generic
            interface to use when comparing keys, or null to use the default equality comparer
            for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>
            </param>
            <param name="dictionaryCreationThreshold">
            The number of elements the collection can hold without creating a lookup dictionary
            (0 creates the lookup dictionary when the first item is added), or –1 to specify
            that a lookup dictionary is never created.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">dictionaryCreationThreshold is less than –1.</exception>
        </member>
        <member name="M:Cauldron.Core.Collections.KeyedCollectionEx`2.GetKeyForItem(`1)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="T:Cauldron.Core.ComparerUtils">
            <summary>
            Provides methods for comparing objects
            </summary>
        </member>
        <member name="M:Cauldron.Core.ComparerUtils.Equals``2(``0,``0,System.Func{``0,``1})">
            <summary>
            Determines whether <paramref name="a"/> is equal to <paramref name="b"/>
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <typeparam name="TValue">The values of the object used to compare them (e.g. Hash)</typeparam>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <param name="selector">The value selector which will be used for the compare</param>
            <returns>true if <paramref name="a"/> is equal to <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="M:Cauldron.Core.ComparerUtils.Equals(System.Object,System.Object)">
            <summary>
            Determines whether <paramref name="a"/> is equal to <paramref name="b"/>
            <para/>
            Checks reference equality first with <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            Then it checks all known types with the == operator, then with reflection on 'op_Equality' and as last resort uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/> to determine equality
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>true if <paramref name="a"/> is equal to <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="M:Cauldron.Core.ComparerUtils.GreaterThan(System.Object,System.Object)">
            <summary>
            Determines whether <paramref name="a"/> is greater than <paramref name="b"/>
            <para/>
            Checks reference equality first with <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            Then it checks all known types with the &gt; operator, then with reflection on 'op_GreaterThan'
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>true if <paramref name="a"/> is greater than <paramref name="b"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">Greater than operator cannot be applied</exception>
        </member>
        <member name="M:Cauldron.Core.ComparerUtils.GreaterThanOrEqual(System.Object,System.Object)">
            <summary>
            Determines whether <paramref name="a"/> is greater than or equal to <paramref name="b"/>
            <para/>
            Checks reference equality first with <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            Then it checks all known types with the &gt;= operator, then with reflection on 'op_GreaterThanOrEqual'
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>true if <paramref name="a"/> is greater than or equal to <paramref name="b"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">Operator cannot be applied</exception>
        </member>
        <member name="M:Cauldron.Core.ComparerUtils.LessThan(System.Object,System.Object)">
            <summary>
            Determines whether <paramref name="a"/> is less than <paramref name="b"/>
            <para/>
            Checks reference equality first with <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            Then it checks all known types with the &lt; operator, then with reflection on 'op_LessThan'
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>true if <paramref name="a"/> is less than <paramref name="b"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">Lesser than operator cannot be applied</exception>
        </member>
        <member name="M:Cauldron.Core.ComparerUtils.LessThanOrEqual(System.Object,System.Object)">
            <summary>
            Determines whether <paramref name="a"/> is less than or equal to <paramref name="b"/>
            <para/>
            Checks reference equality first with <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            Then it checks all known types with the &lt;= operator, then with reflection on 'op_LessThanOrEqual'
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>true if <paramref name="a"/> is less than or equal to <paramref name="b"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">Operator cannot be applied</exception>
        </member>
        <member name="M:Cauldron.Core.ComparerUtils.UnEquals``2(``0,``0,System.Func{``0,``1})">
            <summary>
            Determines whether <paramref name="a"/> is unequal to <paramref name="b"/>
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <typeparam name="TValue">The values of the object used to compare them (e.g. Hash)</typeparam>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <param name="selector">The value selector which will be used for the compare</param>
            <returns>true if <paramref name="a"/> is unequal to <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="M:Cauldron.Core.ComparerUtils.UnEquals(System.Object,System.Object)">
            <summary>
            Determines whether <paramref name="a"/> is unequal to <paramref name="b"/>
            <para/>
            Checks reference equality first with <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            Then it checks all known types with the != operator, then with reflection on 'op_Inequality' and as last resort uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/> to determine unequality
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>true if <paramref name="a"/> is unequal to <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="T:Cauldron.Core.ConnectionGenerationTypes">
            <summary>
            Representing a list of connection types
            </summary>
        </member>
        <member name="F:Cauldron.Core.ConnectionGenerationTypes.NotConnected">
            <summary>
            Not Connected
            </summary>
        </member>
        <member name="F:Cauldron.Core.ConnectionGenerationTypes.Unknown">
            <summary>
            Unknown connection
            </summary>
        </member>
        <member name="F:Cauldron.Core.ConnectionGenerationTypes._2G">
            <summary>
            2G
            </summary>
        </member>
        <member name="F:Cauldron.Core.ConnectionGenerationTypes._3G">
            <summary>
            3G
            </summary>
        </member>
        <member name="F:Cauldron.Core.ConnectionGenerationTypes._4G">
            <summary>
            LTE 4G
            </summary>
        </member>
        <member name="F:Cauldron.Core.ConnectionGenerationTypes.WLAN">
            <summary>
            WLAN
            </summary>
        </member>
        <member name="F:Cauldron.Core.ConnectionGenerationTypes.LAN">
            <summary>
            LAN
            </summary>
        </member>
        <member name="T:Cauldron.Core.CreateInstanceIsAnInterfaceException">
            <summary>
            Represents a exception that occures while creating an instance using an interface
            </summary>
        </member>
        <member name="M:Cauldron.Core.CreateInstanceIsAnInterfaceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.CreateInstanceIsAnInterfaceException"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Cauldron.Core.DateTimeUtils">
            <summary>
            Provides useful methods regarding <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.DateTimeUtils.FirstDateOfWeekISO8601(System.Int32,System.Int32)">
            <summary>
            Returns the <see cref="T:System.DateTime"/> representation of the year and week of year
            </summary>
            <param name="year">The year to convert</param>
            <param name="weekOfYear">The week of year to convert</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument <paramref name="weekOfYear"/> is more than the given year has weeks</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument <paramref name="weekOfYear"/> is lower than 0</exception>
            <returns></returns>
        </member>
        <member name="M:Cauldron.Core.DateTimeUtils.GetWeeksInYear(System.Int32)">
            <summary>
            Returns the maximum of the week of teh given year
            </summary>
            <param name="year">The year to get the maximum weeks</param>
            <returns>The maximum week of the given year</returns>
        </member>
        <member name="T:Cauldron.Core.DisplayNameAttribute">
            <summary>
            Specifies additional name for an <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.DisplayNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.DisplayNameAttribute"/> class
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Cauldron.Core.DisplayNameAttribute.DisplayName">
            <summary>
            Gets the display name of the enum value
            </summary>
        </member>
        <member name="T:Cauldron.Core.DisposableBase">
            <summary>
            Represents a base class of a disposable object
            </summary>
        </member>
        <member name="M:Cauldron.Core.DisposableBase.Finalize">
            <summary>
            Destructors are used to destruct instances of classes.
            </summary>
        </member>
        <member name="E:Cauldron.Core.DisposableBase.Disposed">
            <summary>
            Occures if the object has been disposed
            </summary>
        </member>
        <member name="P:Cauldron.Core.DisposableBase.IsDisposed">
            <summary>
            Gets a value indicating if the object has been disposed or not
            </summary>
        </member>
        <member name="M:Cauldron.Core.DisposableBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cauldron.Core.DisposableBase.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">true if managed resources requires disposing</param>
        </member>
        <member name="M:Cauldron.Core.DisposableBase.OnDispose(System.Boolean)">
            <summary>
            Occures after <see cref="M:System.IDisposable.Dispose"/> has been invoked
            </summary>
            <param name="disposeManaged">true if managed resources requires disposing</param>
        </member>
        <member name="T:Cauldron.Core.DynamicEqualityComparer`1">
            <summary>
            Defines methods to support the comparison of objects for equality
            </summary>
            <typeparam name="T">The type of objects to compare</typeparam>
        </member>
        <member name="M:Cauldron.Core.DynamicEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.DynamicEqualityComparer`1"/>
            </summary>
            <param name="predicate">An expression used to determines whether the specified object are equal</param>
        </member>
        <member name="M:Cauldron.Core.DynamicEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.DynamicEqualityComparer`1"/>
            </summary>
            <param name="predicate">An expression used to determines whether the specified object are equal</param>
            <param name="hashCode">An expression used to determin hash code for the specified object</param>
        </member>
        <member name="M:Cauldron.Core.DynamicEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified object are equal
            </summary>
            <param name="x">The first object of type <typeparamref name="T"/> to compare</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare</param>
            <returns>True if the specified objects are equal; otherwise, false</returns>
        </member>
        <member name="M:Cauldron.Core.DynamicEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object</returns>
        </member>
        <member name="T:Cauldron.Core.Encodings">
            <summary>
            Provides predefined encodings
            </summary>
        </member>
        <member name="F:Cauldron.Core.Encodings.ASCII">
            <summary>
             Encoding for the ASCII (7-bit) character set.
            </summary>
        </member>
        <member name="F:Cauldron.Core.Encodings.BigEndianUnicode">
            <summary>
            Encoding for the UTF-16 format that uses the big endian byte order.
            </summary>
        </member>
        <member name="F:Cauldron.Core.Encodings.Unicode">
            <summary>
            Encoding for the UTF-16 format using the little endian byte order.
            </summary>
        </member>
        <member name="F:Cauldron.Core.Encodings.UTF32">
            <summary>
            Encoding for the UTF-32 format using the little endian byte order.
            </summary>
        </member>
        <member name="F:Cauldron.Core.Encodings.ANSI">
            <summary>
            Encoding for the ISO-8859-1 format. Used by default in the legacy components of Microsoft Windows.
            </summary>
        </member>
        <member name="F:Cauldron.Core.Encodings.UTF7">
            <summary>
            Encoding for the UTF-7 format.
            </summary>
        </member>
        <member name="F:Cauldron.Core.Encodings.UTF8">
            <summary>
            Encoding for the UTF-8 format.
            </summary>
        </member>
        <member name="F:Cauldron.Core.Encodings.EBCDIC">
            <summary>
            Encoding for the IBM EBCDIC format.
            </summary>
        </member>
        <member name="T:Cauldron.Core.ExecutionTimer">
            <summary>
            Provides a simple performance measurement of a code block
            </summary>
            <example>
            <code>
            using(var perf = new ExecutionTimer())
            {
            }
            </code>
            </example>
        </member>
        <member name="M:Cauldron.Core.ExecutionTimer.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.ExecutionTimer"/>
            </summary>
            <param name="memberName">The name of the calling method</param>
        </member>
        <member name="M:Cauldron.Core.ExecutionTimer.OnDispose(System.Boolean)">
            <summary>
            Occures after <see cref="M:System.IDisposable.Dispose"/> has been invoked
            </summary>
            <param name="disposeManaged">true if managed resources requires disposing</param>
        </member>
        <member name="T:Cauldron.Core.Formatters.ByteSizeFormatter">
            <summary>
            Formats a numeric value to a human readable size.
            <para/>
            For example: The reformatted value of the number 2048 is 2KB
            </summary>
            <example>
            <code>
            var result = string.Format(new ByteSizeFormatter(), "The size is {0:byte}", value);
            var result = string.Format(new ByteSizeFormatter(), "The size is {0:byte 0.###}", value);
            </code>
            </example>
        </member>
        <member name="M:Cauldron.Core.Formatters.ByteSizeFormatter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.Formatters.ByteSizeFormatter"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.Formatters.ByteSizeFormatter.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.Formatters.ByteSizeFormatter"/>
            </summary>
            <param name="cultureInfo">An object that supplies culture-specific formatting information</param>
        </member>
        <member name="M:Cauldron.Core.Formatters.ByteSizeFormatter.OnFormat(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications. </param>
            <param name="arg">An object to format. </param>
            <param name="formatProvider">An object that supplies format information about the current instance. </param>
            <returns>The string representation of the value of arg, formatted as specified by format and formatProvider.</returns>
        </member>
        <member name="T:Cauldron.Core.Formatters.Formatter">
            <summary>
            Represents an extensible format provider <see cref="T:System.IFormatProvider"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.Formatters.Formatter.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.Formatters.Formatter"/>
            </summary>
            <param name="cultureInfo">An object that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:Cauldron.Core.Formatters.Formatter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.Formatters.Formatter"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.Formatters.Formatter.Add(System.ICustomFormatter)">
            <summary>
            Adds a new custom formatter to the collection
            </summary>
            <param name="customFormatter"></param>
        </member>
        <member name="M:Cauldron.Core.Formatters.Formatter.OnFormat(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications. </param>
            <param name="arg">An object to format. </param>
            <param name="formatProvider">An object that supplies format information about the current instance. </param>
            <returns>The string representation of the value of arg, formatted as specified by format and formatProvider.</returns>
        </member>
        <member name="T:Cauldron.Core.Formatters.FormatterBase">
            <summary>
            Provides a base class for custom formatters
            </summary>
        </member>
        <member name="M:Cauldron.Core.Formatters.FormatterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cauldron.Core.Formatters.FormatterBase"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.Formatters.FormatterBase.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications. </param>
            <param name="arg">An object to format. </param>
            <param name="formatProvider">An object that supplies format information about the current instance. </param>
            <returns>The string representation of the value of arg, formatted as specified by format and formatProvider.</returns>
        </member>
        <member name="M:Cauldron.Core.Formatters.FormatterBase.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">An object that specifies the type of format object to return.</param>
            <returns>An instance of the object specified by formatType, if the IFormatProvider implementation can supply that type of object; otherwise, null.</returns>
        </member>
        <member name="M:Cauldron.Core.Formatters.FormatterBase.OnFormat(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications. </param>
            <param name="arg">An object to format. </param>
            <param name="formatProvider">An object that supplies format information about the current instance. </param>
            <returns>The string representation of the value of arg, formatted as specified by format and formatProvider.</returns>
        </member>
        <member name="T:Cauldron.Core.Formatters.MetricUnitFormatter">
            <summary>
            Formats a numeric value to a human readable metric number.
            <para/>
            For example: The reformatted value of the number 2400 is 2.4k
            </summary>
            <example>
            <code>
            var result = string.Format(new MetricUnitFormatter(), "The size is {0:metric}", value);
            var result = string.Format(new MetricUnitFormatter(), "The size is {0:metric #0.00}", value);
            </code>
            </example>
        </member>
        <member name="M:Cauldron.Core.Formatters.MetricUnitFormatter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.Formatters.MetricUnitFormatter"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.Formatters.MetricUnitFormatter.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.Formatters.MetricUnitFormatter"/>
            </summary>
            <param name="cultureInfo">An object that supplies culture-specific formatting information</param>
        </member>
        <member name="M:Cauldron.Core.Formatters.MetricUnitFormatter.OnFormat(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            <param name="format">A format string containing formatting specifications. </param>
            <param name="arg">An object to format. </param>
            <param name="formatProvider">An object that supplies format information about the current instance. </param>
            <returns>The string representation of the value of arg, formatted as specified by format and formatProvider.</returns>
        </member>
        <member name="T:Cauldron.Core.HashAlgorithms">
            <summary>
            Describes the hash algorithms
            </summary>
        </member>
        <member name="F:Cauldron.Core.HashAlgorithms.Md5">
            <summary>
            The Md5 has algorithm
            </summary>
        </member>
        <member name="F:Cauldron.Core.HashAlgorithms.Sha256">
            <summary>
            The Sha 256 algorithm
            </summary>
        </member>
        <member name="F:Cauldron.Core.HashAlgorithms.Sha512">
            <summary>
            The Sha 512 algorithm
            </summary>
        </member>
        <member name="T:Cauldron.Core.IDisposableObject">
            <summary>
            Provides a mechanism for releasing unmanaged resources.
            </summary>
        </member>
        <member name="E:Cauldron.Core.IDisposableObject.Disposed">
            <summary>
            Occures if the object has been disposed
            </summary>
        </member>
        <member name="P:Cauldron.Core.IDisposableObject.IsDisposed">
            <summary>
            Gets a value indicating if the object has been disposed or not
            </summary>
        </member>
        <member name="T:Cauldron.Core.Java.JavaProperties">
            <summary>
            Reads and writes a java property file
            </summary>
        </member>
        <member name="M:Cauldron.Core.Java.JavaProperties.Read(System.String)">
            <summary>
            Parses the java property file from a string
            </summary>
            <param name="body">The content of the property file</param>
            <returns>A new instance of <see cref="T:Cauldron.Core.Java.JavaProperties"/></returns>
        </member>
        <member name="M:Cauldron.Core.Java.JavaProperties.Read(System.IO.Stream)">
            <summary>
            Parses the java property file from a stream
            </summary>
            <param name="stream">The stream</param>
            <returns>A new instance of <see cref="T:Cauldron.Core.Java.JavaProperties"/></returns>
        </member>
        <member name="M:Cauldron.Core.Java.JavaProperties.ReadAsync(System.IO.FileInfo)">
            <summary>
            Parses the java property file from a file
            </summary>
            <param name="file">The property file</param>
            <returns>A new instance of <see cref="T:Cauldron.Core.Java.JavaProperties"/></returns>
        </member>
        <member name="M:Cauldron.Core.Java.JavaProperties.SaveAsync(System.IO.FileInfo)">
            <summary>
            Saves the <see cref="T:Cauldron.Core.Java.JavaProperties"/> instance to a file
            </summary>
            <param name="file">The property file</param>
            <returns>An awaitable task</returns>
        </member>
        <member name="M:Cauldron.Core.Java.JavaProperties.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Cauldron.Core.Java.JavaProperties.GetKeyForItem(Cauldron.Core.Java.PropertyLine)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="T:Cauldron.Core.Java.PropertyLine">
            <summary>
            Represents a line in the <see cref="T:Cauldron.Core.Java.JavaProperties"/>
            </summary>
        </member>
        <member name="M:Cauldron.Core.Java.PropertyLine.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.Java.PropertyLine"/>
            </summary>
            <param name="key">The key of property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="P:Cauldron.Core.Java.PropertyLine.Key">
            <summary>
            Gets the key of the value
            </summary>
        </member>
        <member name="P:Cauldron.Core.Java.PropertyLine.Value">
            <summary>
            Gets or sets a value of ta value
            </summary>
        </member>
        <member name="M:Cauldron.Core.Java.PropertyLine.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Cauldron.Core.Mathc">
            <summary>
            Provides static methods for common mathematical functions.
            </summary>
        </member>
        <member name="M:Cauldron.Core.Mathc.Add(System.Object,System.Object)">
            <summary>
            Adds <paramref name="a"/> to <paramref name="b"/>
            <para/>
            If <paramref name="a"/> and <paramref name="b"/> are null then null is returned.
            If <paramref name="a"/> is null then <paramref name="b"/> is returned.
            If <paramref name="b"/> is null then <paramref name="a"/> is returned.
            <para/>
            Tries to cast primitiv <see cref="T:System.Type"/> and use the + operator.
            If the <see cref="T:System.Type"/> is unknown then reflection is used to determin the operator.
            </summary>
            <param name="a">The first summand</param>
            <param name="b">The second summand</param>
            <returns>Returns the sum of the addition</returns>
            <exception cref="T:System.ArgumentException">Operator cannot be applied</exception>
        </member>
        <member name="M:Cauldron.Core.Mathc.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a value between a minimum and maximum value.
            </summary>
            <param name="value">The value to clamp</param>
            <param name="min">The minimum value the parameter <paramref name="value"/> can have</param>
            <param name="max">The maximum value the parameter <paramref name="value"/> can have</param>
            <returns>The clamped value</returns>
        </member>
        <member name="M:Cauldron.Core.Mathc.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a value between a minimum and maximum value.
            </summary>
            <param name="value">The value to clamp</param>
            <param name="min">The minimum value the parameter <paramref name="value"/> can have</param>
            <param name="max">The maximum value the parameter <paramref name="value"/> can have</param>
            <returns>The clamped value</returns>
        </member>
        <member name="M:Cauldron.Core.Mathc.DegreesToRadians(System.Double)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:Cauldron.Core.Mathc.Divide(System.Object,System.Object)">
            <summary>
            Divides <paramref name="a"/> with <paramref name="b"/>
            <para/>
            If <paramref name="a"/> and <paramref name="b"/> are null then null is returned.
            If <paramref name="a"/> is null then 0 is returned.
            If <paramref name="b"/> is null then <paramref name="a"/> is returned;
            <para/>
            Tries to cast primitiv <see cref="T:System.Type"/> and use the / operator.
            If the <see cref="T:System.Type"/> is unknown then reflection is used to determin the operator.
            </summary>
            <param name="a">The dividend</param>
            <param name="b">The divisor</param>
            <returns>Returns the quotient of the division</returns>
            <exception cref="T:System.ArgumentException">Operator cannot be applied</exception>
        </member>
        <member name="M:Cauldron.Core.Mathc.Multiply(System.Object,System.Object)">
            <summary>
            Multiplies <paramref name="a"/> with <paramref name="b"/>
            <para/>
            If <paramref name="a"/> and <paramref name="b"/> are null then null is returned.
            If <paramref name="a"/> is null then <paramref name="b"/> is returned.
            If <paramref name="b"/> is null then <paramref name="a"/> is returned.
            <para/>
            Tries to cast primitiv <see cref="T:System.Type"/> and use the * operator.
            If the <see cref="T:System.Type"/> is unknown then reflection is used to determin the operator.
            </summary>
            <param name="a">The multiplier</param>
            <param name="b">The multiplicand</param>
            <returns>Returns the product of the multiplication</returns>
            <exception cref="T:System.ArgumentException">Operator cannot be applied</exception>
        </member>
        <member name="M:Cauldron.Core.Mathc.RadiansToDegrees(System.Double)">
            <summary>
            Converts radians to degrees
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:Cauldron.Core.Mathc.Substract(System.Object,System.Object)">
            <summary>
            Substracts <paramref name="b"/> from <paramref name="a"/>
            <para/>
            If <paramref name="a"/> and <paramref name="b"/> are null then null is returned.
            If <paramref name="a"/> is null then 0 is returned.
            If <paramref name="b"/> is null then <paramref name="a"/> is returned;
            <para/>
            Tries to cast primitiv <see cref="T:System.Type"/> and use the - operator.
            If the <see cref="T:System.Type"/> is unknown then reflection is used to determin the operator.
            </summary>
            <param name="a">The minuend</param>
            <param name="b">The substrahend</param>
            <returns>Returns the difference of the substraction</returns>
            <exception cref="T:System.ArgumentException">Operator cannot be applied</exception>
        </member>
        <member name="M:Cauldron.Core.Mathc.ValueOf(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the percentage relationship of two values
            </summary>
            <param name="value">Current value of the systems</param>
            <param name="valueMin">Minimum value of the current system</param>
            <param name="valueMax">Maximum value of the current system</param>
            <param name="targetValueMin">Minimum value of the target system</param>
            <param name="targetValueMax">Maximum value of the target system</param>
            <returns></returns>
        </member>
        <member name="M:Cauldron.Core.Mathc.ValueOf(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the percentage relationship of two values
            </summary>
            <param name="value">Current value of the systems</param>
            <param name="valueMax">Maximum value of the current system</param>
            <param name="targetValueMax">Minimum value of the target system</param>
            <returns></returns>
        </member>
        <member name="T:Cauldron.Core.MessageManager">
            <summary>
            Manages the messaging system
            </summary>
        </member>
        <member name="M:Cauldron.Core.MessageManager.Send(Cauldron.Core.MessagingArgs)">
            <summary>
            Sends a message to all message subscribers
            </summary>
            <param name="args">The argument of the message</param>
            <returns>A collection of listeners that subscribed to this message</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.MessageManager.Subscribe``1(System.Object,System.Action{``0})">
            <summary>
            Subscribes to a message. If the subscriber implements the <see cref="T:Cauldron.Core.IDisposableObject"/> interface, the <see cref="T:Cauldron.Core.MessageManager"/> will
            automatically add the <see cref="M:Cauldron.Core.MessageManager.Unsubscribe(System.Object)"/> method to the dispose event
            </summary>
            <typeparam name="T">The type of message to subscribe to</typeparam>
            <param name="subscriber">The object that subscribes to a message</param>
            <param name="subscriptionHandler">The handler that will be invoked on message recieve</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscriber"/> is null</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscriptionHandler"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.MessageManager.Unsubscribe(System.Object)">
            <summary>
            Unsubscribs all subscriptions from the defined subscriber
            </summary>
            <param name="subscriber">The subscriber</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscriber"/> is null</exception>
        </member>
        <member name="M:Cauldron.Core.MessageManager.Unsubscribe">
            <summary>
            Unsubscribs all subscriptions
            </summary>
        </member>
        <member name="M:Cauldron.Core.MessageManager.Unsubscribe``1(System.Object)">
            <summary>
            Unsubscribs all subscriptions from the defined subscriber for the given message type
            </summary>
            <typeparam name="T">The message type that will be unsubscribed</typeparam>
            <param name="subscriber">The subscriber</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscriber"/> is null</exception>
        </member>
        <member name="T:Cauldron.Core.MessagingArgs">
            <summary>
            Provides message data
            </summary>
        </member>
        <member name="M:Cauldron.Core.MessagingArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.MessagingArgs"/>
            </summary>
            <param name="sender">The source of the message</param>
        </member>
        <member name="P:Cauldron.Core.MessagingArgs.Sender">
            <summary>
            Gets the message source
            </summary>
        </member>
        <member name="T:Cauldron.Core.MiscUtils">
            <summary>
            Provides static methods
            </summary>
        </member>
        <member name="M:Cauldron.Core.MiscUtils.GenerateLoremIpsum(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Generates a random lorem ipsum text
            </summary>
            <param name="minWords">The minimum word count to generate</param>
            <param name="maxWords">The maximum word count to generate</param>
            <param name="minSentences">The minimum sentence count to generate</param>
            <param name="maxSentences">The maximum sentence count to generate</param>
            <param name="paragraphCount">The number of paragraphs to generate</param>
            <returns>The generated lorem ipsum text</returns>
            <exception cref="T:System.ArgumentException"><paramref name="minWords"/> is 0</exception>
            <exception cref="T:System.ArgumentException"><paramref name="minSentences"/> is 0</exception>
            <exception cref="T:System.ArgumentException"><paramref name="paragraphCount"/> is 0</exception>
            <exception cref="T:System.ArgumentException"><paramref name="minWords"/> is greater than <paramref name="maxWords"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="minSentences"/> is greater than <paramref name="maxSentences"/></exception>
        </member>
        <member name="M:Cauldron.Core.MiscUtils.GetDisplayNames``1">
             <summary>
             Returns the <see cref="P:Cauldron.Core.DisplayNameAttribute.DisplayName"/> of an enum type.
             </summary>
             <typeparam name="TEnum">The enum type</typeparam>
             <returns>A dictionary of display names with the enum value member as key</returns>
             <example>
             <code>
             using System;
             using Cauldon.Core;
            
             public enum TestEnum
             {
                 [DisplayName("FIRST")]
                 One,
                 [DisplayName("SECOND")]
                 Two,
                 [DisplayName("THIRD")]
                 Three
             }
            
             public class Program
             {
                 private static TestEnum GetValue(string value) =&gt;
                     MiscUtils
                         .GetDisplayNames&lt;TestEnum&gt;()
                         .FirstOrDefault(x =&gt; x.Value == value)
                         .Key;
            
                 public static Main(string[] args)
                 {
                     var value = GetValue("SECOND");
                     // Output: Two
                     Console.WriteLine(value);
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:Cauldron.Core.Output">
            <summary>
            Provides a set of methods that help to output information of a compiled dll
            </summary>
        </member>
        <member name="T:Cauldron.Core.PingResults">
            <summary>
            Represents ping result information
            </summary>
        </member>
        <member name="F:Cauldron.Core.PingResults.localIpAddress">
            <summary>
            The local ip address
            </summary>
        </member>
        <member name="F:Cauldron.Core.PingResults.localPort">
            <summary>
            The local port
            </summary>
        </member>
        <member name="F:Cauldron.Core.PingResults.remoteIpAddress">
            <summary>
            The remote ip address
            </summary>
        </member>
        <member name="F:Cauldron.Core.PingResults.remotePort">
            <summary>
            The remote port
            </summary>
        </member>
        <member name="F:Cauldron.Core.PingResults.roundTripTimeMax">
            <summary>
            The max round trip time
            </summary>
        </member>
        <member name="F:Cauldron.Core.PingResults.roundTripTimeMin">
            <summary>
            The min round trip time
            </summary>
        </member>
        <member name="T:Cauldron.Core.Randomizer">
            <summary>
            Provides a randomizer that is cryptographicly secure
            </summary>
        </member>
        <member name="M:Cauldron.Core.Randomizer.Next">
            <summary>
            Returns a nonnegative random number.
            Cryptographic secure.
            </summary>
            <returns>A random integer value</returns>
        </member>
        <member name="M:Cauldron.Core.Randomizer.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            Cryptographic secure.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated.maxValue must be greater than or equal to 0.</param>
            <returns>A random integer value</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue"/> is greater than <paramref name="maxValue"/></exception>
        </member>
        <member name="M:Cauldron.Core.Randomizer.Next``1(``0[])">
            <summary>
            Returns a random number item from the array.
            Cryptographic secure.
            </summary>
            <typeparam name="T">The array item type</typeparam>
            <param name="array">The array</param>
            <returns>A random item from the array</returns>
        </member>
        <member name="M:Cauldron.Core.Randomizer.Next(System.DateTime,System.DateTime)">
            <summary>
            Returns a random <see cref="T:System.DateTime"/> between two dates.
            </summary>
            <param name="from">The inclusive lower bound of the random date returned.</param>
            <param name="to">The exclusive upper bound of the random date to be generated.</param>
            <returns>A random date</returns>
        </member>
        <member name="M:Cauldron.Core.Randomizer.NextBoolean">
            <summary>
            Returns a random boolean.
            Cryptographic secure.
            </summary>
            <returns>A random boolean</returns>
        </member>
        <member name="M:Cauldron.Core.Randomizer.NextByte">
            <summary>
            Returns a random byte value
            </summary>
            <returns>A random byte value (0 to 255)</returns>
        </member>
        <member name="M:Cauldron.Core.Randomizer.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            Cryptographic secure.
            </summary>
            <returns>A random value</returns>
        </member>
        <member name="M:Cauldron.Core.Randomizer.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a random number within a specified range.
            Cryptographic secure.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0.</param>
            <returns>A random value</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue"/> is greater than <paramref name="maxValue"/></exception>
        </member>
        <member name="T:Cauldron.Core.Serializer">
            <summary>
            Provides method that helps with serializing and deserializing an object
            </summary>
        </member>
        <member name="M:Cauldron.Core.Serializer.DeserializeAsync``1(System.String)">
            <summary>
            Deserializes an object.
            </summary>
            <typeparam name="T">The object type to deserialize</typeparam>
            <param name="name">The name of the file</param>
            <returns>An instance of the deserialized object</returns>
            <exception cref="T:System.NotSupportedException"><typeparamref name="T"/> is a value type</exception>
        </member>
        <member name="M:Cauldron.Core.Serializer.DeserializeAsync``1(System.IO.DirectoryInfo,System.String)">
            <summary>
            Deserializes an object.
            </summary>
            <typeparam name="T">The object type to deserialize</typeparam>
            <param name="folder">The directory where the file resides</param>
            <param name="name">The name of the file</param>
            <returns>An instance of the deserialized object</returns>
            <exception cref="T:System.NotSupportedException"><typeparamref name="T"/> is a value type</exception>
        </member>
        <member name="M:Cauldron.Core.Serializer.DeserializeAsync(System.Type,System.String)">
            <summary>
            Deserializes an object.
            </summary>
            <param name="type">The object type to deserialize</param>
            <param name="name">The name of the file</param>
            <returns>An instance of the deserialized object</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="type"/> is a value type</exception>
        </member>
        <member name="M:Cauldron.Core.Serializer.DeserializeAsync(System.Type,System.IO.DirectoryInfo,System.String)">
            <summary>
            Deserializes an object.
            </summary>
            <param name="type">The object type to deserialize</param>
            <param name="folder">The directory where the file resides</param>
            <param name="name">The name of the file</param>
            <returns>An instance of the deserialized object</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="type"/> is a value type</exception>
        </member>
        <member name="M:Cauldron.Core.Serializer.Serialize(System.Object,System.IO.DirectoryInfo,System.String)">
            <summary>
            Serializes an object.
            </summary>
            <param name="context">The object to serialize</param>
            <param name="name">The name of the file</param>
            <param name="folder">The directory where the file resides</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="context"/> is a value type</exception>
        </member>
        <member name="M:Cauldron.Core.Serializer.SerializeAsync(System.Object,System.String)">
            <summary>
            Serializes an object.
            </summary>
            <param name="context">The object to serialize</param>
            <param name="name">The name of the file</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="context"/> is a value type</exception>
        </member>
        <member name="M:Cauldron.Core.Serializer.SerializeAsync(System.Object,System.IO.DirectoryInfo,System.String)">
            <summary>
            Serializes an object.
            </summary>
            <param name="context">The object to serialize</param>
            <param name="name">The name of the file</param>
            <param name="folder">The directory where the file resides</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="context"/> is a value type</exception>
        </member>
        <member name="T:Cauldron.Core.SystemInfo">
            <summary>
            Provides methods for retrieving system information
            </summary>
        </member>
        <member name="P:Cauldron.Core.SystemInfo.HardwareIdentifier">
            <summary>
            Returns a string that can be used to identify the hardware
            </summary>
        </member>
        <member name="T:Cauldron.Core.Web">
            <summary>
            Provides functions for web operations
            </summary>
        </member>
        <member name="M:Cauldron.Core.Web.DownloadFile(System.Uri,System.IO.FileInfo)">
            <summary>
            Starts an asyncronous download operation
            </summary>
            <param name="uri">The uri of the file</param>
            <param name="resultFile">The file that the response will be written to.</param>
        </member>
        <member name="T:Cauldron.Core.Yaml.YamlConvert">
            <summary>
            Provides methods for converting between common language runtime types and YAML types.
            </summary>
        </member>
        <member name="M:Cauldron.Core.Yaml.YamlConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the YAML to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The YAML to deserialize.</param>
            <returns>The deserialized object from the YAML string.</returns>
        </member>
        <member name="T:Cauldron.Core.Yaml.YamlPropertyAttribute">
            <summary>
            Instructs the Newtonsoft.Json.JsonSerializer to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="M:Cauldron.Core.Yaml.YamlPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Cauldron.Core.Yaml.YamlPropertyAttribute"/>
            </summary>
            <param name="name">Name of the property.</param>
        </member>
        <member name="P:Cauldron.Core.Yaml.YamlPropertyAttribute.Name">
            <summary>
            Gets the name of the property
            </summary>
        </member>
    </members>
</doc>
